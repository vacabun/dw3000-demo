
UWB-UAV-LABEL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000df34  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000484  0800e0d8  0800e0d8  0001e0d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e55c  0800e55c  00020ab8  2**0
                  CONTENTS
  4 .ARM          00000008  0800e55c  0800e55c  0001e55c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e564  0800e564  00020ab8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800e564  0800e564  0001e564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e56c  0800e56c  0001e56c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000ab8  20000000  0800e570  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001588  20000ab8  0800f028  00020ab8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002040  0800f028  00022040  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020ab8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c634  00000000  00000000  00020ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000048e4  00000000  00000000  0003d11c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017c0  00000000  00000000  00041a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015a0  00000000  00000000  000431c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bb0d  00000000  00000000  00044760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e0f5  00000000  00000000  0006026d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009430b  00000000  00000000  0007e362  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000cf  00000000  00000000  0011266d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000073ec  00000000  00000000  0011273c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000ab8 	.word	0x20000ab8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e0bc 	.word	0x0800e0bc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000abc 	.word	0x20000abc
 80001dc:	0800e0bc 	.word	0x0800e0bc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b974 	b.w	8000eb8 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468e      	mov	lr, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14d      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4694      	mov	ip, r2
 8000bfa:	d969      	bls.n	8000cd0 <__udivmoddi4+0xe8>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b152      	cbz	r2, 8000c18 <__udivmoddi4+0x30>
 8000c02:	fa01 f302 	lsl.w	r3, r1, r2
 8000c06:	f1c2 0120 	rsb	r1, r2, #32
 8000c0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c12:	ea41 0e03 	orr.w	lr, r1, r3
 8000c16:	4094      	lsls	r4, r2
 8000c18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c1c:	0c21      	lsrs	r1, r4, #16
 8000c1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c22:	fa1f f78c 	uxth.w	r7, ip
 8000c26:	fb08 e316 	mls	r3, r8, r6, lr
 8000c2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c2e:	fb06 f107 	mul.w	r1, r6, r7
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3e:	f080 811f 	bcs.w	8000e80 <__udivmoddi4+0x298>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 811c 	bls.w	8000e80 <__udivmoddi4+0x298>
 8000c48:	3e02      	subs	r6, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c5c:	fb00 f707 	mul.w	r7, r0, r7
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x92>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6c:	f080 810a 	bcs.w	8000e84 <__udivmoddi4+0x29c>
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	f240 8107 	bls.w	8000e84 <__udivmoddi4+0x29c>
 8000c76:	4464      	add	r4, ip
 8000c78:	3802      	subs	r0, #2
 8000c7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7e:	1be4      	subs	r4, r4, r7
 8000c80:	2600      	movs	r6, #0
 8000c82:	b11d      	cbz	r5, 8000c8c <__udivmoddi4+0xa4>
 8000c84:	40d4      	lsrs	r4, r2
 8000c86:	2300      	movs	r3, #0
 8000c88:	e9c5 4300 	strd	r4, r3, [r5]
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d909      	bls.n	8000caa <__udivmoddi4+0xc2>
 8000c96:	2d00      	cmp	r5, #0
 8000c98:	f000 80ef 	beq.w	8000e7a <__udivmoddi4+0x292>
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	fab3 f683 	clz	r6, r3
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d14a      	bne.n	8000d48 <__udivmoddi4+0x160>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xd4>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80f9 	bhi.w	8000eae <__udivmoddi4+0x2c6>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	469e      	mov	lr, r3
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d0e0      	beq.n	8000c8c <__udivmoddi4+0xa4>
 8000cca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cce:	e7dd      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000cd0:	b902      	cbnz	r2, 8000cd4 <__udivmoddi4+0xec>
 8000cd2:	deff      	udf	#255	; 0xff
 8000cd4:	fab2 f282 	clz	r2, r2
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	f040 8092 	bne.w	8000e02 <__udivmoddi4+0x21a>
 8000cde:	eba1 010c 	sub.w	r1, r1, ip
 8000ce2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce6:	fa1f fe8c 	uxth.w	lr, ip
 8000cea:	2601      	movs	r6, #1
 8000cec:	0c20      	lsrs	r0, r4, #16
 8000cee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cf2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cf6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cfa:	fb0e f003 	mul.w	r0, lr, r3
 8000cfe:	4288      	cmp	r0, r1
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x12c>
 8000d02:	eb1c 0101 	adds.w	r1, ip, r1
 8000d06:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x12a>
 8000d0c:	4288      	cmp	r0, r1
 8000d0e:	f200 80cb 	bhi.w	8000ea8 <__udivmoddi4+0x2c0>
 8000d12:	4643      	mov	r3, r8
 8000d14:	1a09      	subs	r1, r1, r0
 8000d16:	b2a4      	uxth	r4, r4
 8000d18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d24:	fb0e fe00 	mul.w	lr, lr, r0
 8000d28:	45a6      	cmp	lr, r4
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x156>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d34:	d202      	bcs.n	8000d3c <__udivmoddi4+0x154>
 8000d36:	45a6      	cmp	lr, r4
 8000d38:	f200 80bb 	bhi.w	8000eb2 <__udivmoddi4+0x2ca>
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	eba4 040e 	sub.w	r4, r4, lr
 8000d42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d46:	e79c      	b.n	8000c82 <__udivmoddi4+0x9a>
 8000d48:	f1c6 0720 	rsb	r7, r6, #32
 8000d4c:	40b3      	lsls	r3, r6
 8000d4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d56:	fa20 f407 	lsr.w	r4, r0, r7
 8000d5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d5e:	431c      	orrs	r4, r3
 8000d60:	40f9      	lsrs	r1, r7
 8000d62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d66:	fa00 f306 	lsl.w	r3, r0, r6
 8000d6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d6e:	0c20      	lsrs	r0, r4, #16
 8000d70:	fa1f fe8c 	uxth.w	lr, ip
 8000d74:	fb09 1118 	mls	r1, r9, r8, r1
 8000d78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d80:	4288      	cmp	r0, r1
 8000d82:	fa02 f206 	lsl.w	r2, r2, r6
 8000d86:	d90b      	bls.n	8000da0 <__udivmoddi4+0x1b8>
 8000d88:	eb1c 0101 	adds.w	r1, ip, r1
 8000d8c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d90:	f080 8088 	bcs.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d94:	4288      	cmp	r0, r1
 8000d96:	f240 8085 	bls.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9e:	4461      	add	r1, ip
 8000da0:	1a09      	subs	r1, r1, r0
 8000da2:	b2a4      	uxth	r4, r4
 8000da4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000da8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000db0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db4:	458e      	cmp	lr, r1
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x1e2>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc0:	d26c      	bcs.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc2:	458e      	cmp	lr, r1
 8000dc4:	d96a      	bls.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	4461      	add	r1, ip
 8000dca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dce:	fba0 9402 	umull	r9, r4, r0, r2
 8000dd2:	eba1 010e 	sub.w	r1, r1, lr
 8000dd6:	42a1      	cmp	r1, r4
 8000dd8:	46c8      	mov	r8, r9
 8000dda:	46a6      	mov	lr, r4
 8000ddc:	d356      	bcc.n	8000e8c <__udivmoddi4+0x2a4>
 8000dde:	d053      	beq.n	8000e88 <__udivmoddi4+0x2a0>
 8000de0:	b15d      	cbz	r5, 8000dfa <__udivmoddi4+0x212>
 8000de2:	ebb3 0208 	subs.w	r2, r3, r8
 8000de6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dea:	fa01 f707 	lsl.w	r7, r1, r7
 8000dee:	fa22 f306 	lsr.w	r3, r2, r6
 8000df2:	40f1      	lsrs	r1, r6
 8000df4:	431f      	orrs	r7, r3
 8000df6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dfa:	2600      	movs	r6, #0
 8000dfc:	4631      	mov	r1, r6
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	f1c2 0320 	rsb	r3, r2, #32
 8000e06:	40d8      	lsrs	r0, r3
 8000e08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e10:	4091      	lsls	r1, r2
 8000e12:	4301      	orrs	r1, r0
 8000e14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e18:	fa1f fe8c 	uxth.w	lr, ip
 8000e1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e20:	fb07 3610 	mls	r6, r7, r0, r3
 8000e24:	0c0b      	lsrs	r3, r1, #16
 8000e26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e2e:	429e      	cmp	r6, r3
 8000e30:	fa04 f402 	lsl.w	r4, r4, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x260>
 8000e36:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3e:	d22f      	bcs.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e40:	429e      	cmp	r6, r3
 8000e42:	d92d      	bls.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e44:	3802      	subs	r0, #2
 8000e46:	4463      	add	r3, ip
 8000e48:	1b9b      	subs	r3, r3, r6
 8000e4a:	b289      	uxth	r1, r1
 8000e4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e50:	fb07 3316 	mls	r3, r7, r6, r3
 8000e54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e58:	fb06 f30e 	mul.w	r3, r6, lr
 8000e5c:	428b      	cmp	r3, r1
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x28a>
 8000e60:	eb1c 0101 	adds.w	r1, ip, r1
 8000e64:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e68:	d216      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d914      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6e:	3e02      	subs	r6, #2
 8000e70:	4461      	add	r1, ip
 8000e72:	1ac9      	subs	r1, r1, r3
 8000e74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e78:	e738      	b.n	8000cec <__udivmoddi4+0x104>
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e705      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e3      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6f8      	b.n	8000c7a <__udivmoddi4+0x92>
 8000e88:	454b      	cmp	r3, r9
 8000e8a:	d2a9      	bcs.n	8000de0 <__udivmoddi4+0x1f8>
 8000e8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7a3      	b.n	8000de0 <__udivmoddi4+0x1f8>
 8000e98:	4646      	mov	r6, r8
 8000e9a:	e7ea      	b.n	8000e72 <__udivmoddi4+0x28a>
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	e794      	b.n	8000dca <__udivmoddi4+0x1e2>
 8000ea0:	4640      	mov	r0, r8
 8000ea2:	e7d1      	b.n	8000e48 <__udivmoddi4+0x260>
 8000ea4:	46d0      	mov	r8, sl
 8000ea6:	e77b      	b.n	8000da0 <__udivmoddi4+0x1b8>
 8000ea8:	3b02      	subs	r3, #2
 8000eaa:	4461      	add	r1, ip
 8000eac:	e732      	b.n	8000d14 <__udivmoddi4+0x12c>
 8000eae:	4630      	mov	r0, r6
 8000eb0:	e709      	b.n	8000cc6 <__udivmoddi4+0xde>
 8000eb2:	4464      	add	r4, ip
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	e742      	b.n	8000d3e <__udivmoddi4+0x156>

08000eb8 <__aeabi_idiv0>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b088      	sub	sp, #32
 8000ec0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec2:	f107 030c 	add.w	r3, r7, #12
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	605a      	str	r2, [r3, #4]
 8000ecc:	609a      	str	r2, [r3, #8]
 8000ece:	60da      	str	r2, [r3, #12]
 8000ed0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60bb      	str	r3, [r7, #8]
 8000ed6:	4b3d      	ldr	r3, [pc, #244]	; (8000fcc <MX_GPIO_Init+0x110>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	4a3c      	ldr	r2, [pc, #240]	; (8000fcc <MX_GPIO_Init+0x110>)
 8000edc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee2:	4b3a      	ldr	r3, [pc, #232]	; (8000fcc <MX_GPIO_Init+0x110>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000eea:	60bb      	str	r3, [r7, #8]
 8000eec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	607b      	str	r3, [r7, #4]
 8000ef2:	4b36      	ldr	r3, [pc, #216]	; (8000fcc <MX_GPIO_Init+0x110>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	4a35      	ldr	r2, [pc, #212]	; (8000fcc <MX_GPIO_Init+0x110>)
 8000ef8:	f043 0301 	orr.w	r3, r3, #1
 8000efc:	6313      	str	r3, [r2, #48]	; 0x30
 8000efe:	4b33      	ldr	r3, [pc, #204]	; (8000fcc <MX_GPIO_Init+0x110>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	f003 0301 	and.w	r3, r3, #1
 8000f06:	607b      	str	r3, [r7, #4]
 8000f08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	603b      	str	r3, [r7, #0]
 8000f0e:	4b2f      	ldr	r3, [pc, #188]	; (8000fcc <MX_GPIO_Init+0x110>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	4a2e      	ldr	r2, [pc, #184]	; (8000fcc <MX_GPIO_Init+0x110>)
 8000f14:	f043 0302 	orr.w	r3, r3, #2
 8000f18:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1a:	4b2c      	ldr	r3, [pc, #176]	; (8000fcc <MX_GPIO_Init+0x110>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	f003 0302 	and.w	r3, r3, #2
 8000f22:	603b      	str	r3, [r7, #0]
 8000f24:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8000f26:	2201      	movs	r2, #1
 8000f28:	2110      	movs	r1, #16
 8000f2a:	4829      	ldr	r0, [pc, #164]	; (8000fd0 <MX_GPIO_Init+0x114>)
 8000f2c:	f000 fef4 	bl	8001d18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UWB_WAKEUP_GPIO_Port, UWB_WAKEUP_Pin, GPIO_PIN_RESET);
 8000f30:	2200      	movs	r2, #0
 8000f32:	2108      	movs	r1, #8
 8000f34:	4827      	ldr	r0, [pc, #156]	; (8000fd4 <MX_GPIO_Init+0x118>)
 8000f36:	f000 feef 	bl	8001d18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DW_RSTn_GPIO_Port, DW_RSTn_Pin, GPIO_PIN_SET);
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	2110      	movs	r1, #16
 8000f3e:	4825      	ldr	r0, [pc, #148]	; (8000fd4 <MX_GPIO_Init+0x118>)
 8000f40:	f000 feea 	bl	8001d18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000f44:	2310      	movs	r3, #16
 8000f46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f50:	2302      	movs	r3, #2
 8000f52:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000f54:	f107 030c 	add.w	r3, r7, #12
 8000f58:	4619      	mov	r1, r3
 8000f5a:	481d      	ldr	r0, [pc, #116]	; (8000fd0 <MX_GPIO_Init+0x114>)
 8000f5c:	f000 fd40 	bl	80019e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DECA_IRQ_Pin;
 8000f60:	2301      	movs	r3, #1
 8000f62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f64:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(DECA_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000f6e:	f107 030c 	add.w	r3, r7, #12
 8000f72:	4619      	mov	r1, r3
 8000f74:	4817      	ldr	r0, [pc, #92]	; (8000fd4 <MX_GPIO_Init+0x118>)
 8000f76:	f000 fd33 	bl	80019e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UWB_WAKEUP_Pin;
 8000f7a:	2308      	movs	r3, #8
 8000f7c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f86:	2300      	movs	r3, #0
 8000f88:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(UWB_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8000f8a:	f107 030c 	add.w	r3, r7, #12
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4810      	ldr	r0, [pc, #64]	; (8000fd4 <MX_GPIO_Init+0x118>)
 8000f92:	f000 fd25 	bl	80019e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DW_RSTn_Pin;
 8000f96:	2310      	movs	r3, #16
 8000f98:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000f9a:	2311      	movs	r3, #17
 8000f9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DW_RSTn_GPIO_Port, &GPIO_InitStruct);
 8000fa6:	f107 030c 	add.w	r3, r7, #12
 8000faa:	4619      	mov	r1, r3
 8000fac:	4809      	ldr	r0, [pc, #36]	; (8000fd4 <MX_GPIO_Init+0x118>)
 8000fae:	f000 fd17 	bl	80019e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 6, 0);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	2106      	movs	r1, #6
 8000fb6:	2006      	movs	r0, #6
 8000fb8:	f000 fce8 	bl	800198c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000fbc:	2006      	movs	r0, #6
 8000fbe:	f000 fd01 	bl	80019c4 <HAL_NVIC_EnableIRQ>

}
 8000fc2:	bf00      	nop
 8000fc4:	3720      	adds	r7, #32
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40023800 	.word	0x40023800
 8000fd0:	40020000 	.word	0x40020000
 8000fd4:	40020400 	.word	0x40020400

08000fd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fdc:	f000 fbb8 	bl	8001750 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fe0:	f000 f81a 	bl	8001018 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fe4:	f7ff ff6a 	bl	8000ebc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000fe8:	f000 face 	bl	8001588 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8000fec:	f007 fd94 	bl	8008b18 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8000ff0:	f000 f894 	bl	800111c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(1000);
 8000ff4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ff8:	f000 fbec 	bl	80017d4 <HAL_Delay>
  build_examples();
 8000ffc:	f000 fb84 	bl	8001708 <build_examples>
  port_DisableEXT_IRQ();
 8001000:	f007 fd2c 	bl	8008a5c <port_DisableEXT_IRQ>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  example_pointer();
 8001004:	4b03      	ldr	r3, [pc, #12]	; (8001014 <main+0x3c>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4798      	blx	r3
	  HAL_Delay(1000);
 800100a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800100e:	f000 fbe1 	bl	80017d4 <HAL_Delay>
	  example_pointer();
 8001012:	e7f7      	b.n	8001004 <main+0x2c>
 8001014:	20000bbc 	.word	0x20000bbc

08001018 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b094      	sub	sp, #80	; 0x50
 800101c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800101e:	f107 0320 	add.w	r3, r7, #32
 8001022:	2230      	movs	r2, #48	; 0x30
 8001024:	2100      	movs	r1, #0
 8001026:	4618      	mov	r0, r3
 8001028:	f008 fb4c 	bl	80096c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800102c:	f107 030c 	add.w	r3, r7, #12
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	605a      	str	r2, [r3, #4]
 8001036:	609a      	str	r2, [r3, #8]
 8001038:	60da      	str	r2, [r3, #12]
 800103a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800103c:	2300      	movs	r3, #0
 800103e:	60bb      	str	r3, [r7, #8]
 8001040:	4b28      	ldr	r3, [pc, #160]	; (80010e4 <SystemClock_Config+0xcc>)
 8001042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001044:	4a27      	ldr	r2, [pc, #156]	; (80010e4 <SystemClock_Config+0xcc>)
 8001046:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800104a:	6413      	str	r3, [r2, #64]	; 0x40
 800104c:	4b25      	ldr	r3, [pc, #148]	; (80010e4 <SystemClock_Config+0xcc>)
 800104e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001050:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001054:	60bb      	str	r3, [r7, #8]
 8001056:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001058:	2300      	movs	r3, #0
 800105a:	607b      	str	r3, [r7, #4]
 800105c:	4b22      	ldr	r3, [pc, #136]	; (80010e8 <SystemClock_Config+0xd0>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001064:	4a20      	ldr	r2, [pc, #128]	; (80010e8 <SystemClock_Config+0xd0>)
 8001066:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800106a:	6013      	str	r3, [r2, #0]
 800106c:	4b1e      	ldr	r3, [pc, #120]	; (80010e8 <SystemClock_Config+0xd0>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001074:	607b      	str	r3, [r7, #4]
 8001076:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001078:	2301      	movs	r3, #1
 800107a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800107c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001080:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001082:	2302      	movs	r3, #2
 8001084:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001086:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800108a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800108c:	2308      	movs	r3, #8
 800108e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001090:	2348      	movs	r3, #72	; 0x48
 8001092:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001094:	2302      	movs	r3, #2
 8001096:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001098:	2303      	movs	r3, #3
 800109a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800109c:	f107 0320 	add.w	r3, r7, #32
 80010a0:	4618      	mov	r0, r3
 80010a2:	f002 f8e9 	bl	8003278 <HAL_RCC_OscConfig>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80010ac:	f000 f830 	bl	8001110 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010b0:	230f      	movs	r3, #15
 80010b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010b4:	2302      	movs	r3, #2
 80010b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010b8:	2300      	movs	r3, #0
 80010ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010c2:	2300      	movs	r3, #0
 80010c4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010c6:	f107 030c 	add.w	r3, r7, #12
 80010ca:	2102      	movs	r1, #2
 80010cc:	4618      	mov	r0, r3
 80010ce:	f002 fb4b 	bl	8003768 <HAL_RCC_ClockConfig>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80010d8:	f000 f81a 	bl	8001110 <Error_Handler>
  }
}
 80010dc:	bf00      	nop
 80010de:	3750      	adds	r7, #80	; 0x50
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	40023800 	.word	0x40023800
 80010e8:	40007000 	.word	0x40007000

080010ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a04      	ldr	r2, [pc, #16]	; (800110c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d101      	bne.n	8001102 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80010fe:	f000 fb49 	bl	8001794 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40010000 	.word	0x40010000

08001110 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001114:	b672      	cpsid	i
}
 8001116:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001118:	e7fe      	b.n	8001118 <Error_Handler+0x8>
	...

0800111c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001120:	4b17      	ldr	r3, [pc, #92]	; (8001180 <MX_SPI1_Init+0x64>)
 8001122:	4a18      	ldr	r2, [pc, #96]	; (8001184 <MX_SPI1_Init+0x68>)
 8001124:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001126:	4b16      	ldr	r3, [pc, #88]	; (8001180 <MX_SPI1_Init+0x64>)
 8001128:	f44f 7282 	mov.w	r2, #260	; 0x104
 800112c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800112e:	4b14      	ldr	r3, [pc, #80]	; (8001180 <MX_SPI1_Init+0x64>)
 8001130:	2200      	movs	r2, #0
 8001132:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001134:	4b12      	ldr	r3, [pc, #72]	; (8001180 <MX_SPI1_Init+0x64>)
 8001136:	2200      	movs	r2, #0
 8001138:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800113a:	4b11      	ldr	r3, [pc, #68]	; (8001180 <MX_SPI1_Init+0x64>)
 800113c:	2200      	movs	r2, #0
 800113e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001140:	4b0f      	ldr	r3, [pc, #60]	; (8001180 <MX_SPI1_Init+0x64>)
 8001142:	2200      	movs	r2, #0
 8001144:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001146:	4b0e      	ldr	r3, [pc, #56]	; (8001180 <MX_SPI1_Init+0x64>)
 8001148:	f44f 7200 	mov.w	r2, #512	; 0x200
 800114c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800114e:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <MX_SPI1_Init+0x64>)
 8001150:	2220      	movs	r2, #32
 8001152:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001154:	4b0a      	ldr	r3, [pc, #40]	; (8001180 <MX_SPI1_Init+0x64>)
 8001156:	2200      	movs	r2, #0
 8001158:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800115a:	4b09      	ldr	r3, [pc, #36]	; (8001180 <MX_SPI1_Init+0x64>)
 800115c:	2200      	movs	r2, #0
 800115e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001160:	4b07      	ldr	r3, [pc, #28]	; (8001180 <MX_SPI1_Init+0x64>)
 8001162:	2200      	movs	r2, #0
 8001164:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001166:	4b06      	ldr	r3, [pc, #24]	; (8001180 <MX_SPI1_Init+0x64>)
 8001168:	220a      	movs	r2, #10
 800116a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800116c:	4804      	ldr	r0, [pc, #16]	; (8001180 <MX_SPI1_Init+0x64>)
 800116e:	f002 fd4b 	bl	8003c08 <HAL_SPI_Init>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001178:	f7ff ffca 	bl	8001110 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800117c:	bf00      	nop
 800117e:	bd80      	pop	{r7, pc}
 8001180:	20000ad4 	.word	0x20000ad4
 8001184:	40013000 	.word	0x40013000

08001188 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b08a      	sub	sp, #40	; 0x28
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001190:	f107 0314 	add.w	r3, r7, #20
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a19      	ldr	r2, [pc, #100]	; (800120c <HAL_SPI_MspInit+0x84>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d12b      	bne.n	8001202 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	613b      	str	r3, [r7, #16]
 80011ae:	4b18      	ldr	r3, [pc, #96]	; (8001210 <HAL_SPI_MspInit+0x88>)
 80011b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b2:	4a17      	ldr	r2, [pc, #92]	; (8001210 <HAL_SPI_MspInit+0x88>)
 80011b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011b8:	6453      	str	r3, [r2, #68]	; 0x44
 80011ba:	4b15      	ldr	r3, [pc, #84]	; (8001210 <HAL_SPI_MspInit+0x88>)
 80011bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011c2:	613b      	str	r3, [r7, #16]
 80011c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	60fb      	str	r3, [r7, #12]
 80011ca:	4b11      	ldr	r3, [pc, #68]	; (8001210 <HAL_SPI_MspInit+0x88>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	4a10      	ldr	r2, [pc, #64]	; (8001210 <HAL_SPI_MspInit+0x88>)
 80011d0:	f043 0301 	orr.w	r3, r3, #1
 80011d4:	6313      	str	r3, [r2, #48]	; 0x30
 80011d6:	4b0e      	ldr	r3, [pc, #56]	; (8001210 <HAL_SPI_MspInit+0x88>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80011e2:	23e0      	movs	r3, #224	; 0xe0
 80011e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e6:	2302      	movs	r3, #2
 80011e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ee:	2303      	movs	r3, #3
 80011f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011f2:	2305      	movs	r3, #5
 80011f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f6:	f107 0314 	add.w	r3, r7, #20
 80011fa:	4619      	mov	r1, r3
 80011fc:	4805      	ldr	r0, [pc, #20]	; (8001214 <HAL_SPI_MspInit+0x8c>)
 80011fe:	f000 fbef 	bl	80019e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001202:	bf00      	nop
 8001204:	3728      	adds	r7, #40	; 0x28
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40013000 	.word	0x40013000
 8001210:	40023800 	.word	0x40023800
 8001214:	40020000 	.word	0x40020000

08001218 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	607b      	str	r3, [r7, #4]
 8001222:	4b10      	ldr	r3, [pc, #64]	; (8001264 <HAL_MspInit+0x4c>)
 8001224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001226:	4a0f      	ldr	r2, [pc, #60]	; (8001264 <HAL_MspInit+0x4c>)
 8001228:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800122c:	6453      	str	r3, [r2, #68]	; 0x44
 800122e:	4b0d      	ldr	r3, [pc, #52]	; (8001264 <HAL_MspInit+0x4c>)
 8001230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001232:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001236:	607b      	str	r3, [r7, #4]
 8001238:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	603b      	str	r3, [r7, #0]
 800123e:	4b09      	ldr	r3, [pc, #36]	; (8001264 <HAL_MspInit+0x4c>)
 8001240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001242:	4a08      	ldr	r2, [pc, #32]	; (8001264 <HAL_MspInit+0x4c>)
 8001244:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001248:	6413      	str	r3, [r2, #64]	; 0x40
 800124a:	4b06      	ldr	r3, [pc, #24]	; (8001264 <HAL_MspInit+0x4c>)
 800124c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001252:	603b      	str	r3, [r7, #0]
 8001254:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001256:	bf00      	nop
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	40023800 	.word	0x40023800

08001268 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b08c      	sub	sp, #48	; 0x30
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001270:	2300      	movs	r3, #0
 8001272:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001274:	2300      	movs	r3, #0
 8001276:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001278:	2300      	movs	r3, #0
 800127a:	60bb      	str	r3, [r7, #8]
 800127c:	4b2e      	ldr	r3, [pc, #184]	; (8001338 <HAL_InitTick+0xd0>)
 800127e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001280:	4a2d      	ldr	r2, [pc, #180]	; (8001338 <HAL_InitTick+0xd0>)
 8001282:	f043 0301 	orr.w	r3, r3, #1
 8001286:	6453      	str	r3, [r2, #68]	; 0x44
 8001288:	4b2b      	ldr	r3, [pc, #172]	; (8001338 <HAL_InitTick+0xd0>)
 800128a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128c:	f003 0301 	and.w	r3, r3, #1
 8001290:	60bb      	str	r3, [r7, #8]
 8001292:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001294:	f107 020c 	add.w	r2, r7, #12
 8001298:	f107 0310 	add.w	r3, r7, #16
 800129c:	4611      	mov	r1, r2
 800129e:	4618      	mov	r0, r3
 80012a0:	f002 fc80 	bl	8003ba4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80012a4:	f002 fc6a 	bl	8003b7c <HAL_RCC_GetPCLK2Freq>
 80012a8:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80012aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012ac:	4a23      	ldr	r2, [pc, #140]	; (800133c <HAL_InitTick+0xd4>)
 80012ae:	fba2 2303 	umull	r2, r3, r2, r3
 80012b2:	0c9b      	lsrs	r3, r3, #18
 80012b4:	3b01      	subs	r3, #1
 80012b6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80012b8:	4b21      	ldr	r3, [pc, #132]	; (8001340 <HAL_InitTick+0xd8>)
 80012ba:	4a22      	ldr	r2, [pc, #136]	; (8001344 <HAL_InitTick+0xdc>)
 80012bc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80012be:	4b20      	ldr	r3, [pc, #128]	; (8001340 <HAL_InitTick+0xd8>)
 80012c0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012c4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80012c6:	4a1e      	ldr	r2, [pc, #120]	; (8001340 <HAL_InitTick+0xd8>)
 80012c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ca:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80012cc:	4b1c      	ldr	r3, [pc, #112]	; (8001340 <HAL_InitTick+0xd8>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012d2:	4b1b      	ldr	r3, [pc, #108]	; (8001340 <HAL_InitTick+0xd8>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012d8:	4b19      	ldr	r3, [pc, #100]	; (8001340 <HAL_InitTick+0xd8>)
 80012da:	2200      	movs	r2, #0
 80012dc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80012de:	4818      	ldr	r0, [pc, #96]	; (8001340 <HAL_InitTick+0xd8>)
 80012e0:	f002 ff30 	bl	8004144 <HAL_TIM_Base_Init>
 80012e4:	4603      	mov	r3, r0
 80012e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80012ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d11b      	bne.n	800132a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80012f2:	4813      	ldr	r0, [pc, #76]	; (8001340 <HAL_InitTick+0xd8>)
 80012f4:	f002 ff80 	bl	80041f8 <HAL_TIM_Base_Start_IT>
 80012f8:	4603      	mov	r3, r0
 80012fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80012fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001302:	2b00      	cmp	r3, #0
 8001304:	d111      	bne.n	800132a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001306:	2019      	movs	r0, #25
 8001308:	f000 fb5c 	bl	80019c4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2b0f      	cmp	r3, #15
 8001310:	d808      	bhi.n	8001324 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001312:	2200      	movs	r2, #0
 8001314:	6879      	ldr	r1, [r7, #4]
 8001316:	2019      	movs	r0, #25
 8001318:	f000 fb38 	bl	800198c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800131c:	4a0a      	ldr	r2, [pc, #40]	; (8001348 <HAL_InitTick+0xe0>)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6013      	str	r3, [r2, #0]
 8001322:	e002      	b.n	800132a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800132a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800132e:	4618      	mov	r0, r3
 8001330:	3730      	adds	r7, #48	; 0x30
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	40023800 	.word	0x40023800
 800133c:	431bde83 	.word	0x431bde83
 8001340:	20000b2c 	.word	0x20000b2c
 8001344:	40010000 	.word	0x40010000
 8001348:	20000004 	.word	0x20000004

0800134c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001350:	e7fe      	b.n	8001350 <NMI_Handler+0x4>

08001352 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001352:	b480      	push	{r7}
 8001354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001356:	e7fe      	b.n	8001356 <HardFault_Handler+0x4>

08001358 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800135c:	e7fe      	b.n	800135c <MemManage_Handler+0x4>

0800135e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800135e:	b480      	push	{r7}
 8001360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001362:	e7fe      	b.n	8001362 <BusFault_Handler+0x4>

08001364 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001368:	e7fe      	b.n	8001368 <UsageFault_Handler+0x4>

0800136a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800136a:	b480      	push	{r7}
 800136c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800136e:	bf00      	nop
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr

08001378 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800137c:	bf00      	nop
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr

08001386 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001386:	b480      	push	{r7}
 8001388:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800138a:	bf00      	nop
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001398:	bf00      	nop
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr

080013a2 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80013a2:	b580      	push	{r7, lr}
 80013a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DECA_IRQ_Pin);
 80013a6:	2001      	movs	r0, #1
 80013a8:	f000 fcd0 	bl	8001d4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80013ac:	bf00      	nop
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80013b4:	4802      	ldr	r0, [pc, #8]	; (80013c0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80013b6:	f002 ff81 	bl	80042bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	20000b2c 	.word	0x20000b2c

080013c4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80013c8:	4802      	ldr	r0, [pc, #8]	; (80013d4 <OTG_FS_IRQHandler+0x10>)
 80013ca:	f000 fe27 	bl	800201c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	20001880 	.word	0x20001880

080013d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
	return 1;
 80013dc:	2301      	movs	r3, #1
}
 80013de:	4618      	mov	r0, r3
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <_kill>:

int _kill(int pid, int sig)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80013f2:	f008 f91d 	bl	8009630 <__errno>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2216      	movs	r2, #22
 80013fa:	601a      	str	r2, [r3, #0]
	return -1;
 80013fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001400:	4618      	mov	r0, r3
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}

08001408 <_exit>:

void _exit (int status)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001410:	f04f 31ff 	mov.w	r1, #4294967295
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f7ff ffe7 	bl	80013e8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800141a:	e7fe      	b.n	800141a <_exit+0x12>

0800141c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b086      	sub	sp, #24
 8001420:	af00      	add	r7, sp, #0
 8001422:	60f8      	str	r0, [r7, #12]
 8001424:	60b9      	str	r1, [r7, #8]
 8001426:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001428:	2300      	movs	r3, #0
 800142a:	617b      	str	r3, [r7, #20]
 800142c:	e00a      	b.n	8001444 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800142e:	f3af 8000 	nop.w
 8001432:	4601      	mov	r1, r0
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	1c5a      	adds	r2, r3, #1
 8001438:	60ba      	str	r2, [r7, #8]
 800143a:	b2ca      	uxtb	r2, r1
 800143c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	3301      	adds	r3, #1
 8001442:	617b      	str	r3, [r7, #20]
 8001444:	697a      	ldr	r2, [r7, #20]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	429a      	cmp	r2, r3
 800144a:	dbf0      	blt.n	800142e <_read+0x12>
	}

return len;
 800144c:	687b      	ldr	r3, [r7, #4]
}
 800144e:	4618      	mov	r0, r3
 8001450:	3718      	adds	r7, #24
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001456:	b580      	push	{r7, lr}
 8001458:	b086      	sub	sp, #24
 800145a:	af00      	add	r7, sp, #0
 800145c:	60f8      	str	r0, [r7, #12]
 800145e:	60b9      	str	r1, [r7, #8]
 8001460:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001462:	2300      	movs	r3, #0
 8001464:	617b      	str	r3, [r7, #20]
 8001466:	e009      	b.n	800147c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	1c5a      	adds	r2, r3, #1
 800146c:	60ba      	str	r2, [r7, #8]
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	4618      	mov	r0, r3
 8001472:	f007 fb1f 	bl	8008ab4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	3301      	adds	r3, #1
 800147a:	617b      	str	r3, [r7, #20]
 800147c:	697a      	ldr	r2, [r7, #20]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	429a      	cmp	r2, r3
 8001482:	dbf1      	blt.n	8001468 <_write+0x12>
	}
	return len;
 8001484:	687b      	ldr	r3, [r7, #4]
}
 8001486:	4618      	mov	r0, r3
 8001488:	3718      	adds	r7, #24
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <_close>:

int _close(int file)
{
 800148e:	b480      	push	{r7}
 8001490:	b083      	sub	sp, #12
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
	return -1;
 8001496:	f04f 33ff 	mov.w	r3, #4294967295
}
 800149a:	4618      	mov	r0, r3
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr

080014a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014a6:	b480      	push	{r7}
 80014a8:	b083      	sub	sp, #12
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
 80014ae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014b6:	605a      	str	r2, [r3, #4]
	return 0;
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr

080014c6 <_isatty>:

int _isatty(int file)
{
 80014c6:	b480      	push	{r7}
 80014c8:	b083      	sub	sp, #12
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	6078      	str	r0, [r7, #4]
	return 1;
 80014ce:	2301      	movs	r3, #1
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014dc:	b480      	push	{r7}
 80014de:	b085      	sub	sp, #20
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	60f8      	str	r0, [r7, #12]
 80014e4:	60b9      	str	r1, [r7, #8]
 80014e6:	607a      	str	r2, [r7, #4]
	return 0;
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3714      	adds	r7, #20
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
	...

080014f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001500:	4a14      	ldr	r2, [pc, #80]	; (8001554 <_sbrk+0x5c>)
 8001502:	4b15      	ldr	r3, [pc, #84]	; (8001558 <_sbrk+0x60>)
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800150c:	4b13      	ldr	r3, [pc, #76]	; (800155c <_sbrk+0x64>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d102      	bne.n	800151a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001514:	4b11      	ldr	r3, [pc, #68]	; (800155c <_sbrk+0x64>)
 8001516:	4a12      	ldr	r2, [pc, #72]	; (8001560 <_sbrk+0x68>)
 8001518:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800151a:	4b10      	ldr	r3, [pc, #64]	; (800155c <_sbrk+0x64>)
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4413      	add	r3, r2
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	429a      	cmp	r2, r3
 8001526:	d207      	bcs.n	8001538 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001528:	f008 f882 	bl	8009630 <__errno>
 800152c:	4603      	mov	r3, r0
 800152e:	220c      	movs	r2, #12
 8001530:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001532:	f04f 33ff 	mov.w	r3, #4294967295
 8001536:	e009      	b.n	800154c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001538:	4b08      	ldr	r3, [pc, #32]	; (800155c <_sbrk+0x64>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800153e:	4b07      	ldr	r3, [pc, #28]	; (800155c <_sbrk+0x64>)
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4413      	add	r3, r2
 8001546:	4a05      	ldr	r2, [pc, #20]	; (800155c <_sbrk+0x64>)
 8001548:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800154a:	68fb      	ldr	r3, [r7, #12]
}
 800154c:	4618      	mov	r0, r3
 800154e:	3718      	adds	r7, #24
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	20010000 	.word	0x20010000
 8001558:	00000400 	.word	0x00000400
 800155c:	20000b74 	.word	0x20000b74
 8001560:	20002040 	.word	0x20002040

08001564 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001568:	4b06      	ldr	r3, [pc, #24]	; (8001584 <SystemInit+0x20>)
 800156a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800156e:	4a05      	ldr	r2, [pc, #20]	; (8001584 <SystemInit+0x20>)
 8001570:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001574:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001578:	bf00      	nop
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	e000ed00 	.word	0xe000ed00

08001588 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800158c:	4b11      	ldr	r3, [pc, #68]	; (80015d4 <MX_USART1_UART_Init+0x4c>)
 800158e:	4a12      	ldr	r2, [pc, #72]	; (80015d8 <MX_USART1_UART_Init+0x50>)
 8001590:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001592:	4b10      	ldr	r3, [pc, #64]	; (80015d4 <MX_USART1_UART_Init+0x4c>)
 8001594:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001598:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800159a:	4b0e      	ldr	r3, [pc, #56]	; (80015d4 <MX_USART1_UART_Init+0x4c>)
 800159c:	2200      	movs	r2, #0
 800159e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015a0:	4b0c      	ldr	r3, [pc, #48]	; (80015d4 <MX_USART1_UART_Init+0x4c>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015a6:	4b0b      	ldr	r3, [pc, #44]	; (80015d4 <MX_USART1_UART_Init+0x4c>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015ac:	4b09      	ldr	r3, [pc, #36]	; (80015d4 <MX_USART1_UART_Init+0x4c>)
 80015ae:	220c      	movs	r2, #12
 80015b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015b2:	4b08      	ldr	r3, [pc, #32]	; (80015d4 <MX_USART1_UART_Init+0x4c>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015b8:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <MX_USART1_UART_Init+0x4c>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015be:	4805      	ldr	r0, [pc, #20]	; (80015d4 <MX_USART1_UART_Init+0x4c>)
 80015c0:	f003 f840 	bl	8004644 <HAL_UART_Init>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80015ca:	f7ff fda1 	bl	8001110 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	20000b78 	.word	0x20000b78
 80015d8:	40011000 	.word	0x40011000

080015dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b08a      	sub	sp, #40	; 0x28
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e4:	f107 0314 	add.w	r3, r7, #20
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	609a      	str	r2, [r3, #8]
 80015f0:	60da      	str	r2, [r3, #12]
 80015f2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a19      	ldr	r2, [pc, #100]	; (8001660 <HAL_UART_MspInit+0x84>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d12c      	bne.n	8001658 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	613b      	str	r3, [r7, #16]
 8001602:	4b18      	ldr	r3, [pc, #96]	; (8001664 <HAL_UART_MspInit+0x88>)
 8001604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001606:	4a17      	ldr	r2, [pc, #92]	; (8001664 <HAL_UART_MspInit+0x88>)
 8001608:	f043 0310 	orr.w	r3, r3, #16
 800160c:	6453      	str	r3, [r2, #68]	; 0x44
 800160e:	4b15      	ldr	r3, [pc, #84]	; (8001664 <HAL_UART_MspInit+0x88>)
 8001610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001612:	f003 0310 	and.w	r3, r3, #16
 8001616:	613b      	str	r3, [r7, #16]
 8001618:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	60fb      	str	r3, [r7, #12]
 800161e:	4b11      	ldr	r3, [pc, #68]	; (8001664 <HAL_UART_MspInit+0x88>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	4a10      	ldr	r2, [pc, #64]	; (8001664 <HAL_UART_MspInit+0x88>)
 8001624:	f043 0301 	orr.w	r3, r3, #1
 8001628:	6313      	str	r3, [r2, #48]	; 0x30
 800162a:	4b0e      	ldr	r3, [pc, #56]	; (8001664 <HAL_UART_MspInit+0x88>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	f003 0301 	and.w	r3, r3, #1
 8001632:	60fb      	str	r3, [r7, #12]
 8001634:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001636:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800163a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163c:	2302      	movs	r3, #2
 800163e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	2300      	movs	r3, #0
 8001642:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001644:	2303      	movs	r3, #3
 8001646:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001648:	2307      	movs	r3, #7
 800164a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800164c:	f107 0314 	add.w	r3, r7, #20
 8001650:	4619      	mov	r1, r3
 8001652:	4805      	ldr	r0, [pc, #20]	; (8001668 <HAL_UART_MspInit+0x8c>)
 8001654:	f000 f9c4 	bl	80019e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001658:	bf00      	nop
 800165a:	3728      	adds	r7, #40	; 0x28
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	40011000 	.word	0x40011000
 8001664:	40023800 	.word	0x40023800
 8001668:	40020000 	.word	0x40020000

0800166c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800166c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016a4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001670:	480d      	ldr	r0, [pc, #52]	; (80016a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001672:	490e      	ldr	r1, [pc, #56]	; (80016ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001674:	4a0e      	ldr	r2, [pc, #56]	; (80016b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001676:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001678:	e002      	b.n	8001680 <LoopCopyDataInit>

0800167a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800167a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800167c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800167e:	3304      	adds	r3, #4

08001680 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001680:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001682:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001684:	d3f9      	bcc.n	800167a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001686:	4a0b      	ldr	r2, [pc, #44]	; (80016b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001688:	4c0b      	ldr	r4, [pc, #44]	; (80016b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800168a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800168c:	e001      	b.n	8001692 <LoopFillZerobss>

0800168e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800168e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001690:	3204      	adds	r2, #4

08001692 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001692:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001694:	d3fb      	bcc.n	800168e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001696:	f7ff ff65 	bl	8001564 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800169a:	f007 ffe1 	bl	8009660 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800169e:	f7ff fc9b 	bl	8000fd8 <main>
  bx  lr    
 80016a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016a4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80016a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016ac:	20000ab8 	.word	0x20000ab8
  ldr r2, =_sidata
 80016b0:	0800e570 	.word	0x0800e570
  ldr r2, =_sbss
 80016b4:	20000ab8 	.word	0x20000ab8
  ldr r4, =_ebss
 80016b8:	20002040 	.word	0x20002040

080016bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016bc:	e7fe      	b.n	80016bc <ADC_IRQHandler>
	...

080016c0 <read_dev_id>:

/**
 * Application entry point.
 */
int read_dev_id(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
    int err = 0;
 80016c6:	2300      	movs	r3, #0
 80016c8:	607b      	str	r3, [r7, #4]
    uint32_t dev_id;
    /* Display application name on LCD. */
    usb_printf(APP_NAME);
 80016ca:	480c      	ldr	r0, [pc, #48]	; (80016fc <read_dev_id+0x3c>)
 80016cc:	f007 fa04 	bl	8008ad8 <usb_printf>

    /* Configure SPI rate, DW3000 supports up to 36 MHz */
    port_set_dw_ic_spi_fastrate();
 80016d0:	f007 f988 	bl	80089e4 <port_set_dw_ic_spi_fastrate>

    /* Reset DW IC */
    reset_DWIC(); /* Target specific drive of RSTn line into DW IC low for a period. */
 80016d4:	f007 f94c 	bl	8008970 <reset_DWIC>

    Sleep(2); // Time needed for DW3000 to start up (transition from INIT_RC to IDLE_RC, or could wait for SPIRDY event)
 80016d8:	2002      	movs	r0, #2
 80016da:	f007 f91d 	bl	8008918 <Sleep>

    /* Probe for the correct device driver. */
    dwt_probe((struct dwt_probe_s *)&dw3000_probe_interf);
 80016de:	4808      	ldr	r0, [pc, #32]	; (8001700 <read_dev_id+0x40>)
 80016e0:	f007 ff2a 	bl	8009538 <dwt_probe>

    dev_id = dwt_readdevid();
 80016e4:	f007 ff74 	bl	80095d0 <dwt_readdevid>
 80016e8:	6038      	str	r0, [r7, #0]

    usb_printf("%d",dev_id);
 80016ea:	6839      	ldr	r1, [r7, #0]
 80016ec:	4805      	ldr	r0, [pc, #20]	; (8001704 <read_dev_id+0x44>)
 80016ee:	f007 f9f3 	bl	8008ad8 <usb_printf>
//    else
//    {
//        usb_printf("DEV ID FAILED");
//    }

    return err;
 80016f2:	687b      	ldr	r3, [r7, #4]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	0800e0f0 	.word	0x0800e0f0
 8001700:	0800e178 	.word	0x0800e178
 8001704:	0800e104 	.word	0x0800e104

08001708 <build_examples>:
#include <example_selection.h>

example_ptr example_pointer;

void build_examples(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
    unsigned char test_cnt = 0;
 800170e:	2300      	movs	r3, #0
 8001710:	71fb      	strb	r3, [r7, #7]

#ifdef TEST_READING_DEV_ID
    extern int read_dev_id(void);

    example_pointer = read_dev_id;
 8001712:	4b0a      	ldr	r3, [pc, #40]	; (800173c <build_examples+0x34>)
 8001714:	4a0a      	ldr	r2, [pc, #40]	; (8001740 <build_examples+0x38>)
 8001716:	601a      	str	r2, [r3, #0]
    test_cnt++;
 8001718:	79fb      	ldrb	r3, [r7, #7]
 800171a:	3301      	adds	r3, #1
 800171c:	71fb      	strb	r3, [r7, #7]

    example_pointer = simple_aes;
    test_cnt++;
#endif
    // Check that only 1 test was enabled in test_selection.h file
    assert(test_cnt == 1);
 800171e:	79fb      	ldrb	r3, [r7, #7]
 8001720:	2b01      	cmp	r3, #1
 8001722:	d006      	beq.n	8001732 <build_examples+0x2a>
 8001724:	4b07      	ldr	r3, [pc, #28]	; (8001744 <build_examples+0x3c>)
 8001726:	4a08      	ldr	r2, [pc, #32]	; (8001748 <build_examples+0x40>)
 8001728:	f240 118d 	movw	r1, #397	; 0x18d
 800172c:	4807      	ldr	r0, [pc, #28]	; (800174c <build_examples+0x44>)
 800172e:	f007 ff61 	bl	80095f4 <__assert_func>
}
 8001732:	bf00      	nop
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	20000bbc 	.word	0x20000bbc
 8001740:	080016c1 	.word	0x080016c1
 8001744:	0800e108 	.word	0x0800e108
 8001748:	0800e154 	.word	0x0800e154
 800174c:	0800e118 	.word	0x0800e118

08001750 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001754:	4b0e      	ldr	r3, [pc, #56]	; (8001790 <HAL_Init+0x40>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a0d      	ldr	r2, [pc, #52]	; (8001790 <HAL_Init+0x40>)
 800175a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800175e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001760:	4b0b      	ldr	r3, [pc, #44]	; (8001790 <HAL_Init+0x40>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a0a      	ldr	r2, [pc, #40]	; (8001790 <HAL_Init+0x40>)
 8001766:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800176a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800176c:	4b08      	ldr	r3, [pc, #32]	; (8001790 <HAL_Init+0x40>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a07      	ldr	r2, [pc, #28]	; (8001790 <HAL_Init+0x40>)
 8001772:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001776:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001778:	2003      	movs	r0, #3
 800177a:	f000 f8fc 	bl	8001976 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800177e:	200f      	movs	r0, #15
 8001780:	f7ff fd72 	bl	8001268 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001784:	f7ff fd48 	bl	8001218 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001788:	2300      	movs	r3, #0
}
 800178a:	4618      	mov	r0, r3
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40023c00 	.word	0x40023c00

08001794 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001798:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <HAL_IncTick+0x20>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	461a      	mov	r2, r3
 800179e:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <HAL_IncTick+0x24>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4413      	add	r3, r2
 80017a4:	4a04      	ldr	r2, [pc, #16]	; (80017b8 <HAL_IncTick+0x24>)
 80017a6:	6013      	str	r3, [r2, #0]
}
 80017a8:	bf00      	nop
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	20000008 	.word	0x20000008
 80017b8:	20000bc0 	.word	0x20000bc0

080017bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  return uwTick;
 80017c0:	4b03      	ldr	r3, [pc, #12]	; (80017d0 <HAL_GetTick+0x14>)
 80017c2:	681b      	ldr	r3, [r3, #0]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	20000bc0 	.word	0x20000bc0

080017d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017dc:	f7ff ffee 	bl	80017bc <HAL_GetTick>
 80017e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017ec:	d005      	beq.n	80017fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017ee:	4b0a      	ldr	r3, [pc, #40]	; (8001818 <HAL_Delay+0x44>)
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	461a      	mov	r2, r3
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	4413      	add	r3, r2
 80017f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017fa:	bf00      	nop
 80017fc:	f7ff ffde 	bl	80017bc <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	68fa      	ldr	r2, [r7, #12]
 8001808:	429a      	cmp	r2, r3
 800180a:	d8f7      	bhi.n	80017fc <HAL_Delay+0x28>
  {
  }
}
 800180c:	bf00      	nop
 800180e:	bf00      	nop
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	20000008 	.word	0x20000008

0800181c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f003 0307 	and.w	r3, r3, #7
 800182a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800182c:	4b0c      	ldr	r3, [pc, #48]	; (8001860 <__NVIC_SetPriorityGrouping+0x44>)
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001832:	68ba      	ldr	r2, [r7, #8]
 8001834:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001838:	4013      	ands	r3, r2
 800183a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001844:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001848:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800184c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800184e:	4a04      	ldr	r2, [pc, #16]	; (8001860 <__NVIC_SetPriorityGrouping+0x44>)
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	60d3      	str	r3, [r2, #12]
}
 8001854:	bf00      	nop
 8001856:	3714      	adds	r7, #20
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr
 8001860:	e000ed00 	.word	0xe000ed00

08001864 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001868:	4b04      	ldr	r3, [pc, #16]	; (800187c <__NVIC_GetPriorityGrouping+0x18>)
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	0a1b      	lsrs	r3, r3, #8
 800186e:	f003 0307 	and.w	r3, r3, #7
}
 8001872:	4618      	mov	r0, r3
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	e000ed00 	.word	0xe000ed00

08001880 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	4603      	mov	r3, r0
 8001888:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800188a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188e:	2b00      	cmp	r3, #0
 8001890:	db0b      	blt.n	80018aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001892:	79fb      	ldrb	r3, [r7, #7]
 8001894:	f003 021f 	and.w	r2, r3, #31
 8001898:	4907      	ldr	r1, [pc, #28]	; (80018b8 <__NVIC_EnableIRQ+0x38>)
 800189a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189e:	095b      	lsrs	r3, r3, #5
 80018a0:	2001      	movs	r0, #1
 80018a2:	fa00 f202 	lsl.w	r2, r0, r2
 80018a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018aa:	bf00      	nop
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	e000e100 	.word	0xe000e100

080018bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4603      	mov	r3, r0
 80018c4:	6039      	str	r1, [r7, #0]
 80018c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	db0a      	blt.n	80018e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	b2da      	uxtb	r2, r3
 80018d4:	490c      	ldr	r1, [pc, #48]	; (8001908 <__NVIC_SetPriority+0x4c>)
 80018d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018da:	0112      	lsls	r2, r2, #4
 80018dc:	b2d2      	uxtb	r2, r2
 80018de:	440b      	add	r3, r1
 80018e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018e4:	e00a      	b.n	80018fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	b2da      	uxtb	r2, r3
 80018ea:	4908      	ldr	r1, [pc, #32]	; (800190c <__NVIC_SetPriority+0x50>)
 80018ec:	79fb      	ldrb	r3, [r7, #7]
 80018ee:	f003 030f 	and.w	r3, r3, #15
 80018f2:	3b04      	subs	r3, #4
 80018f4:	0112      	lsls	r2, r2, #4
 80018f6:	b2d2      	uxtb	r2, r2
 80018f8:	440b      	add	r3, r1
 80018fa:	761a      	strb	r2, [r3, #24]
}
 80018fc:	bf00      	nop
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr
 8001908:	e000e100 	.word	0xe000e100
 800190c:	e000ed00 	.word	0xe000ed00

08001910 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001910:	b480      	push	{r7}
 8001912:	b089      	sub	sp, #36	; 0x24
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	60b9      	str	r1, [r7, #8]
 800191a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f003 0307 	and.w	r3, r3, #7
 8001922:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	f1c3 0307 	rsb	r3, r3, #7
 800192a:	2b04      	cmp	r3, #4
 800192c:	bf28      	it	cs
 800192e:	2304      	movcs	r3, #4
 8001930:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	3304      	adds	r3, #4
 8001936:	2b06      	cmp	r3, #6
 8001938:	d902      	bls.n	8001940 <NVIC_EncodePriority+0x30>
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	3b03      	subs	r3, #3
 800193e:	e000      	b.n	8001942 <NVIC_EncodePriority+0x32>
 8001940:	2300      	movs	r3, #0
 8001942:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001944:	f04f 32ff 	mov.w	r2, #4294967295
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	fa02 f303 	lsl.w	r3, r2, r3
 800194e:	43da      	mvns	r2, r3
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	401a      	ands	r2, r3
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001958:	f04f 31ff 	mov.w	r1, #4294967295
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	fa01 f303 	lsl.w	r3, r1, r3
 8001962:	43d9      	mvns	r1, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001968:	4313      	orrs	r3, r2
         );
}
 800196a:	4618      	mov	r0, r3
 800196c:	3724      	adds	r7, #36	; 0x24
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr

08001976 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001976:	b580      	push	{r7, lr}
 8001978:	b082      	sub	sp, #8
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f7ff ff4c 	bl	800181c <__NVIC_SetPriorityGrouping>
}
 8001984:	bf00      	nop
 8001986:	3708      	adds	r7, #8
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}

0800198c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800198c:	b580      	push	{r7, lr}
 800198e:	b086      	sub	sp, #24
 8001990:	af00      	add	r7, sp, #0
 8001992:	4603      	mov	r3, r0
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	607a      	str	r2, [r7, #4]
 8001998:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800199a:	2300      	movs	r3, #0
 800199c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800199e:	f7ff ff61 	bl	8001864 <__NVIC_GetPriorityGrouping>
 80019a2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	68b9      	ldr	r1, [r7, #8]
 80019a8:	6978      	ldr	r0, [r7, #20]
 80019aa:	f7ff ffb1 	bl	8001910 <NVIC_EncodePriority>
 80019ae:	4602      	mov	r2, r0
 80019b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019b4:	4611      	mov	r1, r2
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7ff ff80 	bl	80018bc <__NVIC_SetPriority>
}
 80019bc:	bf00      	nop
 80019be:	3718      	adds	r7, #24
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	4603      	mov	r3, r0
 80019cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7ff ff54 	bl	8001880 <__NVIC_EnableIRQ>
}
 80019d8:	bf00      	nop
 80019da:	3708      	adds	r7, #8
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}

080019e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b089      	sub	sp, #36	; 0x24
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019ea:	2300      	movs	r3, #0
 80019ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019ee:	2300      	movs	r3, #0
 80019f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019f2:	2300      	movs	r3, #0
 80019f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019f6:	2300      	movs	r3, #0
 80019f8:	61fb      	str	r3, [r7, #28]
 80019fa:	e159      	b.n	8001cb0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019fc:	2201      	movs	r2, #1
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	fa02 f303 	lsl.w	r3, r2, r3
 8001a04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	697a      	ldr	r2, [r7, #20]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a10:	693a      	ldr	r2, [r7, #16]
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	f040 8148 	bne.w	8001caa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f003 0303 	and.w	r3, r3, #3
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d005      	beq.n	8001a32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d130      	bne.n	8001a94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	2203      	movs	r2, #3
 8001a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a42:	43db      	mvns	r3, r3
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	4013      	ands	r3, r2
 8001a48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	68da      	ldr	r2, [r3, #12]
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	fa02 f303 	lsl.w	r3, r2, r3
 8001a56:	69ba      	ldr	r2, [r7, #24]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a68:	2201      	movs	r2, #1
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	43db      	mvns	r3, r3
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	4013      	ands	r3, r2
 8001a76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	091b      	lsrs	r3, r3, #4
 8001a7e:	f003 0201 	and.w	r2, r3, #1
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f003 0303 	and.w	r3, r3, #3
 8001a9c:	2b03      	cmp	r3, #3
 8001a9e:	d017      	beq.n	8001ad0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	2203      	movs	r2, #3
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	689a      	ldr	r2, [r3, #8]
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f003 0303 	and.w	r3, r3, #3
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d123      	bne.n	8001b24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	08da      	lsrs	r2, r3, #3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	3208      	adds	r2, #8
 8001ae4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	f003 0307 	and.w	r3, r3, #7
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	220f      	movs	r2, #15
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	43db      	mvns	r3, r3
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	4013      	ands	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	691a      	ldr	r2, [r3, #16]
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	f003 0307 	and.w	r3, r3, #7
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	08da      	lsrs	r2, r3, #3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	3208      	adds	r2, #8
 8001b1e:	69b9      	ldr	r1, [r7, #24]
 8001b20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	2203      	movs	r2, #3
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	43db      	mvns	r3, r3
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f003 0203 	and.w	r2, r3, #3
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	f000 80a2 	beq.w	8001caa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b66:	2300      	movs	r3, #0
 8001b68:	60fb      	str	r3, [r7, #12]
 8001b6a:	4b57      	ldr	r3, [pc, #348]	; (8001cc8 <HAL_GPIO_Init+0x2e8>)
 8001b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b6e:	4a56      	ldr	r2, [pc, #344]	; (8001cc8 <HAL_GPIO_Init+0x2e8>)
 8001b70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b74:	6453      	str	r3, [r2, #68]	; 0x44
 8001b76:	4b54      	ldr	r3, [pc, #336]	; (8001cc8 <HAL_GPIO_Init+0x2e8>)
 8001b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b7e:	60fb      	str	r3, [r7, #12]
 8001b80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b82:	4a52      	ldr	r2, [pc, #328]	; (8001ccc <HAL_GPIO_Init+0x2ec>)
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	089b      	lsrs	r3, r3, #2
 8001b88:	3302      	adds	r3, #2
 8001b8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	f003 0303 	and.w	r3, r3, #3
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	220f      	movs	r2, #15
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	43db      	mvns	r3, r3
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a49      	ldr	r2, [pc, #292]	; (8001cd0 <HAL_GPIO_Init+0x2f0>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d019      	beq.n	8001be2 <HAL_GPIO_Init+0x202>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a48      	ldr	r2, [pc, #288]	; (8001cd4 <HAL_GPIO_Init+0x2f4>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d013      	beq.n	8001bde <HAL_GPIO_Init+0x1fe>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a47      	ldr	r2, [pc, #284]	; (8001cd8 <HAL_GPIO_Init+0x2f8>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d00d      	beq.n	8001bda <HAL_GPIO_Init+0x1fa>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a46      	ldr	r2, [pc, #280]	; (8001cdc <HAL_GPIO_Init+0x2fc>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d007      	beq.n	8001bd6 <HAL_GPIO_Init+0x1f6>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a45      	ldr	r2, [pc, #276]	; (8001ce0 <HAL_GPIO_Init+0x300>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d101      	bne.n	8001bd2 <HAL_GPIO_Init+0x1f2>
 8001bce:	2304      	movs	r3, #4
 8001bd0:	e008      	b.n	8001be4 <HAL_GPIO_Init+0x204>
 8001bd2:	2307      	movs	r3, #7
 8001bd4:	e006      	b.n	8001be4 <HAL_GPIO_Init+0x204>
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e004      	b.n	8001be4 <HAL_GPIO_Init+0x204>
 8001bda:	2302      	movs	r3, #2
 8001bdc:	e002      	b.n	8001be4 <HAL_GPIO_Init+0x204>
 8001bde:	2301      	movs	r3, #1
 8001be0:	e000      	b.n	8001be4 <HAL_GPIO_Init+0x204>
 8001be2:	2300      	movs	r3, #0
 8001be4:	69fa      	ldr	r2, [r7, #28]
 8001be6:	f002 0203 	and.w	r2, r2, #3
 8001bea:	0092      	lsls	r2, r2, #2
 8001bec:	4093      	lsls	r3, r2
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bf4:	4935      	ldr	r1, [pc, #212]	; (8001ccc <HAL_GPIO_Init+0x2ec>)
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	089b      	lsrs	r3, r3, #2
 8001bfa:	3302      	adds	r3, #2
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c02:	4b38      	ldr	r3, [pc, #224]	; (8001ce4 <HAL_GPIO_Init+0x304>)
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	43db      	mvns	r3, r3
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	4013      	ands	r3, r2
 8001c10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d003      	beq.n	8001c26 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c26:	4a2f      	ldr	r2, [pc, #188]	; (8001ce4 <HAL_GPIO_Init+0x304>)
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c2c:	4b2d      	ldr	r3, [pc, #180]	; (8001ce4 <HAL_GPIO_Init+0x304>)
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	43db      	mvns	r3, r3
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d003      	beq.n	8001c50 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c50:	4a24      	ldr	r2, [pc, #144]	; (8001ce4 <HAL_GPIO_Init+0x304>)
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c56:	4b23      	ldr	r3, [pc, #140]	; (8001ce4 <HAL_GPIO_Init+0x304>)
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	43db      	mvns	r3, r3
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	4013      	ands	r3, r2
 8001c64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d003      	beq.n	8001c7a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001c72:	69ba      	ldr	r2, [r7, #24]
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c7a:	4a1a      	ldr	r2, [pc, #104]	; (8001ce4 <HAL_GPIO_Init+0x304>)
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c80:	4b18      	ldr	r3, [pc, #96]	; (8001ce4 <HAL_GPIO_Init+0x304>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	43db      	mvns	r3, r3
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d003      	beq.n	8001ca4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ca4:	4a0f      	ldr	r2, [pc, #60]	; (8001ce4 <HAL_GPIO_Init+0x304>)
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	3301      	adds	r3, #1
 8001cae:	61fb      	str	r3, [r7, #28]
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	2b0f      	cmp	r3, #15
 8001cb4:	f67f aea2 	bls.w	80019fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cb8:	bf00      	nop
 8001cba:	bf00      	nop
 8001cbc:	3724      	adds	r7, #36	; 0x24
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	40023800 	.word	0x40023800
 8001ccc:	40013800 	.word	0x40013800
 8001cd0:	40020000 	.word	0x40020000
 8001cd4:	40020400 	.word	0x40020400
 8001cd8:	40020800 	.word	0x40020800
 8001cdc:	40020c00 	.word	0x40020c00
 8001ce0:	40021000 	.word	0x40021000
 8001ce4:	40013c00 	.word	0x40013c00

08001ce8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	691a      	ldr	r2, [r3, #16]
 8001cf8:	887b      	ldrh	r3, [r7, #2]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d002      	beq.n	8001d06 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d00:	2301      	movs	r3, #1
 8001d02:	73fb      	strb	r3, [r7, #15]
 8001d04:	e001      	b.n	8001d0a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d06:	2300      	movs	r3, #0
 8001d08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3714      	adds	r7, #20
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	460b      	mov	r3, r1
 8001d22:	807b      	strh	r3, [r7, #2]
 8001d24:	4613      	mov	r3, r2
 8001d26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d28:	787b      	ldrb	r3, [r7, #1]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d003      	beq.n	8001d36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d2e:	887a      	ldrh	r2, [r7, #2]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d34:	e003      	b.n	8001d3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d36:	887b      	ldrh	r3, [r7, #2]
 8001d38:	041a      	lsls	r2, r3, #16
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	619a      	str	r2, [r3, #24]
}
 8001d3e:	bf00      	nop
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
	...

08001d4c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	4603      	mov	r3, r0
 8001d54:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001d56:	4b08      	ldr	r3, [pc, #32]	; (8001d78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d58:	695a      	ldr	r2, [r3, #20]
 8001d5a:	88fb      	ldrh	r3, [r7, #6]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d006      	beq.n	8001d70 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d62:	4a05      	ldr	r2, [pc, #20]	; (8001d78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d64:	88fb      	ldrh	r3, [r7, #6]
 8001d66:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d68:	88fb      	ldrh	r3, [r7, #6]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f006 fe4a 	bl	8008a04 <HAL_GPIO_EXTI_Callback>
  }
}
 8001d70:	bf00      	nop
 8001d72:	3708      	adds	r7, #8
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	40013c00 	.word	0x40013c00

08001d7c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d7e:	b08f      	sub	sp, #60	; 0x3c
 8001d80:	af0a      	add	r7, sp, #40	; 0x28
 8001d82:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d101      	bne.n	8001d8e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e10f      	b.n	8001fae <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d106      	bne.n	8001dae <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f007 f8bb 	bl	8008f24 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2203      	movs	r2, #3
 8001db2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d102      	bne.n	8001dc8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f003 f910 	bl	8004ff2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	603b      	str	r3, [r7, #0]
 8001dd8:	687e      	ldr	r6, [r7, #4]
 8001dda:	466d      	mov	r5, sp
 8001ddc:	f106 0410 	add.w	r4, r6, #16
 8001de0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001de2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001de4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001de6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001de8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001dec:	e885 0003 	stmia.w	r5, {r0, r1}
 8001df0:	1d33      	adds	r3, r6, #4
 8001df2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001df4:	6838      	ldr	r0, [r7, #0]
 8001df6:	f002 ffe7 	bl	8004dc8 <USB_CoreInit>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d005      	beq.n	8001e0c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2202      	movs	r2, #2
 8001e04:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e0d0      	b.n	8001fae <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2100      	movs	r1, #0
 8001e12:	4618      	mov	r0, r3
 8001e14:	f003 f8fe 	bl	8005014 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e18:	2300      	movs	r3, #0
 8001e1a:	73fb      	strb	r3, [r7, #15]
 8001e1c:	e04a      	b.n	8001eb4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e1e:	7bfa      	ldrb	r2, [r7, #15]
 8001e20:	6879      	ldr	r1, [r7, #4]
 8001e22:	4613      	mov	r3, r2
 8001e24:	00db      	lsls	r3, r3, #3
 8001e26:	4413      	add	r3, r2
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	440b      	add	r3, r1
 8001e2c:	333d      	adds	r3, #61	; 0x3d
 8001e2e:	2201      	movs	r2, #1
 8001e30:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e32:	7bfa      	ldrb	r2, [r7, #15]
 8001e34:	6879      	ldr	r1, [r7, #4]
 8001e36:	4613      	mov	r3, r2
 8001e38:	00db      	lsls	r3, r3, #3
 8001e3a:	4413      	add	r3, r2
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	440b      	add	r3, r1
 8001e40:	333c      	adds	r3, #60	; 0x3c
 8001e42:	7bfa      	ldrb	r2, [r7, #15]
 8001e44:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001e46:	7bfa      	ldrb	r2, [r7, #15]
 8001e48:	7bfb      	ldrb	r3, [r7, #15]
 8001e4a:	b298      	uxth	r0, r3
 8001e4c:	6879      	ldr	r1, [r7, #4]
 8001e4e:	4613      	mov	r3, r2
 8001e50:	00db      	lsls	r3, r3, #3
 8001e52:	4413      	add	r3, r2
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	440b      	add	r3, r1
 8001e58:	3344      	adds	r3, #68	; 0x44
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e5e:	7bfa      	ldrb	r2, [r7, #15]
 8001e60:	6879      	ldr	r1, [r7, #4]
 8001e62:	4613      	mov	r3, r2
 8001e64:	00db      	lsls	r3, r3, #3
 8001e66:	4413      	add	r3, r2
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	440b      	add	r3, r1
 8001e6c:	3340      	adds	r3, #64	; 0x40
 8001e6e:	2200      	movs	r2, #0
 8001e70:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001e72:	7bfa      	ldrb	r2, [r7, #15]
 8001e74:	6879      	ldr	r1, [r7, #4]
 8001e76:	4613      	mov	r3, r2
 8001e78:	00db      	lsls	r3, r3, #3
 8001e7a:	4413      	add	r3, r2
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	440b      	add	r3, r1
 8001e80:	3348      	adds	r3, #72	; 0x48
 8001e82:	2200      	movs	r2, #0
 8001e84:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001e86:	7bfa      	ldrb	r2, [r7, #15]
 8001e88:	6879      	ldr	r1, [r7, #4]
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	00db      	lsls	r3, r3, #3
 8001e8e:	4413      	add	r3, r2
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	440b      	add	r3, r1
 8001e94:	334c      	adds	r3, #76	; 0x4c
 8001e96:	2200      	movs	r2, #0
 8001e98:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001e9a:	7bfa      	ldrb	r2, [r7, #15]
 8001e9c:	6879      	ldr	r1, [r7, #4]
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	00db      	lsls	r3, r3, #3
 8001ea2:	4413      	add	r3, r2
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	440b      	add	r3, r1
 8001ea8:	3354      	adds	r3, #84	; 0x54
 8001eaa:	2200      	movs	r2, #0
 8001eac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001eae:	7bfb      	ldrb	r3, [r7, #15]
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	73fb      	strb	r3, [r7, #15]
 8001eb4:	7bfa      	ldrb	r2, [r7, #15]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d3af      	bcc.n	8001e1e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	73fb      	strb	r3, [r7, #15]
 8001ec2:	e044      	b.n	8001f4e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001ec4:	7bfa      	ldrb	r2, [r7, #15]
 8001ec6:	6879      	ldr	r1, [r7, #4]
 8001ec8:	4613      	mov	r3, r2
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	4413      	add	r3, r2
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	440b      	add	r3, r1
 8001ed2:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001eda:	7bfa      	ldrb	r2, [r7, #15]
 8001edc:	6879      	ldr	r1, [r7, #4]
 8001ede:	4613      	mov	r3, r2
 8001ee0:	00db      	lsls	r3, r3, #3
 8001ee2:	4413      	add	r3, r2
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	440b      	add	r3, r1
 8001ee8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001eec:	7bfa      	ldrb	r2, [r7, #15]
 8001eee:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001ef0:	7bfa      	ldrb	r2, [r7, #15]
 8001ef2:	6879      	ldr	r1, [r7, #4]
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	00db      	lsls	r3, r3, #3
 8001ef8:	4413      	add	r3, r2
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	440b      	add	r3, r1
 8001efe:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001f02:	2200      	movs	r2, #0
 8001f04:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f06:	7bfa      	ldrb	r2, [r7, #15]
 8001f08:	6879      	ldr	r1, [r7, #4]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	00db      	lsls	r3, r3, #3
 8001f0e:	4413      	add	r3, r2
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	440b      	add	r3, r1
 8001f14:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001f18:	2200      	movs	r2, #0
 8001f1a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f1c:	7bfa      	ldrb	r2, [r7, #15]
 8001f1e:	6879      	ldr	r1, [r7, #4]
 8001f20:	4613      	mov	r3, r2
 8001f22:	00db      	lsls	r3, r3, #3
 8001f24:	4413      	add	r3, r2
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	440b      	add	r3, r1
 8001f2a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001f2e:	2200      	movs	r2, #0
 8001f30:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f32:	7bfa      	ldrb	r2, [r7, #15]
 8001f34:	6879      	ldr	r1, [r7, #4]
 8001f36:	4613      	mov	r3, r2
 8001f38:	00db      	lsls	r3, r3, #3
 8001f3a:	4413      	add	r3, r2
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	440b      	add	r3, r1
 8001f40:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f48:	7bfb      	ldrb	r3, [r7, #15]
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	73fb      	strb	r3, [r7, #15]
 8001f4e:	7bfa      	ldrb	r2, [r7, #15]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d3b5      	bcc.n	8001ec4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	603b      	str	r3, [r7, #0]
 8001f5e:	687e      	ldr	r6, [r7, #4]
 8001f60:	466d      	mov	r5, sp
 8001f62:	f106 0410 	add.w	r4, r6, #16
 8001f66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f6e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f72:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f76:	1d33      	adds	r3, r6, #4
 8001f78:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f7a:	6838      	ldr	r0, [r7, #0]
 8001f7c:	f003 f896 	bl	80050ac <USB_DevInit>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d005      	beq.n	8001f92 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2202      	movs	r2, #2
 8001f8a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e00d      	b.n	8001fae <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f004 f9e5 	bl	8006376 <USB_DevDisconnect>

  return HAL_OK;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3714      	adds	r7, #20
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001fb6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b084      	sub	sp, #16
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d101      	bne.n	8001fd2 <HAL_PCD_Start+0x1c>
 8001fce:	2302      	movs	r3, #2
 8001fd0:	e020      	b.n	8002014 <HAL_PCD_Start+0x5e>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d109      	bne.n	8001ff6 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d005      	beq.n	8001ff6 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f002 ffe8 	bl	8004fd0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4618      	mov	r0, r3
 8002006:	f004 f995 	bl	8006334 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002012:	2300      	movs	r3, #0
}
 8002014:	4618      	mov	r0, r3
 8002016:	3710      	adds	r7, #16
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}

0800201c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800201c:	b590      	push	{r4, r7, lr}
 800201e:	b08d      	sub	sp, #52	; 0x34
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800202a:	6a3b      	ldr	r3, [r7, #32]
 800202c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4618      	mov	r0, r3
 8002034:	f004 fa53 	bl	80064de <USB_GetMode>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	f040 848a 	bne.w	8002954 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4618      	mov	r0, r3
 8002046:	f004 f9b7 	bl	80063b8 <USB_ReadInterrupts>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	f000 8480 	beq.w	8002952 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	0a1b      	lsrs	r3, r3, #8
 800205c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4618      	mov	r0, r3
 800206c:	f004 f9a4 	bl	80063b8 <USB_ReadInterrupts>
 8002070:	4603      	mov	r3, r0
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	2b02      	cmp	r3, #2
 8002078:	d107      	bne.n	800208a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	695a      	ldr	r2, [r3, #20]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f002 0202 	and.w	r2, r2, #2
 8002088:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4618      	mov	r0, r3
 8002090:	f004 f992 	bl	80063b8 <USB_ReadInterrupts>
 8002094:	4603      	mov	r3, r0
 8002096:	f003 0310 	and.w	r3, r3, #16
 800209a:	2b10      	cmp	r3, #16
 800209c:	d161      	bne.n	8002162 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	699a      	ldr	r2, [r3, #24]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f022 0210 	bic.w	r2, r2, #16
 80020ac:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80020ae:	6a3b      	ldr	r3, [r7, #32]
 80020b0:	6a1b      	ldr	r3, [r3, #32]
 80020b2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	f003 020f 	and.w	r2, r3, #15
 80020ba:	4613      	mov	r3, r2
 80020bc:	00db      	lsls	r3, r3, #3
 80020be:	4413      	add	r3, r2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	4413      	add	r3, r2
 80020ca:	3304      	adds	r3, #4
 80020cc:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	0c5b      	lsrs	r3, r3, #17
 80020d2:	f003 030f 	and.w	r3, r3, #15
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d124      	bne.n	8002124 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80020e0:	4013      	ands	r3, r2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d035      	beq.n	8002152 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	091b      	lsrs	r3, r3, #4
 80020ee:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80020f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	461a      	mov	r2, r3
 80020f8:	6a38      	ldr	r0, [r7, #32]
 80020fa:	f003 ffc9 	bl	8006090 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	691a      	ldr	r2, [r3, #16]
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	091b      	lsrs	r3, r3, #4
 8002106:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800210a:	441a      	add	r2, r3
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	6a1a      	ldr	r2, [r3, #32]
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	091b      	lsrs	r3, r3, #4
 8002118:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800211c:	441a      	add	r2, r3
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	621a      	str	r2, [r3, #32]
 8002122:	e016      	b.n	8002152 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	0c5b      	lsrs	r3, r3, #17
 8002128:	f003 030f 	and.w	r3, r3, #15
 800212c:	2b06      	cmp	r3, #6
 800212e:	d110      	bne.n	8002152 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002136:	2208      	movs	r2, #8
 8002138:	4619      	mov	r1, r3
 800213a:	6a38      	ldr	r0, [r7, #32]
 800213c:	f003 ffa8 	bl	8006090 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	6a1a      	ldr	r2, [r3, #32]
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	091b      	lsrs	r3, r3, #4
 8002148:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800214c:	441a      	add	r2, r3
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	699a      	ldr	r2, [r3, #24]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f042 0210 	orr.w	r2, r2, #16
 8002160:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4618      	mov	r0, r3
 8002168:	f004 f926 	bl	80063b8 <USB_ReadInterrupts>
 800216c:	4603      	mov	r3, r0
 800216e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002172:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002176:	f040 80a7 	bne.w	80022c8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800217a:	2300      	movs	r3, #0
 800217c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4618      	mov	r0, r3
 8002184:	f004 f92b 	bl	80063de <USB_ReadDevAllOutEpInterrupt>
 8002188:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800218a:	e099      	b.n	80022c0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800218c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	2b00      	cmp	r3, #0
 8002194:	f000 808e 	beq.w	80022b4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800219e:	b2d2      	uxtb	r2, r2
 80021a0:	4611      	mov	r1, r2
 80021a2:	4618      	mov	r0, r3
 80021a4:	f004 f94f 	bl	8006446 <USB_ReadDevOutEPInterrupt>
 80021a8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	f003 0301 	and.w	r3, r3, #1
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d00c      	beq.n	80021ce <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80021b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b6:	015a      	lsls	r2, r3, #5
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	4413      	add	r3, r2
 80021bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021c0:	461a      	mov	r2, r3
 80021c2:	2301      	movs	r3, #1
 80021c4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80021c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f000 fec3 	bl	8002f54 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	f003 0308 	and.w	r3, r3, #8
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d00c      	beq.n	80021f2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80021d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021da:	015a      	lsls	r2, r3, #5
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	4413      	add	r3, r2
 80021e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021e4:	461a      	mov	r2, r3
 80021e6:	2308      	movs	r3, #8
 80021e8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80021ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f000 ff99 	bl	8003124 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	f003 0310 	and.w	r3, r3, #16
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d008      	beq.n	800220e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80021fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fe:	015a      	lsls	r2, r3, #5
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	4413      	add	r3, r2
 8002204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002208:	461a      	mov	r2, r3
 800220a:	2310      	movs	r3, #16
 800220c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	f003 0302 	and.w	r3, r3, #2
 8002214:	2b00      	cmp	r3, #0
 8002216:	d030      	beq.n	800227a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002218:	6a3b      	ldr	r3, [r7, #32]
 800221a:	695b      	ldr	r3, [r3, #20]
 800221c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002220:	2b80      	cmp	r3, #128	; 0x80
 8002222:	d109      	bne.n	8002238 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	69fa      	ldr	r2, [r7, #28]
 800222e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002232:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002236:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800223a:	4613      	mov	r3, r2
 800223c:	00db      	lsls	r3, r3, #3
 800223e:	4413      	add	r3, r2
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	4413      	add	r3, r2
 800224a:	3304      	adds	r3, #4
 800224c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	78db      	ldrb	r3, [r3, #3]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d108      	bne.n	8002268 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	2200      	movs	r2, #0
 800225a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800225c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225e:	b2db      	uxtb	r3, r3
 8002260:	4619      	mov	r1, r3
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f006 ff5a 	bl	800911c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226a:	015a      	lsls	r2, r3, #5
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	4413      	add	r3, r2
 8002270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002274:	461a      	mov	r2, r3
 8002276:	2302      	movs	r3, #2
 8002278:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	f003 0320 	and.w	r3, r3, #32
 8002280:	2b00      	cmp	r3, #0
 8002282:	d008      	beq.n	8002296 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002286:	015a      	lsls	r2, r3, #5
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	4413      	add	r3, r2
 800228c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002290:	461a      	mov	r2, r3
 8002292:	2320      	movs	r3, #32
 8002294:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d009      	beq.n	80022b4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80022a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a2:	015a      	lsls	r2, r3, #5
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	4413      	add	r3, r2
 80022a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022ac:	461a      	mov	r2, r3
 80022ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022b2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80022b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b6:	3301      	adds	r3, #1
 80022b8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80022ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022bc:	085b      	lsrs	r3, r3, #1
 80022be:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80022c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	f47f af62 	bne.w	800218c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f004 f873 	bl	80063b8 <USB_ReadInterrupts>
 80022d2:	4603      	mov	r3, r0
 80022d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022d8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80022dc:	f040 80db 	bne.w	8002496 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4618      	mov	r0, r3
 80022e6:	f004 f894 	bl	8006412 <USB_ReadDevAllInEpInterrupt>
 80022ea:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80022ec:	2300      	movs	r3, #0
 80022ee:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80022f0:	e0cd      	b.n	800248e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80022f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022f4:	f003 0301 	and.w	r3, r3, #1
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	f000 80c2 	beq.w	8002482 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002304:	b2d2      	uxtb	r2, r2
 8002306:	4611      	mov	r1, r2
 8002308:	4618      	mov	r0, r3
 800230a:	f004 f8ba 	bl	8006482 <USB_ReadDevInEPInterrupt>
 800230e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	f003 0301 	and.w	r3, r3, #1
 8002316:	2b00      	cmp	r3, #0
 8002318:	d057      	beq.n	80023ca <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800231a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231c:	f003 030f 	and.w	r3, r3, #15
 8002320:	2201      	movs	r2, #1
 8002322:	fa02 f303 	lsl.w	r3, r2, r3
 8002326:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800232e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	43db      	mvns	r3, r3
 8002334:	69f9      	ldr	r1, [r7, #28]
 8002336:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800233a:	4013      	ands	r3, r2
 800233c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800233e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002340:	015a      	lsls	r2, r3, #5
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	4413      	add	r3, r2
 8002346:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800234a:	461a      	mov	r2, r3
 800234c:	2301      	movs	r3, #1
 800234e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	691b      	ldr	r3, [r3, #16]
 8002354:	2b01      	cmp	r3, #1
 8002356:	d132      	bne.n	80023be <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002358:	6879      	ldr	r1, [r7, #4]
 800235a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800235c:	4613      	mov	r3, r2
 800235e:	00db      	lsls	r3, r3, #3
 8002360:	4413      	add	r3, r2
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	440b      	add	r3, r1
 8002366:	334c      	adds	r3, #76	; 0x4c
 8002368:	6819      	ldr	r1, [r3, #0]
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800236e:	4613      	mov	r3, r2
 8002370:	00db      	lsls	r3, r3, #3
 8002372:	4413      	add	r3, r2
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	4403      	add	r3, r0
 8002378:	3348      	adds	r3, #72	; 0x48
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4419      	add	r1, r3
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002382:	4613      	mov	r3, r2
 8002384:	00db      	lsls	r3, r3, #3
 8002386:	4413      	add	r3, r2
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	4403      	add	r3, r0
 800238c:	334c      	adds	r3, #76	; 0x4c
 800238e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002392:	2b00      	cmp	r3, #0
 8002394:	d113      	bne.n	80023be <HAL_PCD_IRQHandler+0x3a2>
 8002396:	6879      	ldr	r1, [r7, #4]
 8002398:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800239a:	4613      	mov	r3, r2
 800239c:	00db      	lsls	r3, r3, #3
 800239e:	4413      	add	r3, r2
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	440b      	add	r3, r1
 80023a4:	3354      	adds	r3, #84	; 0x54
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d108      	bne.n	80023be <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6818      	ldr	r0, [r3, #0]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80023b6:	461a      	mov	r2, r3
 80023b8:	2101      	movs	r1, #1
 80023ba:	f004 f8c1 	bl	8006540 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80023be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	4619      	mov	r1, r3
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f006 fe2e 	bl	8009026 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	f003 0308 	and.w	r3, r3, #8
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d008      	beq.n	80023e6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80023d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d6:	015a      	lsls	r2, r3, #5
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	4413      	add	r3, r2
 80023dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023e0:	461a      	mov	r2, r3
 80023e2:	2308      	movs	r3, #8
 80023e4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	f003 0310 	and.w	r3, r3, #16
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d008      	beq.n	8002402 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80023f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f2:	015a      	lsls	r2, r3, #5
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	4413      	add	r3, r2
 80023f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023fc:	461a      	mov	r2, r3
 80023fe:	2310      	movs	r3, #16
 8002400:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002408:	2b00      	cmp	r3, #0
 800240a:	d008      	beq.n	800241e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800240c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240e:	015a      	lsls	r2, r3, #5
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	4413      	add	r3, r2
 8002414:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002418:	461a      	mov	r2, r3
 800241a:	2340      	movs	r3, #64	; 0x40
 800241c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	f003 0302 	and.w	r3, r3, #2
 8002424:	2b00      	cmp	r3, #0
 8002426:	d023      	beq.n	8002470 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002428:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800242a:	6a38      	ldr	r0, [r7, #32]
 800242c:	f002 ffa2 	bl	8005374 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002430:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002432:	4613      	mov	r3, r2
 8002434:	00db      	lsls	r3, r3, #3
 8002436:	4413      	add	r3, r2
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	3338      	adds	r3, #56	; 0x38
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	4413      	add	r3, r2
 8002440:	3304      	adds	r3, #4
 8002442:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	78db      	ldrb	r3, [r3, #3]
 8002448:	2b01      	cmp	r3, #1
 800244a:	d108      	bne.n	800245e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	2200      	movs	r2, #0
 8002450:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002454:	b2db      	uxtb	r3, r3
 8002456:	4619      	mov	r1, r3
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f006 fe71 	bl	8009140 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800245e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002460:	015a      	lsls	r2, r3, #5
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	4413      	add	r3, r2
 8002466:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800246a:	461a      	mov	r2, r3
 800246c:	2302      	movs	r3, #2
 800246e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002476:	2b00      	cmp	r3, #0
 8002478:	d003      	beq.n	8002482 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800247a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f000 fcdb 	bl	8002e38 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002484:	3301      	adds	r3, #1
 8002486:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800248a:	085b      	lsrs	r3, r3, #1
 800248c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800248e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002490:	2b00      	cmp	r3, #0
 8002492:	f47f af2e 	bne.w	80022f2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4618      	mov	r0, r3
 800249c:	f003 ff8c 	bl	80063b8 <USB_ReadInterrupts>
 80024a0:	4603      	mov	r3, r0
 80024a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80024a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80024aa:	d122      	bne.n	80024f2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	69fa      	ldr	r2, [r7, #28]
 80024b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024ba:	f023 0301 	bic.w	r3, r3, #1
 80024be:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d108      	bne.n	80024dc <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80024d2:	2100      	movs	r1, #0
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f000 fec3 	bl	8003260 <HAL_PCDEx_LPM_Callback>
 80024da:	e002      	b.n	80024e2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f006 fe0f 	bl	8009100 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	695a      	ldr	r2, [r3, #20]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80024f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f003 ff5e 	bl	80063b8 <USB_ReadInterrupts>
 80024fc:	4603      	mov	r3, r0
 80024fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002502:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002506:	d112      	bne.n	800252e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f003 0301 	and.w	r3, r3, #1
 8002514:	2b01      	cmp	r3, #1
 8002516:	d102      	bne.n	800251e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f006 fdcb 	bl	80090b4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	695a      	ldr	r2, [r3, #20]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800252c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4618      	mov	r0, r3
 8002534:	f003 ff40 	bl	80063b8 <USB_ReadInterrupts>
 8002538:	4603      	mov	r3, r0
 800253a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800253e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002542:	f040 80b7 	bne.w	80026b4 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	69fa      	ldr	r2, [r7, #28]
 8002550:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002554:	f023 0301 	bic.w	r3, r3, #1
 8002558:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	2110      	movs	r1, #16
 8002560:	4618      	mov	r0, r3
 8002562:	f002 ff07 	bl	8005374 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002566:	2300      	movs	r3, #0
 8002568:	62fb      	str	r3, [r7, #44]	; 0x2c
 800256a:	e046      	b.n	80025fa <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800256c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800256e:	015a      	lsls	r2, r3, #5
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	4413      	add	r3, r2
 8002574:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002578:	461a      	mov	r2, r3
 800257a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800257e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002582:	015a      	lsls	r2, r3, #5
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	4413      	add	r3, r2
 8002588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002590:	0151      	lsls	r1, r2, #5
 8002592:	69fa      	ldr	r2, [r7, #28]
 8002594:	440a      	add	r2, r1
 8002596:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800259a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800259e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80025a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025a2:	015a      	lsls	r2, r3, #5
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	4413      	add	r3, r2
 80025a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025ac:	461a      	mov	r2, r3
 80025ae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80025b2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80025b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025b6:	015a      	lsls	r2, r3, #5
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	4413      	add	r3, r2
 80025bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025c4:	0151      	lsls	r1, r2, #5
 80025c6:	69fa      	ldr	r2, [r7, #28]
 80025c8:	440a      	add	r2, r1
 80025ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80025ce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80025d2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80025d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025d6:	015a      	lsls	r2, r3, #5
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	4413      	add	r3, r2
 80025dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025e4:	0151      	lsls	r1, r2, #5
 80025e6:	69fa      	ldr	r2, [r7, #28]
 80025e8:	440a      	add	r2, r1
 80025ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80025ee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80025f2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025f6:	3301      	adds	r3, #1
 80025f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002600:	429a      	cmp	r2, r3
 8002602:	d3b3      	bcc.n	800256c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800260a:	69db      	ldr	r3, [r3, #28]
 800260c:	69fa      	ldr	r2, [r7, #28]
 800260e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002612:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002616:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261c:	2b00      	cmp	r3, #0
 800261e:	d016      	beq.n	800264e <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002626:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800262a:	69fa      	ldr	r2, [r7, #28]
 800262c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002630:	f043 030b 	orr.w	r3, r3, #11
 8002634:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800263e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002640:	69fa      	ldr	r2, [r7, #28]
 8002642:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002646:	f043 030b 	orr.w	r3, r3, #11
 800264a:	6453      	str	r3, [r2, #68]	; 0x44
 800264c:	e015      	b.n	800267a <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002654:	695b      	ldr	r3, [r3, #20]
 8002656:	69fa      	ldr	r2, [r7, #28]
 8002658:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800265c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002660:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002664:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	69fa      	ldr	r2, [r7, #28]
 8002670:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002674:	f043 030b 	orr.w	r3, r3, #11
 8002678:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	69fa      	ldr	r2, [r7, #28]
 8002684:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002688:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800268c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6818      	ldr	r0, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	691b      	ldr	r3, [r3, #16]
 8002696:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800269e:	461a      	mov	r2, r3
 80026a0:	f003 ff4e 	bl	8006540 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	695a      	ldr	r2, [r3, #20]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80026b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f003 fe7d 	bl	80063b8 <USB_ReadInterrupts>
 80026be:	4603      	mov	r3, r0
 80026c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026c8:	d124      	bne.n	8002714 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f003 ff13 	bl	80064fa <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4618      	mov	r0, r3
 80026da:	f002 fec8 	bl	800546e <USB_GetDevSpeed>
 80026de:	4603      	mov	r3, r0
 80026e0:	461a      	mov	r2, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681c      	ldr	r4, [r3, #0]
 80026ea:	f001 fa27 	bl	8003b3c <HAL_RCC_GetHCLKFreq>
 80026ee:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	461a      	mov	r2, r3
 80026f8:	4620      	mov	r0, r4
 80026fa:	f002 fbc7 	bl	8004e8c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f006 fcb9 	bl	8009076 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	695a      	ldr	r2, [r3, #20]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002712:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4618      	mov	r0, r3
 800271a:	f003 fe4d 	bl	80063b8 <USB_ReadInterrupts>
 800271e:	4603      	mov	r3, r0
 8002720:	f003 0308 	and.w	r3, r3, #8
 8002724:	2b08      	cmp	r3, #8
 8002726:	d10a      	bne.n	800273e <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f006 fc96 	bl	800905a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	695a      	ldr	r2, [r3, #20]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f002 0208 	and.w	r2, r2, #8
 800273c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4618      	mov	r0, r3
 8002744:	f003 fe38 	bl	80063b8 <USB_ReadInterrupts>
 8002748:	4603      	mov	r3, r0
 800274a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800274e:	2b80      	cmp	r3, #128	; 0x80
 8002750:	d122      	bne.n	8002798 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002752:	6a3b      	ldr	r3, [r7, #32]
 8002754:	699b      	ldr	r3, [r3, #24]
 8002756:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800275a:	6a3b      	ldr	r3, [r7, #32]
 800275c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800275e:	2301      	movs	r3, #1
 8002760:	627b      	str	r3, [r7, #36]	; 0x24
 8002762:	e014      	b.n	800278e <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002764:	6879      	ldr	r1, [r7, #4]
 8002766:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002768:	4613      	mov	r3, r2
 800276a:	00db      	lsls	r3, r3, #3
 800276c:	4413      	add	r3, r2
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	440b      	add	r3, r1
 8002772:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	2b01      	cmp	r3, #1
 800277a:	d105      	bne.n	8002788 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800277c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277e:	b2db      	uxtb	r3, r3
 8002780:	4619      	mov	r1, r3
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f000 fb27 	bl	8002dd6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278a:	3301      	adds	r3, #1
 800278c:	627b      	str	r3, [r7, #36]	; 0x24
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002794:	429a      	cmp	r2, r3
 8002796:	d3e5      	bcc.n	8002764 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4618      	mov	r0, r3
 800279e:	f003 fe0b 	bl	80063b8 <USB_ReadInterrupts>
 80027a2:	4603      	mov	r3, r0
 80027a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027ac:	d13b      	bne.n	8002826 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80027ae:	2301      	movs	r3, #1
 80027b0:	627b      	str	r3, [r7, #36]	; 0x24
 80027b2:	e02b      	b.n	800280c <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80027b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b6:	015a      	lsls	r2, r3, #5
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	4413      	add	r3, r2
 80027bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80027c4:	6879      	ldr	r1, [r7, #4]
 80027c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027c8:	4613      	mov	r3, r2
 80027ca:	00db      	lsls	r3, r3, #3
 80027cc:	4413      	add	r3, r2
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	440b      	add	r3, r1
 80027d2:	3340      	adds	r3, #64	; 0x40
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d115      	bne.n	8002806 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80027da:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80027dc:	2b00      	cmp	r3, #0
 80027de:	da12      	bge.n	8002806 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80027e0:	6879      	ldr	r1, [r7, #4]
 80027e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027e4:	4613      	mov	r3, r2
 80027e6:	00db      	lsls	r3, r3, #3
 80027e8:	4413      	add	r3, r2
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	440b      	add	r3, r1
 80027ee:	333f      	adds	r3, #63	; 0x3f
 80027f0:	2201      	movs	r2, #1
 80027f2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80027f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	4619      	mov	r1, r3
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f000 fae8 	bl	8002dd6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002808:	3301      	adds	r3, #1
 800280a:	627b      	str	r3, [r7, #36]	; 0x24
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002812:	429a      	cmp	r2, r3
 8002814:	d3ce      	bcc.n	80027b4 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	695a      	ldr	r2, [r3, #20]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002824:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4618      	mov	r0, r3
 800282c:	f003 fdc4 	bl	80063b8 <USB_ReadInterrupts>
 8002830:	4603      	mov	r3, r0
 8002832:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002836:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800283a:	d155      	bne.n	80028e8 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800283c:	2301      	movs	r3, #1
 800283e:	627b      	str	r3, [r7, #36]	; 0x24
 8002840:	e045      	b.n	80028ce <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002844:	015a      	lsls	r2, r3, #5
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	4413      	add	r3, r2
 800284a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002852:	6879      	ldr	r1, [r7, #4]
 8002854:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002856:	4613      	mov	r3, r2
 8002858:	00db      	lsls	r3, r3, #3
 800285a:	4413      	add	r3, r2
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	440b      	add	r3, r1
 8002860:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	2b01      	cmp	r3, #1
 8002868:	d12e      	bne.n	80028c8 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800286a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800286c:	2b00      	cmp	r3, #0
 800286e:	da2b      	bge.n	80028c8 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800287c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002880:	429a      	cmp	r2, r3
 8002882:	d121      	bne.n	80028c8 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002884:	6879      	ldr	r1, [r7, #4]
 8002886:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002888:	4613      	mov	r3, r2
 800288a:	00db      	lsls	r3, r3, #3
 800288c:	4413      	add	r3, r2
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	440b      	add	r3, r1
 8002892:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002896:	2201      	movs	r2, #1
 8002898:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800289a:	6a3b      	ldr	r3, [r7, #32]
 800289c:	699b      	ldr	r3, [r3, #24]
 800289e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80028a2:	6a3b      	ldr	r3, [r7, #32]
 80028a4:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80028a6:	6a3b      	ldr	r3, [r7, #32]
 80028a8:	695b      	ldr	r3, [r3, #20]
 80028aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d10a      	bne.n	80028c8 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	69fa      	ldr	r2, [r7, #28]
 80028bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028c4:	6053      	str	r3, [r2, #4]
            break;
 80028c6:	e007      	b.n	80028d8 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ca:	3301      	adds	r3, #1
 80028cc:	627b      	str	r3, [r7, #36]	; 0x24
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d3b4      	bcc.n	8002842 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	695a      	ldr	r2, [r3, #20]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80028e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4618      	mov	r0, r3
 80028ee:	f003 fd63 	bl	80063b8 <USB_ReadInterrupts>
 80028f2:	4603      	mov	r3, r0
 80028f4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80028f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028fc:	d10a      	bne.n	8002914 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f006 fc30 	bl	8009164 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	695a      	ldr	r2, [r3, #20]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002912:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4618      	mov	r0, r3
 800291a:	f003 fd4d 	bl	80063b8 <USB_ReadInterrupts>
 800291e:	4603      	mov	r3, r0
 8002920:	f003 0304 	and.w	r3, r3, #4
 8002924:	2b04      	cmp	r3, #4
 8002926:	d115      	bne.n	8002954 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	f003 0304 	and.w	r3, r3, #4
 8002936:	2b00      	cmp	r3, #0
 8002938:	d002      	beq.n	8002940 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f006 fc20 	bl	8009180 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	6859      	ldr	r1, [r3, #4]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	69ba      	ldr	r2, [r7, #24]
 800294c:	430a      	orrs	r2, r1
 800294e:	605a      	str	r2, [r3, #4]
 8002950:	e000      	b.n	8002954 <HAL_PCD_IRQHandler+0x938>
      return;
 8002952:	bf00      	nop
    }
  }
}
 8002954:	3734      	adds	r7, #52	; 0x34
 8002956:	46bd      	mov	sp, r7
 8002958:	bd90      	pop	{r4, r7, pc}

0800295a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800295a:	b580      	push	{r7, lr}
 800295c:	b082      	sub	sp, #8
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
 8002962:	460b      	mov	r3, r1
 8002964:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800296c:	2b01      	cmp	r3, #1
 800296e:	d101      	bne.n	8002974 <HAL_PCD_SetAddress+0x1a>
 8002970:	2302      	movs	r3, #2
 8002972:	e013      	b.n	800299c <HAL_PCD_SetAddress+0x42>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	78fa      	ldrb	r2, [r7, #3]
 8002980:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	78fa      	ldrb	r2, [r7, #3]
 800298a:	4611      	mov	r1, r2
 800298c:	4618      	mov	r0, r3
 800298e:	f003 fcab 	bl	80062e8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800299a:	2300      	movs	r3, #0
}
 800299c:	4618      	mov	r0, r3
 800299e:	3708      	adds	r7, #8
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	4608      	mov	r0, r1
 80029ae:	4611      	mov	r1, r2
 80029b0:	461a      	mov	r2, r3
 80029b2:	4603      	mov	r3, r0
 80029b4:	70fb      	strb	r3, [r7, #3]
 80029b6:	460b      	mov	r3, r1
 80029b8:	803b      	strh	r3, [r7, #0]
 80029ba:	4613      	mov	r3, r2
 80029bc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80029be:	2300      	movs	r3, #0
 80029c0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80029c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	da0f      	bge.n	80029ea <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029ca:	78fb      	ldrb	r3, [r7, #3]
 80029cc:	f003 020f 	and.w	r2, r3, #15
 80029d0:	4613      	mov	r3, r2
 80029d2:	00db      	lsls	r3, r3, #3
 80029d4:	4413      	add	r3, r2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	3338      	adds	r3, #56	; 0x38
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	4413      	add	r3, r2
 80029de:	3304      	adds	r3, #4
 80029e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2201      	movs	r2, #1
 80029e6:	705a      	strb	r2, [r3, #1]
 80029e8:	e00f      	b.n	8002a0a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029ea:	78fb      	ldrb	r3, [r7, #3]
 80029ec:	f003 020f 	and.w	r2, r3, #15
 80029f0:	4613      	mov	r3, r2
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	4413      	add	r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	4413      	add	r3, r2
 8002a00:	3304      	adds	r3, #4
 8002a02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2200      	movs	r2, #0
 8002a08:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002a0a:	78fb      	ldrb	r3, [r7, #3]
 8002a0c:	f003 030f 	and.w	r3, r3, #15
 8002a10:	b2da      	uxtb	r2, r3
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002a16:	883a      	ldrh	r2, [r7, #0]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	78ba      	ldrb	r2, [r7, #2]
 8002a20:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	785b      	ldrb	r3, [r3, #1]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d004      	beq.n	8002a34 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	b29a      	uxth	r2, r3
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002a34:	78bb      	ldrb	r3, [r7, #2]
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d102      	bne.n	8002a40 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d101      	bne.n	8002a4e <HAL_PCD_EP_Open+0xaa>
 8002a4a:	2302      	movs	r3, #2
 8002a4c:	e00e      	b.n	8002a6c <HAL_PCD_EP_Open+0xc8>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2201      	movs	r2, #1
 8002a52:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	68f9      	ldr	r1, [r7, #12]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f002 fd2b 	bl	80054b8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002a6a:	7afb      	ldrb	r3, [r7, #11]
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3710      	adds	r7, #16
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	da0f      	bge.n	8002aa8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a88:	78fb      	ldrb	r3, [r7, #3]
 8002a8a:	f003 020f 	and.w	r2, r3, #15
 8002a8e:	4613      	mov	r3, r2
 8002a90:	00db      	lsls	r3, r3, #3
 8002a92:	4413      	add	r3, r2
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	3338      	adds	r3, #56	; 0x38
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	4413      	add	r3, r2
 8002a9c:	3304      	adds	r3, #4
 8002a9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	705a      	strb	r2, [r3, #1]
 8002aa6:	e00f      	b.n	8002ac8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002aa8:	78fb      	ldrb	r3, [r7, #3]
 8002aaa:	f003 020f 	and.w	r2, r3, #15
 8002aae:	4613      	mov	r3, r2
 8002ab0:	00db      	lsls	r3, r3, #3
 8002ab2:	4413      	add	r3, r2
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	4413      	add	r3, r2
 8002abe:	3304      	adds	r3, #4
 8002ac0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002ac8:	78fb      	ldrb	r3, [r7, #3]
 8002aca:	f003 030f 	and.w	r3, r3, #15
 8002ace:	b2da      	uxtb	r2, r3
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d101      	bne.n	8002ae2 <HAL_PCD_EP_Close+0x6e>
 8002ade:	2302      	movs	r3, #2
 8002ae0:	e00e      	b.n	8002b00 <HAL_PCD_EP_Close+0x8c>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	68f9      	ldr	r1, [r7, #12]
 8002af0:	4618      	mov	r0, r3
 8002af2:	f002 fd69 	bl	80055c8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002afe:	2300      	movs	r3, #0
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3710      	adds	r7, #16
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b086      	sub	sp, #24
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	607a      	str	r2, [r7, #4]
 8002b12:	603b      	str	r3, [r7, #0]
 8002b14:	460b      	mov	r3, r1
 8002b16:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b18:	7afb      	ldrb	r3, [r7, #11]
 8002b1a:	f003 020f 	and.w	r2, r3, #15
 8002b1e:	4613      	mov	r3, r2
 8002b20:	00db      	lsls	r3, r3, #3
 8002b22:	4413      	add	r3, r2
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b2a:	68fa      	ldr	r2, [r7, #12]
 8002b2c:	4413      	add	r3, r2
 8002b2e:	3304      	adds	r3, #4
 8002b30:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	683a      	ldr	r2, [r7, #0]
 8002b3c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	2200      	movs	r2, #0
 8002b42:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	2200      	movs	r2, #0
 8002b48:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b4a:	7afb      	ldrb	r3, [r7, #11]
 8002b4c:	f003 030f 	and.w	r3, r3, #15
 8002b50:	b2da      	uxtb	r2, r3
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d102      	bne.n	8002b64 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002b64:	7afb      	ldrb	r3, [r7, #11]
 8002b66:	f003 030f 	and.w	r3, r3, #15
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d109      	bne.n	8002b82 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	6818      	ldr	r0, [r3, #0]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	691b      	ldr	r3, [r3, #16]
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	461a      	mov	r2, r3
 8002b7a:	6979      	ldr	r1, [r7, #20]
 8002b7c:	f003 f848 	bl	8005c10 <USB_EP0StartXfer>
 8002b80:	e008      	b.n	8002b94 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6818      	ldr	r0, [r3, #0]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	6979      	ldr	r1, [r7, #20]
 8002b90:	f002 fdf6 	bl	8005780 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3718      	adds	r7, #24
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	b083      	sub	sp, #12
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002baa:	78fb      	ldrb	r3, [r7, #3]
 8002bac:	f003 020f 	and.w	r2, r3, #15
 8002bb0:	6879      	ldr	r1, [r7, #4]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	00db      	lsls	r3, r3, #3
 8002bb6:	4413      	add	r3, r2
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	440b      	add	r3, r1
 8002bbc:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002bc0:	681b      	ldr	r3, [r3, #0]
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	370c      	adds	r7, #12
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr

08002bce <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b086      	sub	sp, #24
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	60f8      	str	r0, [r7, #12]
 8002bd6:	607a      	str	r2, [r7, #4]
 8002bd8:	603b      	str	r3, [r7, #0]
 8002bda:	460b      	mov	r3, r1
 8002bdc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bde:	7afb      	ldrb	r3, [r7, #11]
 8002be0:	f003 020f 	and.w	r2, r3, #15
 8002be4:	4613      	mov	r3, r2
 8002be6:	00db      	lsls	r3, r3, #3
 8002be8:	4413      	add	r3, r2
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	3338      	adds	r3, #56	; 0x38
 8002bee:	68fa      	ldr	r2, [r7, #12]
 8002bf0:	4413      	add	r3, r2
 8002bf2:	3304      	adds	r3, #4
 8002bf4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	683a      	ldr	r2, [r7, #0]
 8002c00:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	2200      	movs	r2, #0
 8002c06:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c0e:	7afb      	ldrb	r3, [r7, #11]
 8002c10:	f003 030f 	and.w	r3, r3, #15
 8002c14:	b2da      	uxtb	r2, r3
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d102      	bne.n	8002c28 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c28:	7afb      	ldrb	r3, [r7, #11]
 8002c2a:	f003 030f 	and.w	r3, r3, #15
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d109      	bne.n	8002c46 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6818      	ldr	r0, [r3, #0]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	691b      	ldr	r3, [r3, #16]
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	6979      	ldr	r1, [r7, #20]
 8002c40:	f002 ffe6 	bl	8005c10 <USB_EP0StartXfer>
 8002c44:	e008      	b.n	8002c58 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6818      	ldr	r0, [r3, #0]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	691b      	ldr	r3, [r3, #16]
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	461a      	mov	r2, r3
 8002c52:	6979      	ldr	r1, [r7, #20]
 8002c54:	f002 fd94 	bl	8005780 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3718      	adds	r7, #24
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}

08002c62 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c62:	b580      	push	{r7, lr}
 8002c64:	b084      	sub	sp, #16
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
 8002c6a:	460b      	mov	r3, r1
 8002c6c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002c6e:	78fb      	ldrb	r3, [r7, #3]
 8002c70:	f003 020f 	and.w	r2, r3, #15
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d901      	bls.n	8002c80 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e050      	b.n	8002d22 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002c80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	da0f      	bge.n	8002ca8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c88:	78fb      	ldrb	r3, [r7, #3]
 8002c8a:	f003 020f 	and.w	r2, r3, #15
 8002c8e:	4613      	mov	r3, r2
 8002c90:	00db      	lsls	r3, r3, #3
 8002c92:	4413      	add	r3, r2
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	3338      	adds	r3, #56	; 0x38
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	4413      	add	r3, r2
 8002c9c:	3304      	adds	r3, #4
 8002c9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	705a      	strb	r2, [r3, #1]
 8002ca6:	e00d      	b.n	8002cc4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002ca8:	78fa      	ldrb	r2, [r7, #3]
 8002caa:	4613      	mov	r3, r2
 8002cac:	00db      	lsls	r3, r3, #3
 8002cae:	4413      	add	r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	4413      	add	r3, r2
 8002cba:	3304      	adds	r3, #4
 8002cbc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cca:	78fb      	ldrb	r3, [r7, #3]
 8002ccc:	f003 030f 	and.w	r3, r3, #15
 8002cd0:	b2da      	uxtb	r2, r3
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d101      	bne.n	8002ce4 <HAL_PCD_EP_SetStall+0x82>
 8002ce0:	2302      	movs	r3, #2
 8002ce2:	e01e      	b.n	8002d22 <HAL_PCD_EP_SetStall+0xc0>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	68f9      	ldr	r1, [r7, #12]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f003 fa24 	bl	8006140 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002cf8:	78fb      	ldrb	r3, [r7, #3]
 8002cfa:	f003 030f 	and.w	r3, r3, #15
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d10a      	bne.n	8002d18 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6818      	ldr	r0, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	b2d9      	uxtb	r1, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002d12:	461a      	mov	r2, r3
 8002d14:	f003 fc14 	bl	8006540 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3710      	adds	r7, #16
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}

08002d2a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d2a:	b580      	push	{r7, lr}
 8002d2c:	b084      	sub	sp, #16
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
 8002d32:	460b      	mov	r3, r1
 8002d34:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002d36:	78fb      	ldrb	r3, [r7, #3]
 8002d38:	f003 020f 	and.w	r2, r3, #15
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d901      	bls.n	8002d48 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e042      	b.n	8002dce <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002d48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	da0f      	bge.n	8002d70 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d50:	78fb      	ldrb	r3, [r7, #3]
 8002d52:	f003 020f 	and.w	r2, r3, #15
 8002d56:	4613      	mov	r3, r2
 8002d58:	00db      	lsls	r3, r3, #3
 8002d5a:	4413      	add	r3, r2
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	3338      	adds	r3, #56	; 0x38
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	4413      	add	r3, r2
 8002d64:	3304      	adds	r3, #4
 8002d66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	705a      	strb	r2, [r3, #1]
 8002d6e:	e00f      	b.n	8002d90 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d70:	78fb      	ldrb	r3, [r7, #3]
 8002d72:	f003 020f 	and.w	r2, r3, #15
 8002d76:	4613      	mov	r3, r2
 8002d78:	00db      	lsls	r3, r3, #3
 8002d7a:	4413      	add	r3, r2
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	4413      	add	r3, r2
 8002d86:	3304      	adds	r3, #4
 8002d88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2200      	movs	r2, #0
 8002d94:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d96:	78fb      	ldrb	r3, [r7, #3]
 8002d98:	f003 030f 	and.w	r3, r3, #15
 8002d9c:	b2da      	uxtb	r2, r3
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d101      	bne.n	8002db0 <HAL_PCD_EP_ClrStall+0x86>
 8002dac:	2302      	movs	r3, #2
 8002dae:	e00e      	b.n	8002dce <HAL_PCD_EP_ClrStall+0xa4>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	68f9      	ldr	r1, [r7, #12]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f003 fa2c 	bl	800621c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3710      	adds	r7, #16
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002dd6:	b580      	push	{r7, lr}
 8002dd8:	b084      	sub	sp, #16
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
 8002dde:	460b      	mov	r3, r1
 8002de0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002de2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	da0c      	bge.n	8002e04 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002dea:	78fb      	ldrb	r3, [r7, #3]
 8002dec:	f003 020f 	and.w	r2, r3, #15
 8002df0:	4613      	mov	r3, r2
 8002df2:	00db      	lsls	r3, r3, #3
 8002df4:	4413      	add	r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	3338      	adds	r3, #56	; 0x38
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	3304      	adds	r3, #4
 8002e00:	60fb      	str	r3, [r7, #12]
 8002e02:	e00c      	b.n	8002e1e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e04:	78fb      	ldrb	r3, [r7, #3]
 8002e06:	f003 020f 	and.w	r2, r3, #15
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	00db      	lsls	r3, r3, #3
 8002e0e:	4413      	add	r3, r2
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	4413      	add	r3, r2
 8002e1a:	3304      	adds	r3, #4
 8002e1c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	68f9      	ldr	r1, [r7, #12]
 8002e24:	4618      	mov	r0, r3
 8002e26:	f003 f84b 	bl	8005ec0 <USB_EPStopXfer>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002e2e:	7afb      	ldrb	r3, [r7, #11]
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3710      	adds	r7, #16
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b08a      	sub	sp, #40	; 0x28
 8002e3c:	af02      	add	r7, sp, #8
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002e4c:	683a      	ldr	r2, [r7, #0]
 8002e4e:	4613      	mov	r3, r2
 8002e50:	00db      	lsls	r3, r3, #3
 8002e52:	4413      	add	r3, r2
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	3338      	adds	r3, #56	; 0x38
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	3304      	adds	r3, #4
 8002e5e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6a1a      	ldr	r2, [r3, #32]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	699b      	ldr	r3, [r3, #24]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d901      	bls.n	8002e70 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e06c      	b.n	8002f4a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	699a      	ldr	r2, [r3, #24]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6a1b      	ldr	r3, [r3, #32]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	69fa      	ldr	r2, [r7, #28]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d902      	bls.n	8002e8c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	3303      	adds	r3, #3
 8002e90:	089b      	lsrs	r3, r3, #2
 8002e92:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e94:	e02b      	b.n	8002eee <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	699a      	ldr	r2, [r3, #24]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6a1b      	ldr	r3, [r3, #32]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	69fa      	ldr	r2, [r7, #28]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d902      	bls.n	8002eb2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	3303      	adds	r3, #3
 8002eb6:	089b      	lsrs	r3, r3, #2
 8002eb8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6919      	ldr	r1, [r3, #16]
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	b2da      	uxtb	r2, r3
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	9300      	str	r3, [sp, #0]
 8002ece:	4603      	mov	r3, r0
 8002ed0:	6978      	ldr	r0, [r7, #20]
 8002ed2:	f003 f89f 	bl	8006014 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	691a      	ldr	r2, [r3, #16]
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	441a      	add	r2, r3
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6a1a      	ldr	r2, [r3, #32]
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	441a      	add	r2, r3
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	015a      	lsls	r2, r3, #5
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	69ba      	ldr	r2, [r7, #24]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d809      	bhi.n	8002f18 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6a1a      	ldr	r2, [r3, #32]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d203      	bcs.n	8002f18 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	699b      	ldr	r3, [r3, #24]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d1be      	bne.n	8002e96 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	699a      	ldr	r2, [r3, #24]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6a1b      	ldr	r3, [r3, #32]
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d811      	bhi.n	8002f48 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	f003 030f 	and.w	r3, r3, #15
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f30:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	43db      	mvns	r3, r3
 8002f3e:	6939      	ldr	r1, [r7, #16]
 8002f40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002f44:	4013      	ands	r3, r2
 8002f46:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3720      	adds	r7, #32
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
	...

08002f54 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b088      	sub	sp, #32
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	333c      	adds	r3, #60	; 0x3c
 8002f6c:	3304      	adds	r3, #4
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	015a      	lsls	r2, r3, #5
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	4413      	add	r3, r2
 8002f7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d17b      	bne.n	8003082 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	f003 0308 	and.w	r3, r3, #8
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d015      	beq.n	8002fc0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	4a61      	ldr	r2, [pc, #388]	; (800311c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	f240 80b9 	bls.w	8003110 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	f000 80b3 	beq.w	8003110 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	015a      	lsls	r2, r3, #5
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	4413      	add	r3, r2
 8002fb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fbc:	6093      	str	r3, [r2, #8]
 8002fbe:	e0a7      	b.n	8003110 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	f003 0320 	and.w	r3, r3, #32
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d009      	beq.n	8002fde <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	015a      	lsls	r2, r3, #5
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	4413      	add	r3, r2
 8002fd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	2320      	movs	r3, #32
 8002fda:	6093      	str	r3, [r2, #8]
 8002fdc:	e098      	b.n	8003110 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	f040 8093 	bne.w	8003110 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	4a4b      	ldr	r2, [pc, #300]	; (800311c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d90f      	bls.n	8003012 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d00a      	beq.n	8003012 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	015a      	lsls	r2, r3, #5
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	4413      	add	r3, r2
 8003004:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003008:	461a      	mov	r2, r3
 800300a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800300e:	6093      	str	r3, [r2, #8]
 8003010:	e07e      	b.n	8003110 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003012:	683a      	ldr	r2, [r7, #0]
 8003014:	4613      	mov	r3, r2
 8003016:	00db      	lsls	r3, r3, #3
 8003018:	4413      	add	r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	4413      	add	r3, r2
 8003024:	3304      	adds	r3, #4
 8003026:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	69da      	ldr	r2, [r3, #28]
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	0159      	lsls	r1, r3, #5
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	440b      	add	r3, r1
 8003034:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800303e:	1ad2      	subs	r2, r2, r3
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d114      	bne.n	8003074 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d109      	bne.n	8003066 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6818      	ldr	r0, [r3, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800305c:	461a      	mov	r2, r3
 800305e:	2101      	movs	r1, #1
 8003060:	f003 fa6e 	bl	8006540 <USB_EP0_OutStart>
 8003064:	e006      	b.n	8003074 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	691a      	ldr	r2, [r3, #16]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6a1b      	ldr	r3, [r3, #32]
 800306e:	441a      	add	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	b2db      	uxtb	r3, r3
 8003078:	4619      	mov	r1, r3
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f005 ffb8 	bl	8008ff0 <HAL_PCD_DataOutStageCallback>
 8003080:	e046      	b.n	8003110 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	4a26      	ldr	r2, [pc, #152]	; (8003120 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d124      	bne.n	80030d4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d00a      	beq.n	80030aa <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	015a      	lsls	r2, r3, #5
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	4413      	add	r3, r2
 800309c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030a0:	461a      	mov	r2, r3
 80030a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030a6:	6093      	str	r3, [r2, #8]
 80030a8:	e032      	b.n	8003110 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	f003 0320 	and.w	r3, r3, #32
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d008      	beq.n	80030c6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	015a      	lsls	r2, r3, #5
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	4413      	add	r3, r2
 80030bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030c0:	461a      	mov	r2, r3
 80030c2:	2320      	movs	r3, #32
 80030c4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	4619      	mov	r1, r3
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f005 ff8f 	bl	8008ff0 <HAL_PCD_DataOutStageCallback>
 80030d2:	e01d      	b.n	8003110 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d114      	bne.n	8003104 <PCD_EP_OutXfrComplete_int+0x1b0>
 80030da:	6879      	ldr	r1, [r7, #4]
 80030dc:	683a      	ldr	r2, [r7, #0]
 80030de:	4613      	mov	r3, r2
 80030e0:	00db      	lsls	r3, r3, #3
 80030e2:	4413      	add	r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	440b      	add	r3, r1
 80030e8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d108      	bne.n	8003104 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6818      	ldr	r0, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80030fc:	461a      	mov	r2, r3
 80030fe:	2100      	movs	r1, #0
 8003100:	f003 fa1e 	bl	8006540 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	b2db      	uxtb	r3, r3
 8003108:	4619      	mov	r1, r3
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f005 ff70 	bl	8008ff0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003110:	2300      	movs	r3, #0
}
 8003112:	4618      	mov	r0, r3
 8003114:	3720      	adds	r7, #32
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	4f54300a 	.word	0x4f54300a
 8003120:	4f54310a 	.word	0x4f54310a

08003124 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b086      	sub	sp, #24
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	333c      	adds	r3, #60	; 0x3c
 800313c:	3304      	adds	r3, #4
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	015a      	lsls	r2, r3, #5
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	4413      	add	r3, r2
 800314a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	4a15      	ldr	r2, [pc, #84]	; (80031ac <PCD_EP_OutSetupPacket_int+0x88>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d90e      	bls.n	8003178 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003160:	2b00      	cmp	r3, #0
 8003162:	d009      	beq.n	8003178 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	015a      	lsls	r2, r3, #5
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	4413      	add	r3, r2
 800316c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003170:	461a      	mov	r2, r3
 8003172:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003176:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f005 ff27 	bl	8008fcc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	4a0a      	ldr	r2, [pc, #40]	; (80031ac <PCD_EP_OutSetupPacket_int+0x88>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d90c      	bls.n	80031a0 <PCD_EP_OutSetupPacket_int+0x7c>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	691b      	ldr	r3, [r3, #16]
 800318a:	2b01      	cmp	r3, #1
 800318c:	d108      	bne.n	80031a0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6818      	ldr	r0, [r3, #0]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003198:	461a      	mov	r2, r3
 800319a:	2101      	movs	r1, #1
 800319c:	f003 f9d0 	bl	8006540 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3718      	adds	r7, #24
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	4f54300a 	.word	0x4f54300a

080031b0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b085      	sub	sp, #20
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	460b      	mov	r3, r1
 80031ba:	70fb      	strb	r3, [r7, #3]
 80031bc:	4613      	mov	r3, r2
 80031be:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80031c8:	78fb      	ldrb	r3, [r7, #3]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d107      	bne.n	80031de <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80031ce:	883b      	ldrh	r3, [r7, #0]
 80031d0:	0419      	lsls	r1, r3, #16
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	68ba      	ldr	r2, [r7, #8]
 80031d8:	430a      	orrs	r2, r1
 80031da:	629a      	str	r2, [r3, #40]	; 0x28
 80031dc:	e028      	b.n	8003230 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e4:	0c1b      	lsrs	r3, r3, #16
 80031e6:	68ba      	ldr	r2, [r7, #8]
 80031e8:	4413      	add	r3, r2
 80031ea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80031ec:	2300      	movs	r3, #0
 80031ee:	73fb      	strb	r3, [r7, #15]
 80031f0:	e00d      	b.n	800320e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	7bfb      	ldrb	r3, [r7, #15]
 80031f8:	3340      	adds	r3, #64	; 0x40
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	4413      	add	r3, r2
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	0c1b      	lsrs	r3, r3, #16
 8003202:	68ba      	ldr	r2, [r7, #8]
 8003204:	4413      	add	r3, r2
 8003206:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003208:	7bfb      	ldrb	r3, [r7, #15]
 800320a:	3301      	adds	r3, #1
 800320c:	73fb      	strb	r3, [r7, #15]
 800320e:	7bfa      	ldrb	r2, [r7, #15]
 8003210:	78fb      	ldrb	r3, [r7, #3]
 8003212:	3b01      	subs	r3, #1
 8003214:	429a      	cmp	r2, r3
 8003216:	d3ec      	bcc.n	80031f2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003218:	883b      	ldrh	r3, [r7, #0]
 800321a:	0418      	lsls	r0, r3, #16
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6819      	ldr	r1, [r3, #0]
 8003220:	78fb      	ldrb	r3, [r7, #3]
 8003222:	3b01      	subs	r3, #1
 8003224:	68ba      	ldr	r2, [r7, #8]
 8003226:	4302      	orrs	r2, r0
 8003228:	3340      	adds	r3, #64	; 0x40
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	440b      	add	r3, r1
 800322e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3714      	adds	r7, #20
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr

0800323e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800323e:	b480      	push	{r7}
 8003240:	b083      	sub	sp, #12
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
 8003246:	460b      	mov	r3, r1
 8003248:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	887a      	ldrh	r2, [r7, #2]
 8003250:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003252:	2300      	movs	r3, #0
}
 8003254:	4618      	mov	r0, r3
 8003256:	370c      	adds	r7, #12
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	460b      	mov	r3, r1
 800326a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800326c:	bf00      	nop
 800326e:	370c      	adds	r7, #12
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr

08003278 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b086      	sub	sp, #24
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d101      	bne.n	800328a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e267      	b.n	800375a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0301 	and.w	r3, r3, #1
 8003292:	2b00      	cmp	r3, #0
 8003294:	d075      	beq.n	8003382 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003296:	4b88      	ldr	r3, [pc, #544]	; (80034b8 <HAL_RCC_OscConfig+0x240>)
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	f003 030c 	and.w	r3, r3, #12
 800329e:	2b04      	cmp	r3, #4
 80032a0:	d00c      	beq.n	80032bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032a2:	4b85      	ldr	r3, [pc, #532]	; (80034b8 <HAL_RCC_OscConfig+0x240>)
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032aa:	2b08      	cmp	r3, #8
 80032ac:	d112      	bne.n	80032d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032ae:	4b82      	ldr	r3, [pc, #520]	; (80034b8 <HAL_RCC_OscConfig+0x240>)
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032ba:	d10b      	bne.n	80032d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032bc:	4b7e      	ldr	r3, [pc, #504]	; (80034b8 <HAL_RCC_OscConfig+0x240>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d05b      	beq.n	8003380 <HAL_RCC_OscConfig+0x108>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d157      	bne.n	8003380 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e242      	b.n	800375a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032dc:	d106      	bne.n	80032ec <HAL_RCC_OscConfig+0x74>
 80032de:	4b76      	ldr	r3, [pc, #472]	; (80034b8 <HAL_RCC_OscConfig+0x240>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a75      	ldr	r2, [pc, #468]	; (80034b8 <HAL_RCC_OscConfig+0x240>)
 80032e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032e8:	6013      	str	r3, [r2, #0]
 80032ea:	e01d      	b.n	8003328 <HAL_RCC_OscConfig+0xb0>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032f4:	d10c      	bne.n	8003310 <HAL_RCC_OscConfig+0x98>
 80032f6:	4b70      	ldr	r3, [pc, #448]	; (80034b8 <HAL_RCC_OscConfig+0x240>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a6f      	ldr	r2, [pc, #444]	; (80034b8 <HAL_RCC_OscConfig+0x240>)
 80032fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003300:	6013      	str	r3, [r2, #0]
 8003302:	4b6d      	ldr	r3, [pc, #436]	; (80034b8 <HAL_RCC_OscConfig+0x240>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a6c      	ldr	r2, [pc, #432]	; (80034b8 <HAL_RCC_OscConfig+0x240>)
 8003308:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800330c:	6013      	str	r3, [r2, #0]
 800330e:	e00b      	b.n	8003328 <HAL_RCC_OscConfig+0xb0>
 8003310:	4b69      	ldr	r3, [pc, #420]	; (80034b8 <HAL_RCC_OscConfig+0x240>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a68      	ldr	r2, [pc, #416]	; (80034b8 <HAL_RCC_OscConfig+0x240>)
 8003316:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800331a:	6013      	str	r3, [r2, #0]
 800331c:	4b66      	ldr	r3, [pc, #408]	; (80034b8 <HAL_RCC_OscConfig+0x240>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a65      	ldr	r2, [pc, #404]	; (80034b8 <HAL_RCC_OscConfig+0x240>)
 8003322:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003326:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d013      	beq.n	8003358 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003330:	f7fe fa44 	bl	80017bc <HAL_GetTick>
 8003334:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003336:	e008      	b.n	800334a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003338:	f7fe fa40 	bl	80017bc <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	2b64      	cmp	r3, #100	; 0x64
 8003344:	d901      	bls.n	800334a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e207      	b.n	800375a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800334a:	4b5b      	ldr	r3, [pc, #364]	; (80034b8 <HAL_RCC_OscConfig+0x240>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d0f0      	beq.n	8003338 <HAL_RCC_OscConfig+0xc0>
 8003356:	e014      	b.n	8003382 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003358:	f7fe fa30 	bl	80017bc <HAL_GetTick>
 800335c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800335e:	e008      	b.n	8003372 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003360:	f7fe fa2c 	bl	80017bc <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	2b64      	cmp	r3, #100	; 0x64
 800336c:	d901      	bls.n	8003372 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e1f3      	b.n	800375a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003372:	4b51      	ldr	r3, [pc, #324]	; (80034b8 <HAL_RCC_OscConfig+0x240>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d1f0      	bne.n	8003360 <HAL_RCC_OscConfig+0xe8>
 800337e:	e000      	b.n	8003382 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003380:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0302 	and.w	r3, r3, #2
 800338a:	2b00      	cmp	r3, #0
 800338c:	d063      	beq.n	8003456 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800338e:	4b4a      	ldr	r3, [pc, #296]	; (80034b8 <HAL_RCC_OscConfig+0x240>)
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f003 030c 	and.w	r3, r3, #12
 8003396:	2b00      	cmp	r3, #0
 8003398:	d00b      	beq.n	80033b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800339a:	4b47      	ldr	r3, [pc, #284]	; (80034b8 <HAL_RCC_OscConfig+0x240>)
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033a2:	2b08      	cmp	r3, #8
 80033a4:	d11c      	bne.n	80033e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033a6:	4b44      	ldr	r3, [pc, #272]	; (80034b8 <HAL_RCC_OscConfig+0x240>)
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d116      	bne.n	80033e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033b2:	4b41      	ldr	r3, [pc, #260]	; (80034b8 <HAL_RCC_OscConfig+0x240>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0302 	and.w	r3, r3, #2
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d005      	beq.n	80033ca <HAL_RCC_OscConfig+0x152>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d001      	beq.n	80033ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e1c7      	b.n	800375a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033ca:	4b3b      	ldr	r3, [pc, #236]	; (80034b8 <HAL_RCC_OscConfig+0x240>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	691b      	ldr	r3, [r3, #16]
 80033d6:	00db      	lsls	r3, r3, #3
 80033d8:	4937      	ldr	r1, [pc, #220]	; (80034b8 <HAL_RCC_OscConfig+0x240>)
 80033da:	4313      	orrs	r3, r2
 80033dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033de:	e03a      	b.n	8003456 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d020      	beq.n	800342a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033e8:	4b34      	ldr	r3, [pc, #208]	; (80034bc <HAL_RCC_OscConfig+0x244>)
 80033ea:	2201      	movs	r2, #1
 80033ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ee:	f7fe f9e5 	bl	80017bc <HAL_GetTick>
 80033f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033f4:	e008      	b.n	8003408 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033f6:	f7fe f9e1 	bl	80017bc <HAL_GetTick>
 80033fa:	4602      	mov	r2, r0
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	2b02      	cmp	r3, #2
 8003402:	d901      	bls.n	8003408 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e1a8      	b.n	800375a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003408:	4b2b      	ldr	r3, [pc, #172]	; (80034b8 <HAL_RCC_OscConfig+0x240>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0302 	and.w	r3, r3, #2
 8003410:	2b00      	cmp	r3, #0
 8003412:	d0f0      	beq.n	80033f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003414:	4b28      	ldr	r3, [pc, #160]	; (80034b8 <HAL_RCC_OscConfig+0x240>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	691b      	ldr	r3, [r3, #16]
 8003420:	00db      	lsls	r3, r3, #3
 8003422:	4925      	ldr	r1, [pc, #148]	; (80034b8 <HAL_RCC_OscConfig+0x240>)
 8003424:	4313      	orrs	r3, r2
 8003426:	600b      	str	r3, [r1, #0]
 8003428:	e015      	b.n	8003456 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800342a:	4b24      	ldr	r3, [pc, #144]	; (80034bc <HAL_RCC_OscConfig+0x244>)
 800342c:	2200      	movs	r2, #0
 800342e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003430:	f7fe f9c4 	bl	80017bc <HAL_GetTick>
 8003434:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003436:	e008      	b.n	800344a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003438:	f7fe f9c0 	bl	80017bc <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	2b02      	cmp	r3, #2
 8003444:	d901      	bls.n	800344a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e187      	b.n	800375a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800344a:	4b1b      	ldr	r3, [pc, #108]	; (80034b8 <HAL_RCC_OscConfig+0x240>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0302 	and.w	r3, r3, #2
 8003452:	2b00      	cmp	r3, #0
 8003454:	d1f0      	bne.n	8003438 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0308 	and.w	r3, r3, #8
 800345e:	2b00      	cmp	r3, #0
 8003460:	d036      	beq.n	80034d0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	695b      	ldr	r3, [r3, #20]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d016      	beq.n	8003498 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800346a:	4b15      	ldr	r3, [pc, #84]	; (80034c0 <HAL_RCC_OscConfig+0x248>)
 800346c:	2201      	movs	r2, #1
 800346e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003470:	f7fe f9a4 	bl	80017bc <HAL_GetTick>
 8003474:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003476:	e008      	b.n	800348a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003478:	f7fe f9a0 	bl	80017bc <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	2b02      	cmp	r3, #2
 8003484:	d901      	bls.n	800348a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e167      	b.n	800375a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800348a:	4b0b      	ldr	r3, [pc, #44]	; (80034b8 <HAL_RCC_OscConfig+0x240>)
 800348c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800348e:	f003 0302 	and.w	r3, r3, #2
 8003492:	2b00      	cmp	r3, #0
 8003494:	d0f0      	beq.n	8003478 <HAL_RCC_OscConfig+0x200>
 8003496:	e01b      	b.n	80034d0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003498:	4b09      	ldr	r3, [pc, #36]	; (80034c0 <HAL_RCC_OscConfig+0x248>)
 800349a:	2200      	movs	r2, #0
 800349c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800349e:	f7fe f98d 	bl	80017bc <HAL_GetTick>
 80034a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034a4:	e00e      	b.n	80034c4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034a6:	f7fe f989 	bl	80017bc <HAL_GetTick>
 80034aa:	4602      	mov	r2, r0
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d907      	bls.n	80034c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	e150      	b.n	800375a <HAL_RCC_OscConfig+0x4e2>
 80034b8:	40023800 	.word	0x40023800
 80034bc:	42470000 	.word	0x42470000
 80034c0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034c4:	4b88      	ldr	r3, [pc, #544]	; (80036e8 <HAL_RCC_OscConfig+0x470>)
 80034c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034c8:	f003 0302 	and.w	r3, r3, #2
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d1ea      	bne.n	80034a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0304 	and.w	r3, r3, #4
 80034d8:	2b00      	cmp	r3, #0
 80034da:	f000 8097 	beq.w	800360c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034de:	2300      	movs	r3, #0
 80034e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034e2:	4b81      	ldr	r3, [pc, #516]	; (80036e8 <HAL_RCC_OscConfig+0x470>)
 80034e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d10f      	bne.n	800350e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034ee:	2300      	movs	r3, #0
 80034f0:	60bb      	str	r3, [r7, #8]
 80034f2:	4b7d      	ldr	r3, [pc, #500]	; (80036e8 <HAL_RCC_OscConfig+0x470>)
 80034f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f6:	4a7c      	ldr	r2, [pc, #496]	; (80036e8 <HAL_RCC_OscConfig+0x470>)
 80034f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034fc:	6413      	str	r3, [r2, #64]	; 0x40
 80034fe:	4b7a      	ldr	r3, [pc, #488]	; (80036e8 <HAL_RCC_OscConfig+0x470>)
 8003500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003506:	60bb      	str	r3, [r7, #8]
 8003508:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800350a:	2301      	movs	r3, #1
 800350c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800350e:	4b77      	ldr	r3, [pc, #476]	; (80036ec <HAL_RCC_OscConfig+0x474>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003516:	2b00      	cmp	r3, #0
 8003518:	d118      	bne.n	800354c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800351a:	4b74      	ldr	r3, [pc, #464]	; (80036ec <HAL_RCC_OscConfig+0x474>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a73      	ldr	r2, [pc, #460]	; (80036ec <HAL_RCC_OscConfig+0x474>)
 8003520:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003524:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003526:	f7fe f949 	bl	80017bc <HAL_GetTick>
 800352a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800352c:	e008      	b.n	8003540 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800352e:	f7fe f945 	bl	80017bc <HAL_GetTick>
 8003532:	4602      	mov	r2, r0
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	2b02      	cmp	r3, #2
 800353a:	d901      	bls.n	8003540 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e10c      	b.n	800375a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003540:	4b6a      	ldr	r3, [pc, #424]	; (80036ec <HAL_RCC_OscConfig+0x474>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003548:	2b00      	cmp	r3, #0
 800354a:	d0f0      	beq.n	800352e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	2b01      	cmp	r3, #1
 8003552:	d106      	bne.n	8003562 <HAL_RCC_OscConfig+0x2ea>
 8003554:	4b64      	ldr	r3, [pc, #400]	; (80036e8 <HAL_RCC_OscConfig+0x470>)
 8003556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003558:	4a63      	ldr	r2, [pc, #396]	; (80036e8 <HAL_RCC_OscConfig+0x470>)
 800355a:	f043 0301 	orr.w	r3, r3, #1
 800355e:	6713      	str	r3, [r2, #112]	; 0x70
 8003560:	e01c      	b.n	800359c <HAL_RCC_OscConfig+0x324>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	2b05      	cmp	r3, #5
 8003568:	d10c      	bne.n	8003584 <HAL_RCC_OscConfig+0x30c>
 800356a:	4b5f      	ldr	r3, [pc, #380]	; (80036e8 <HAL_RCC_OscConfig+0x470>)
 800356c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800356e:	4a5e      	ldr	r2, [pc, #376]	; (80036e8 <HAL_RCC_OscConfig+0x470>)
 8003570:	f043 0304 	orr.w	r3, r3, #4
 8003574:	6713      	str	r3, [r2, #112]	; 0x70
 8003576:	4b5c      	ldr	r3, [pc, #368]	; (80036e8 <HAL_RCC_OscConfig+0x470>)
 8003578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800357a:	4a5b      	ldr	r2, [pc, #364]	; (80036e8 <HAL_RCC_OscConfig+0x470>)
 800357c:	f043 0301 	orr.w	r3, r3, #1
 8003580:	6713      	str	r3, [r2, #112]	; 0x70
 8003582:	e00b      	b.n	800359c <HAL_RCC_OscConfig+0x324>
 8003584:	4b58      	ldr	r3, [pc, #352]	; (80036e8 <HAL_RCC_OscConfig+0x470>)
 8003586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003588:	4a57      	ldr	r2, [pc, #348]	; (80036e8 <HAL_RCC_OscConfig+0x470>)
 800358a:	f023 0301 	bic.w	r3, r3, #1
 800358e:	6713      	str	r3, [r2, #112]	; 0x70
 8003590:	4b55      	ldr	r3, [pc, #340]	; (80036e8 <HAL_RCC_OscConfig+0x470>)
 8003592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003594:	4a54      	ldr	r2, [pc, #336]	; (80036e8 <HAL_RCC_OscConfig+0x470>)
 8003596:	f023 0304 	bic.w	r3, r3, #4
 800359a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d015      	beq.n	80035d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035a4:	f7fe f90a 	bl	80017bc <HAL_GetTick>
 80035a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035aa:	e00a      	b.n	80035c2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035ac:	f7fe f906 	bl	80017bc <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d901      	bls.n	80035c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e0cb      	b.n	800375a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035c2:	4b49      	ldr	r3, [pc, #292]	; (80036e8 <HAL_RCC_OscConfig+0x470>)
 80035c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c6:	f003 0302 	and.w	r3, r3, #2
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d0ee      	beq.n	80035ac <HAL_RCC_OscConfig+0x334>
 80035ce:	e014      	b.n	80035fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035d0:	f7fe f8f4 	bl	80017bc <HAL_GetTick>
 80035d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035d6:	e00a      	b.n	80035ee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035d8:	f7fe f8f0 	bl	80017bc <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d901      	bls.n	80035ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e0b5      	b.n	800375a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035ee:	4b3e      	ldr	r3, [pc, #248]	; (80036e8 <HAL_RCC_OscConfig+0x470>)
 80035f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d1ee      	bne.n	80035d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035fa:	7dfb      	ldrb	r3, [r7, #23]
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d105      	bne.n	800360c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003600:	4b39      	ldr	r3, [pc, #228]	; (80036e8 <HAL_RCC_OscConfig+0x470>)
 8003602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003604:	4a38      	ldr	r2, [pc, #224]	; (80036e8 <HAL_RCC_OscConfig+0x470>)
 8003606:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800360a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	699b      	ldr	r3, [r3, #24]
 8003610:	2b00      	cmp	r3, #0
 8003612:	f000 80a1 	beq.w	8003758 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003616:	4b34      	ldr	r3, [pc, #208]	; (80036e8 <HAL_RCC_OscConfig+0x470>)
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	f003 030c 	and.w	r3, r3, #12
 800361e:	2b08      	cmp	r3, #8
 8003620:	d05c      	beq.n	80036dc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	699b      	ldr	r3, [r3, #24]
 8003626:	2b02      	cmp	r3, #2
 8003628:	d141      	bne.n	80036ae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800362a:	4b31      	ldr	r3, [pc, #196]	; (80036f0 <HAL_RCC_OscConfig+0x478>)
 800362c:	2200      	movs	r2, #0
 800362e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003630:	f7fe f8c4 	bl	80017bc <HAL_GetTick>
 8003634:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003636:	e008      	b.n	800364a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003638:	f7fe f8c0 	bl	80017bc <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	2b02      	cmp	r3, #2
 8003644:	d901      	bls.n	800364a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e087      	b.n	800375a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800364a:	4b27      	ldr	r3, [pc, #156]	; (80036e8 <HAL_RCC_OscConfig+0x470>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d1f0      	bne.n	8003638 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	69da      	ldr	r2, [r3, #28]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a1b      	ldr	r3, [r3, #32]
 800365e:	431a      	orrs	r2, r3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003664:	019b      	lsls	r3, r3, #6
 8003666:	431a      	orrs	r2, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800366c:	085b      	lsrs	r3, r3, #1
 800366e:	3b01      	subs	r3, #1
 8003670:	041b      	lsls	r3, r3, #16
 8003672:	431a      	orrs	r2, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003678:	061b      	lsls	r3, r3, #24
 800367a:	491b      	ldr	r1, [pc, #108]	; (80036e8 <HAL_RCC_OscConfig+0x470>)
 800367c:	4313      	orrs	r3, r2
 800367e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003680:	4b1b      	ldr	r3, [pc, #108]	; (80036f0 <HAL_RCC_OscConfig+0x478>)
 8003682:	2201      	movs	r2, #1
 8003684:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003686:	f7fe f899 	bl	80017bc <HAL_GetTick>
 800368a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800368c:	e008      	b.n	80036a0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800368e:	f7fe f895 	bl	80017bc <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	2b02      	cmp	r3, #2
 800369a:	d901      	bls.n	80036a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	e05c      	b.n	800375a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036a0:	4b11      	ldr	r3, [pc, #68]	; (80036e8 <HAL_RCC_OscConfig+0x470>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d0f0      	beq.n	800368e <HAL_RCC_OscConfig+0x416>
 80036ac:	e054      	b.n	8003758 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036ae:	4b10      	ldr	r3, [pc, #64]	; (80036f0 <HAL_RCC_OscConfig+0x478>)
 80036b0:	2200      	movs	r2, #0
 80036b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b4:	f7fe f882 	bl	80017bc <HAL_GetTick>
 80036b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ba:	e008      	b.n	80036ce <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036bc:	f7fe f87e 	bl	80017bc <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d901      	bls.n	80036ce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e045      	b.n	800375a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ce:	4b06      	ldr	r3, [pc, #24]	; (80036e8 <HAL_RCC_OscConfig+0x470>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d1f0      	bne.n	80036bc <HAL_RCC_OscConfig+0x444>
 80036da:	e03d      	b.n	8003758 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	699b      	ldr	r3, [r3, #24]
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d107      	bne.n	80036f4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e038      	b.n	800375a <HAL_RCC_OscConfig+0x4e2>
 80036e8:	40023800 	.word	0x40023800
 80036ec:	40007000 	.word	0x40007000
 80036f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80036f4:	4b1b      	ldr	r3, [pc, #108]	; (8003764 <HAL_RCC_OscConfig+0x4ec>)
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	699b      	ldr	r3, [r3, #24]
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d028      	beq.n	8003754 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800370c:	429a      	cmp	r2, r3
 800370e:	d121      	bne.n	8003754 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800371a:	429a      	cmp	r2, r3
 800371c:	d11a      	bne.n	8003754 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800371e:	68fa      	ldr	r2, [r7, #12]
 8003720:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003724:	4013      	ands	r3, r2
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800372a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800372c:	4293      	cmp	r3, r2
 800372e:	d111      	bne.n	8003754 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800373a:	085b      	lsrs	r3, r3, #1
 800373c:	3b01      	subs	r3, #1
 800373e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003740:	429a      	cmp	r2, r3
 8003742:	d107      	bne.n	8003754 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003750:	429a      	cmp	r2, r3
 8003752:	d001      	beq.n	8003758 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e000      	b.n	800375a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003758:	2300      	movs	r3, #0
}
 800375a:	4618      	mov	r0, r3
 800375c:	3718      	adds	r7, #24
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	40023800 	.word	0x40023800

08003768 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d101      	bne.n	800377c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e0cc      	b.n	8003916 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800377c:	4b68      	ldr	r3, [pc, #416]	; (8003920 <HAL_RCC_ClockConfig+0x1b8>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0307 	and.w	r3, r3, #7
 8003784:	683a      	ldr	r2, [r7, #0]
 8003786:	429a      	cmp	r2, r3
 8003788:	d90c      	bls.n	80037a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800378a:	4b65      	ldr	r3, [pc, #404]	; (8003920 <HAL_RCC_ClockConfig+0x1b8>)
 800378c:	683a      	ldr	r2, [r7, #0]
 800378e:	b2d2      	uxtb	r2, r2
 8003790:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003792:	4b63      	ldr	r3, [pc, #396]	; (8003920 <HAL_RCC_ClockConfig+0x1b8>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0307 	and.w	r3, r3, #7
 800379a:	683a      	ldr	r2, [r7, #0]
 800379c:	429a      	cmp	r2, r3
 800379e:	d001      	beq.n	80037a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e0b8      	b.n	8003916 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0302 	and.w	r3, r3, #2
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d020      	beq.n	80037f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0304 	and.w	r3, r3, #4
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d005      	beq.n	80037c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037bc:	4b59      	ldr	r3, [pc, #356]	; (8003924 <HAL_RCC_ClockConfig+0x1bc>)
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	4a58      	ldr	r2, [pc, #352]	; (8003924 <HAL_RCC_ClockConfig+0x1bc>)
 80037c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80037c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0308 	and.w	r3, r3, #8
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d005      	beq.n	80037e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037d4:	4b53      	ldr	r3, [pc, #332]	; (8003924 <HAL_RCC_ClockConfig+0x1bc>)
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	4a52      	ldr	r2, [pc, #328]	; (8003924 <HAL_RCC_ClockConfig+0x1bc>)
 80037da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80037de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037e0:	4b50      	ldr	r3, [pc, #320]	; (8003924 <HAL_RCC_ClockConfig+0x1bc>)
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	494d      	ldr	r1, [pc, #308]	; (8003924 <HAL_RCC_ClockConfig+0x1bc>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0301 	and.w	r3, r3, #1
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d044      	beq.n	8003888 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	2b01      	cmp	r3, #1
 8003804:	d107      	bne.n	8003816 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003806:	4b47      	ldr	r3, [pc, #284]	; (8003924 <HAL_RCC_ClockConfig+0x1bc>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d119      	bne.n	8003846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e07f      	b.n	8003916 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	2b02      	cmp	r3, #2
 800381c:	d003      	beq.n	8003826 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003822:	2b03      	cmp	r3, #3
 8003824:	d107      	bne.n	8003836 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003826:	4b3f      	ldr	r3, [pc, #252]	; (8003924 <HAL_RCC_ClockConfig+0x1bc>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d109      	bne.n	8003846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e06f      	b.n	8003916 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003836:	4b3b      	ldr	r3, [pc, #236]	; (8003924 <HAL_RCC_ClockConfig+0x1bc>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0302 	and.w	r3, r3, #2
 800383e:	2b00      	cmp	r3, #0
 8003840:	d101      	bne.n	8003846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e067      	b.n	8003916 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003846:	4b37      	ldr	r3, [pc, #220]	; (8003924 <HAL_RCC_ClockConfig+0x1bc>)
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	f023 0203 	bic.w	r2, r3, #3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	4934      	ldr	r1, [pc, #208]	; (8003924 <HAL_RCC_ClockConfig+0x1bc>)
 8003854:	4313      	orrs	r3, r2
 8003856:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003858:	f7fd ffb0 	bl	80017bc <HAL_GetTick>
 800385c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800385e:	e00a      	b.n	8003876 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003860:	f7fd ffac 	bl	80017bc <HAL_GetTick>
 8003864:	4602      	mov	r2, r0
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	f241 3288 	movw	r2, #5000	; 0x1388
 800386e:	4293      	cmp	r3, r2
 8003870:	d901      	bls.n	8003876 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e04f      	b.n	8003916 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003876:	4b2b      	ldr	r3, [pc, #172]	; (8003924 <HAL_RCC_ClockConfig+0x1bc>)
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f003 020c 	and.w	r2, r3, #12
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	429a      	cmp	r2, r3
 8003886:	d1eb      	bne.n	8003860 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003888:	4b25      	ldr	r3, [pc, #148]	; (8003920 <HAL_RCC_ClockConfig+0x1b8>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0307 	and.w	r3, r3, #7
 8003890:	683a      	ldr	r2, [r7, #0]
 8003892:	429a      	cmp	r2, r3
 8003894:	d20c      	bcs.n	80038b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003896:	4b22      	ldr	r3, [pc, #136]	; (8003920 <HAL_RCC_ClockConfig+0x1b8>)
 8003898:	683a      	ldr	r2, [r7, #0]
 800389a:	b2d2      	uxtb	r2, r2
 800389c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800389e:	4b20      	ldr	r3, [pc, #128]	; (8003920 <HAL_RCC_ClockConfig+0x1b8>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0307 	and.w	r3, r3, #7
 80038a6:	683a      	ldr	r2, [r7, #0]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d001      	beq.n	80038b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e032      	b.n	8003916 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0304 	and.w	r3, r3, #4
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d008      	beq.n	80038ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038bc:	4b19      	ldr	r3, [pc, #100]	; (8003924 <HAL_RCC_ClockConfig+0x1bc>)
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	4916      	ldr	r1, [pc, #88]	; (8003924 <HAL_RCC_ClockConfig+0x1bc>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0308 	and.w	r3, r3, #8
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d009      	beq.n	80038ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038da:	4b12      	ldr	r3, [pc, #72]	; (8003924 <HAL_RCC_ClockConfig+0x1bc>)
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	00db      	lsls	r3, r3, #3
 80038e8:	490e      	ldr	r1, [pc, #56]	; (8003924 <HAL_RCC_ClockConfig+0x1bc>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80038ee:	f000 f821 	bl	8003934 <HAL_RCC_GetSysClockFreq>
 80038f2:	4602      	mov	r2, r0
 80038f4:	4b0b      	ldr	r3, [pc, #44]	; (8003924 <HAL_RCC_ClockConfig+0x1bc>)
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	091b      	lsrs	r3, r3, #4
 80038fa:	f003 030f 	and.w	r3, r3, #15
 80038fe:	490a      	ldr	r1, [pc, #40]	; (8003928 <HAL_RCC_ClockConfig+0x1c0>)
 8003900:	5ccb      	ldrb	r3, [r1, r3]
 8003902:	fa22 f303 	lsr.w	r3, r2, r3
 8003906:	4a09      	ldr	r2, [pc, #36]	; (800392c <HAL_RCC_ClockConfig+0x1c4>)
 8003908:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800390a:	4b09      	ldr	r3, [pc, #36]	; (8003930 <HAL_RCC_ClockConfig+0x1c8>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4618      	mov	r0, r3
 8003910:	f7fd fcaa 	bl	8001268 <HAL_InitTick>

  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3710      	adds	r7, #16
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	40023c00 	.word	0x40023c00
 8003924:	40023800 	.word	0x40023800
 8003928:	0800e0d8 	.word	0x0800e0d8
 800392c:	20000000 	.word	0x20000000
 8003930:	20000004 	.word	0x20000004

08003934 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003934:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003938:	b094      	sub	sp, #80	; 0x50
 800393a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800393c:	2300      	movs	r3, #0
 800393e:	647b      	str	r3, [r7, #68]	; 0x44
 8003940:	2300      	movs	r3, #0
 8003942:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003944:	2300      	movs	r3, #0
 8003946:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003948:	2300      	movs	r3, #0
 800394a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800394c:	4b79      	ldr	r3, [pc, #484]	; (8003b34 <HAL_RCC_GetSysClockFreq+0x200>)
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f003 030c 	and.w	r3, r3, #12
 8003954:	2b08      	cmp	r3, #8
 8003956:	d00d      	beq.n	8003974 <HAL_RCC_GetSysClockFreq+0x40>
 8003958:	2b08      	cmp	r3, #8
 800395a:	f200 80e1 	bhi.w	8003b20 <HAL_RCC_GetSysClockFreq+0x1ec>
 800395e:	2b00      	cmp	r3, #0
 8003960:	d002      	beq.n	8003968 <HAL_RCC_GetSysClockFreq+0x34>
 8003962:	2b04      	cmp	r3, #4
 8003964:	d003      	beq.n	800396e <HAL_RCC_GetSysClockFreq+0x3a>
 8003966:	e0db      	b.n	8003b20 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003968:	4b73      	ldr	r3, [pc, #460]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x204>)
 800396a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800396c:	e0db      	b.n	8003b26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800396e:	4b72      	ldr	r3, [pc, #456]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x204>)
 8003970:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003972:	e0d8      	b.n	8003b26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003974:	4b6f      	ldr	r3, [pc, #444]	; (8003b34 <HAL_RCC_GetSysClockFreq+0x200>)
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800397c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800397e:	4b6d      	ldr	r3, [pc, #436]	; (8003b34 <HAL_RCC_GetSysClockFreq+0x200>)
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d063      	beq.n	8003a52 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800398a:	4b6a      	ldr	r3, [pc, #424]	; (8003b34 <HAL_RCC_GetSysClockFreq+0x200>)
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	099b      	lsrs	r3, r3, #6
 8003990:	2200      	movs	r2, #0
 8003992:	63bb      	str	r3, [r7, #56]	; 0x38
 8003994:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003998:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800399c:	633b      	str	r3, [r7, #48]	; 0x30
 800399e:	2300      	movs	r3, #0
 80039a0:	637b      	str	r3, [r7, #52]	; 0x34
 80039a2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80039a6:	4622      	mov	r2, r4
 80039a8:	462b      	mov	r3, r5
 80039aa:	f04f 0000 	mov.w	r0, #0
 80039ae:	f04f 0100 	mov.w	r1, #0
 80039b2:	0159      	lsls	r1, r3, #5
 80039b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039b8:	0150      	lsls	r0, r2, #5
 80039ba:	4602      	mov	r2, r0
 80039bc:	460b      	mov	r3, r1
 80039be:	4621      	mov	r1, r4
 80039c0:	1a51      	subs	r1, r2, r1
 80039c2:	6139      	str	r1, [r7, #16]
 80039c4:	4629      	mov	r1, r5
 80039c6:	eb63 0301 	sbc.w	r3, r3, r1
 80039ca:	617b      	str	r3, [r7, #20]
 80039cc:	f04f 0200 	mov.w	r2, #0
 80039d0:	f04f 0300 	mov.w	r3, #0
 80039d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80039d8:	4659      	mov	r1, fp
 80039da:	018b      	lsls	r3, r1, #6
 80039dc:	4651      	mov	r1, sl
 80039de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80039e2:	4651      	mov	r1, sl
 80039e4:	018a      	lsls	r2, r1, #6
 80039e6:	4651      	mov	r1, sl
 80039e8:	ebb2 0801 	subs.w	r8, r2, r1
 80039ec:	4659      	mov	r1, fp
 80039ee:	eb63 0901 	sbc.w	r9, r3, r1
 80039f2:	f04f 0200 	mov.w	r2, #0
 80039f6:	f04f 0300 	mov.w	r3, #0
 80039fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a06:	4690      	mov	r8, r2
 8003a08:	4699      	mov	r9, r3
 8003a0a:	4623      	mov	r3, r4
 8003a0c:	eb18 0303 	adds.w	r3, r8, r3
 8003a10:	60bb      	str	r3, [r7, #8]
 8003a12:	462b      	mov	r3, r5
 8003a14:	eb49 0303 	adc.w	r3, r9, r3
 8003a18:	60fb      	str	r3, [r7, #12]
 8003a1a:	f04f 0200 	mov.w	r2, #0
 8003a1e:	f04f 0300 	mov.w	r3, #0
 8003a22:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003a26:	4629      	mov	r1, r5
 8003a28:	028b      	lsls	r3, r1, #10
 8003a2a:	4621      	mov	r1, r4
 8003a2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a30:	4621      	mov	r1, r4
 8003a32:	028a      	lsls	r2, r1, #10
 8003a34:	4610      	mov	r0, r2
 8003a36:	4619      	mov	r1, r3
 8003a38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a3e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a40:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003a44:	f7fd f8b8 	bl	8000bb8 <__aeabi_uldivmod>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	460b      	mov	r3, r1
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a50:	e058      	b.n	8003b04 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a52:	4b38      	ldr	r3, [pc, #224]	; (8003b34 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	099b      	lsrs	r3, r3, #6
 8003a58:	2200      	movs	r2, #0
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	4611      	mov	r1, r2
 8003a5e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003a62:	623b      	str	r3, [r7, #32]
 8003a64:	2300      	movs	r3, #0
 8003a66:	627b      	str	r3, [r7, #36]	; 0x24
 8003a68:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003a6c:	4642      	mov	r2, r8
 8003a6e:	464b      	mov	r3, r9
 8003a70:	f04f 0000 	mov.w	r0, #0
 8003a74:	f04f 0100 	mov.w	r1, #0
 8003a78:	0159      	lsls	r1, r3, #5
 8003a7a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a7e:	0150      	lsls	r0, r2, #5
 8003a80:	4602      	mov	r2, r0
 8003a82:	460b      	mov	r3, r1
 8003a84:	4641      	mov	r1, r8
 8003a86:	ebb2 0a01 	subs.w	sl, r2, r1
 8003a8a:	4649      	mov	r1, r9
 8003a8c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003a90:	f04f 0200 	mov.w	r2, #0
 8003a94:	f04f 0300 	mov.w	r3, #0
 8003a98:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003a9c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003aa0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003aa4:	ebb2 040a 	subs.w	r4, r2, sl
 8003aa8:	eb63 050b 	sbc.w	r5, r3, fp
 8003aac:	f04f 0200 	mov.w	r2, #0
 8003ab0:	f04f 0300 	mov.w	r3, #0
 8003ab4:	00eb      	lsls	r3, r5, #3
 8003ab6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003aba:	00e2      	lsls	r2, r4, #3
 8003abc:	4614      	mov	r4, r2
 8003abe:	461d      	mov	r5, r3
 8003ac0:	4643      	mov	r3, r8
 8003ac2:	18e3      	adds	r3, r4, r3
 8003ac4:	603b      	str	r3, [r7, #0]
 8003ac6:	464b      	mov	r3, r9
 8003ac8:	eb45 0303 	adc.w	r3, r5, r3
 8003acc:	607b      	str	r3, [r7, #4]
 8003ace:	f04f 0200 	mov.w	r2, #0
 8003ad2:	f04f 0300 	mov.w	r3, #0
 8003ad6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ada:	4629      	mov	r1, r5
 8003adc:	028b      	lsls	r3, r1, #10
 8003ade:	4621      	mov	r1, r4
 8003ae0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ae4:	4621      	mov	r1, r4
 8003ae6:	028a      	lsls	r2, r1, #10
 8003ae8:	4610      	mov	r0, r2
 8003aea:	4619      	mov	r1, r3
 8003aec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003aee:	2200      	movs	r2, #0
 8003af0:	61bb      	str	r3, [r7, #24]
 8003af2:	61fa      	str	r2, [r7, #28]
 8003af4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003af8:	f7fd f85e 	bl	8000bb8 <__aeabi_uldivmod>
 8003afc:	4602      	mov	r2, r0
 8003afe:	460b      	mov	r3, r1
 8003b00:	4613      	mov	r3, r2
 8003b02:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b04:	4b0b      	ldr	r3, [pc, #44]	; (8003b34 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	0c1b      	lsrs	r3, r3, #16
 8003b0a:	f003 0303 	and.w	r3, r3, #3
 8003b0e:	3301      	adds	r3, #1
 8003b10:	005b      	lsls	r3, r3, #1
 8003b12:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003b14:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b1c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b1e:	e002      	b.n	8003b26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b20:	4b05      	ldr	r3, [pc, #20]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x204>)
 8003b22:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3750      	adds	r7, #80	; 0x50
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b32:	bf00      	nop
 8003b34:	40023800 	.word	0x40023800
 8003b38:	00f42400 	.word	0x00f42400

08003b3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b40:	4b03      	ldr	r3, [pc, #12]	; (8003b50 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b42:	681b      	ldr	r3, [r3, #0]
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	20000000 	.word	0x20000000

08003b54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b58:	f7ff fff0 	bl	8003b3c <HAL_RCC_GetHCLKFreq>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	4b05      	ldr	r3, [pc, #20]	; (8003b74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	0a9b      	lsrs	r3, r3, #10
 8003b64:	f003 0307 	and.w	r3, r3, #7
 8003b68:	4903      	ldr	r1, [pc, #12]	; (8003b78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b6a:	5ccb      	ldrb	r3, [r1, r3]
 8003b6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	40023800 	.word	0x40023800
 8003b78:	0800e0e8 	.word	0x0800e0e8

08003b7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003b80:	f7ff ffdc 	bl	8003b3c <HAL_RCC_GetHCLKFreq>
 8003b84:	4602      	mov	r2, r0
 8003b86:	4b05      	ldr	r3, [pc, #20]	; (8003b9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	0b5b      	lsrs	r3, r3, #13
 8003b8c:	f003 0307 	and.w	r3, r3, #7
 8003b90:	4903      	ldr	r1, [pc, #12]	; (8003ba0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b92:	5ccb      	ldrb	r3, [r1, r3]
 8003b94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	40023800 	.word	0x40023800
 8003ba0:	0800e0e8 	.word	0x0800e0e8

08003ba4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	220f      	movs	r2, #15
 8003bb2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003bb4:	4b12      	ldr	r3, [pc, #72]	; (8003c00 <HAL_RCC_GetClockConfig+0x5c>)
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	f003 0203 	and.w	r2, r3, #3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003bc0:	4b0f      	ldr	r3, [pc, #60]	; (8003c00 <HAL_RCC_GetClockConfig+0x5c>)
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003bcc:	4b0c      	ldr	r3, [pc, #48]	; (8003c00 <HAL_RCC_GetClockConfig+0x5c>)
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003bd8:	4b09      	ldr	r3, [pc, #36]	; (8003c00 <HAL_RCC_GetClockConfig+0x5c>)
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	08db      	lsrs	r3, r3, #3
 8003bde:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003be6:	4b07      	ldr	r3, [pc, #28]	; (8003c04 <HAL_RCC_GetClockConfig+0x60>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0207 	and.w	r2, r3, #7
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	601a      	str	r2, [r3, #0]
}
 8003bf2:	bf00      	nop
 8003bf4:	370c      	adds	r7, #12
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
 8003bfe:	bf00      	nop
 8003c00:	40023800 	.word	0x40023800
 8003c04:	40023c00 	.word	0x40023c00

08003c08 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d101      	bne.n	8003c1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e07b      	b.n	8003d12 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d108      	bne.n	8003c34 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c2a:	d009      	beq.n	8003c40 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	61da      	str	r2, [r3, #28]
 8003c32:	e005      	b.n	8003c40 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d106      	bne.n	8003c60 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f7fd fa94 	bl	8001188 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2202      	movs	r2, #2
 8003c64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c76:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003c88:	431a      	orrs	r2, r3
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c92:	431a      	orrs	r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	691b      	ldr	r3, [r3, #16]
 8003c98:	f003 0302 	and.w	r3, r3, #2
 8003c9c:	431a      	orrs	r2, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	695b      	ldr	r3, [r3, #20]
 8003ca2:	f003 0301 	and.w	r3, r3, #1
 8003ca6:	431a      	orrs	r2, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	699b      	ldr	r3, [r3, #24]
 8003cac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cb0:	431a      	orrs	r2, r3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	69db      	ldr	r3, [r3, #28]
 8003cb6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003cba:	431a      	orrs	r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6a1b      	ldr	r3, [r3, #32]
 8003cc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cc4:	ea42 0103 	orr.w	r1, r2, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ccc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	430a      	orrs	r2, r1
 8003cd6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	699b      	ldr	r3, [r3, #24]
 8003cdc:	0c1b      	lsrs	r3, r3, #16
 8003cde:	f003 0104 	and.w	r1, r3, #4
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce6:	f003 0210 	and.w	r2, r3, #16
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	430a      	orrs	r2, r1
 8003cf0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	69da      	ldr	r2, [r3, #28]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d00:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3708      	adds	r7, #8
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}

08003d1a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d1a:	b580      	push	{r7, lr}
 8003d1c:	b088      	sub	sp, #32
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	60f8      	str	r0, [r7, #12]
 8003d22:	60b9      	str	r1, [r7, #8]
 8003d24:	603b      	str	r3, [r7, #0]
 8003d26:	4613      	mov	r3, r2
 8003d28:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d101      	bne.n	8003d3c <HAL_SPI_Transmit+0x22>
 8003d38:	2302      	movs	r3, #2
 8003d3a:	e126      	b.n	8003f8a <HAL_SPI_Transmit+0x270>
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d44:	f7fd fd3a 	bl	80017bc <HAL_GetTick>
 8003d48:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003d4a:	88fb      	ldrh	r3, [r7, #6]
 8003d4c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d002      	beq.n	8003d60 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003d5a:	2302      	movs	r3, #2
 8003d5c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d5e:	e10b      	b.n	8003f78 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d002      	beq.n	8003d6c <HAL_SPI_Transmit+0x52>
 8003d66:	88fb      	ldrh	r3, [r7, #6]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d102      	bne.n	8003d72 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d70:	e102      	b.n	8003f78 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2203      	movs	r2, #3
 8003d76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	68ba      	ldr	r2, [r7, #8]
 8003d84:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	88fa      	ldrh	r2, [r7, #6]
 8003d8a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	88fa      	ldrh	r2, [r7, #6]
 8003d90:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2200      	movs	r2, #0
 8003d96:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2200      	movs	r2, #0
 8003da2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2200      	movs	r2, #0
 8003da8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2200      	movs	r2, #0
 8003dae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003db8:	d10f      	bne.n	8003dda <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dc8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003dd8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003de4:	2b40      	cmp	r3, #64	; 0x40
 8003de6:	d007      	beq.n	8003df8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003df6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e00:	d14b      	bne.n	8003e9a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d002      	beq.n	8003e10 <HAL_SPI_Transmit+0xf6>
 8003e0a:	8afb      	ldrh	r3, [r7, #22]
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d13e      	bne.n	8003e8e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e14:	881a      	ldrh	r2, [r3, #0]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e20:	1c9a      	adds	r2, r3, #2
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	3b01      	subs	r3, #1
 8003e2e:	b29a      	uxth	r2, r3
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003e34:	e02b      	b.n	8003e8e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	f003 0302 	and.w	r3, r3, #2
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d112      	bne.n	8003e6a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e48:	881a      	ldrh	r2, [r3, #0]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e54:	1c9a      	adds	r2, r3, #2
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	3b01      	subs	r3, #1
 8003e62:	b29a      	uxth	r2, r3
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	86da      	strh	r2, [r3, #54]	; 0x36
 8003e68:	e011      	b.n	8003e8e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e6a:	f7fd fca7 	bl	80017bc <HAL_GetTick>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	683a      	ldr	r2, [r7, #0]
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d803      	bhi.n	8003e82 <HAL_SPI_Transmit+0x168>
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e80:	d102      	bne.n	8003e88 <HAL_SPI_Transmit+0x16e>
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d102      	bne.n	8003e8e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003e8c:	e074      	b.n	8003f78 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d1ce      	bne.n	8003e36 <HAL_SPI_Transmit+0x11c>
 8003e98:	e04c      	b.n	8003f34 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d002      	beq.n	8003ea8 <HAL_SPI_Transmit+0x18e>
 8003ea2:	8afb      	ldrh	r3, [r7, #22]
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d140      	bne.n	8003f2a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	330c      	adds	r3, #12
 8003eb2:	7812      	ldrb	r2, [r2, #0]
 8003eb4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eba:	1c5a      	adds	r2, r3, #1
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	b29a      	uxth	r2, r3
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003ece:	e02c      	b.n	8003f2a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	f003 0302 	and.w	r3, r3, #2
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d113      	bne.n	8003f06 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	330c      	adds	r3, #12
 8003ee8:	7812      	ldrb	r2, [r2, #0]
 8003eea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef0:	1c5a      	adds	r2, r3, #1
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	3b01      	subs	r3, #1
 8003efe:	b29a      	uxth	r2, r3
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	86da      	strh	r2, [r3, #54]	; 0x36
 8003f04:	e011      	b.n	8003f2a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f06:	f7fd fc59 	bl	80017bc <HAL_GetTick>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	69bb      	ldr	r3, [r7, #24]
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	683a      	ldr	r2, [r7, #0]
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d803      	bhi.n	8003f1e <HAL_SPI_Transmit+0x204>
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f1c:	d102      	bne.n	8003f24 <HAL_SPI_Transmit+0x20a>
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d102      	bne.n	8003f2a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003f24:	2303      	movs	r3, #3
 8003f26:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003f28:	e026      	b.n	8003f78 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d1cd      	bne.n	8003ed0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f34:	69ba      	ldr	r2, [r7, #24]
 8003f36:	6839      	ldr	r1, [r7, #0]
 8003f38:	68f8      	ldr	r0, [r7, #12]
 8003f3a:	f000 f8c1 	bl	80040c0 <SPI_EndRxTxTransaction>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d002      	beq.n	8003f4a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2220      	movs	r2, #32
 8003f48:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d10a      	bne.n	8003f68 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f52:	2300      	movs	r3, #0
 8003f54:	613b      	str	r3, [r7, #16]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	613b      	str	r3, [r7, #16]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	613b      	str	r3, [r7, #16]
 8003f66:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d002      	beq.n	8003f76 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	77fb      	strb	r3, [r7, #31]
 8003f74:	e000      	b.n	8003f78 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003f76:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003f88:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3720      	adds	r7, #32
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}

08003f92 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003f92:	b480      	push	{r7}
 8003f94:	b083      	sub	sp, #12
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fa0:	b2db      	uxtb	r3, r3
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	370c      	adds	r7, #12
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr
	...

08003fb0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b088      	sub	sp, #32
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	603b      	str	r3, [r7, #0]
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003fc0:	f7fd fbfc 	bl	80017bc <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fc8:	1a9b      	subs	r3, r3, r2
 8003fca:	683a      	ldr	r2, [r7, #0]
 8003fcc:	4413      	add	r3, r2
 8003fce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003fd0:	f7fd fbf4 	bl	80017bc <HAL_GetTick>
 8003fd4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003fd6:	4b39      	ldr	r3, [pc, #228]	; (80040bc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	015b      	lsls	r3, r3, #5
 8003fdc:	0d1b      	lsrs	r3, r3, #20
 8003fde:	69fa      	ldr	r2, [r7, #28]
 8003fe0:	fb02 f303 	mul.w	r3, r2, r3
 8003fe4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003fe6:	e054      	b.n	8004092 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fee:	d050      	beq.n	8004092 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ff0:	f7fd fbe4 	bl	80017bc <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	69bb      	ldr	r3, [r7, #24]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	69fa      	ldr	r2, [r7, #28]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d902      	bls.n	8004006 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d13d      	bne.n	8004082 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	685a      	ldr	r2, [r3, #4]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004014:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800401e:	d111      	bne.n	8004044 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004028:	d004      	beq.n	8004034 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004032:	d107      	bne.n	8004044 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004042:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004048:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800404c:	d10f      	bne.n	800406e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800405c:	601a      	str	r2, [r3, #0]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800406c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2201      	movs	r2, #1
 8004072:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2200      	movs	r2, #0
 800407a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e017      	b.n	80040b2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d101      	bne.n	800408c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004088:	2300      	movs	r3, #0
 800408a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	3b01      	subs	r3, #1
 8004090:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	689a      	ldr	r2, [r3, #8]
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	4013      	ands	r3, r2
 800409c:	68ba      	ldr	r2, [r7, #8]
 800409e:	429a      	cmp	r2, r3
 80040a0:	bf0c      	ite	eq
 80040a2:	2301      	moveq	r3, #1
 80040a4:	2300      	movne	r3, #0
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	461a      	mov	r2, r3
 80040aa:	79fb      	ldrb	r3, [r7, #7]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d19b      	bne.n	8003fe8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3720      	adds	r7, #32
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	20000000 	.word	0x20000000

080040c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b088      	sub	sp, #32
 80040c4:	af02      	add	r7, sp, #8
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	60b9      	str	r1, [r7, #8]
 80040ca:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80040cc:	4b1b      	ldr	r3, [pc, #108]	; (800413c <SPI_EndRxTxTransaction+0x7c>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a1b      	ldr	r2, [pc, #108]	; (8004140 <SPI_EndRxTxTransaction+0x80>)
 80040d2:	fba2 2303 	umull	r2, r3, r2, r3
 80040d6:	0d5b      	lsrs	r3, r3, #21
 80040d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80040dc:	fb02 f303 	mul.w	r3, r2, r3
 80040e0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040ea:	d112      	bne.n	8004112 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	9300      	str	r3, [sp, #0]
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	2200      	movs	r2, #0
 80040f4:	2180      	movs	r1, #128	; 0x80
 80040f6:	68f8      	ldr	r0, [r7, #12]
 80040f8:	f7ff ff5a 	bl	8003fb0 <SPI_WaitFlagStateUntilTimeout>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d016      	beq.n	8004130 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004106:	f043 0220 	orr.w	r2, r3, #32
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e00f      	b.n	8004132 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d00a      	beq.n	800412e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	3b01      	subs	r3, #1
 800411c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004128:	2b80      	cmp	r3, #128	; 0x80
 800412a:	d0f2      	beq.n	8004112 <SPI_EndRxTxTransaction+0x52>
 800412c:	e000      	b.n	8004130 <SPI_EndRxTxTransaction+0x70>
        break;
 800412e:	bf00      	nop
  }

  return HAL_OK;
 8004130:	2300      	movs	r3, #0
}
 8004132:	4618      	mov	r0, r3
 8004134:	3718      	adds	r7, #24
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	20000000 	.word	0x20000000
 8004140:	165e9f81 	.word	0x165e9f81

08004144 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b082      	sub	sp, #8
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d101      	bne.n	8004156 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e041      	b.n	80041da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800415c:	b2db      	uxtb	r3, r3
 800415e:	2b00      	cmp	r3, #0
 8004160:	d106      	bne.n	8004170 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 f839 	bl	80041e2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2202      	movs	r2, #2
 8004174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	3304      	adds	r3, #4
 8004180:	4619      	mov	r1, r3
 8004182:	4610      	mov	r0, r2
 8004184:	f000 f9ca 	bl	800451c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2201      	movs	r2, #1
 800418c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041d8:	2300      	movs	r3, #0
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3708      	adds	r7, #8
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}

080041e2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80041e2:	b480      	push	{r7}
 80041e4:	b083      	sub	sp, #12
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80041ea:	bf00      	nop
 80041ec:	370c      	adds	r7, #12
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr
	...

080041f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b085      	sub	sp, #20
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004206:	b2db      	uxtb	r3, r3
 8004208:	2b01      	cmp	r3, #1
 800420a:	d001      	beq.n	8004210 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e044      	b.n	800429a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2202      	movs	r2, #2
 8004214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	68da      	ldr	r2, [r3, #12]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f042 0201 	orr.w	r2, r2, #1
 8004226:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a1e      	ldr	r2, [pc, #120]	; (80042a8 <HAL_TIM_Base_Start_IT+0xb0>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d018      	beq.n	8004264 <HAL_TIM_Base_Start_IT+0x6c>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800423a:	d013      	beq.n	8004264 <HAL_TIM_Base_Start_IT+0x6c>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a1a      	ldr	r2, [pc, #104]	; (80042ac <HAL_TIM_Base_Start_IT+0xb4>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d00e      	beq.n	8004264 <HAL_TIM_Base_Start_IT+0x6c>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a19      	ldr	r2, [pc, #100]	; (80042b0 <HAL_TIM_Base_Start_IT+0xb8>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d009      	beq.n	8004264 <HAL_TIM_Base_Start_IT+0x6c>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a17      	ldr	r2, [pc, #92]	; (80042b4 <HAL_TIM_Base_Start_IT+0xbc>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d004      	beq.n	8004264 <HAL_TIM_Base_Start_IT+0x6c>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a16      	ldr	r2, [pc, #88]	; (80042b8 <HAL_TIM_Base_Start_IT+0xc0>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d111      	bne.n	8004288 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	f003 0307 	and.w	r3, r3, #7
 800426e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2b06      	cmp	r3, #6
 8004274:	d010      	beq.n	8004298 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f042 0201 	orr.w	r2, r2, #1
 8004284:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004286:	e007      	b.n	8004298 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f042 0201 	orr.w	r2, r2, #1
 8004296:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	3714      	adds	r7, #20
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr
 80042a6:	bf00      	nop
 80042a8:	40010000 	.word	0x40010000
 80042ac:	40000400 	.word	0x40000400
 80042b0:	40000800 	.word	0x40000800
 80042b4:	40000c00 	.word	0x40000c00
 80042b8:	40014000 	.word	0x40014000

080042bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b082      	sub	sp, #8
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	691b      	ldr	r3, [r3, #16]
 80042ca:	f003 0302 	and.w	r3, r3, #2
 80042ce:	2b02      	cmp	r3, #2
 80042d0:	d122      	bne.n	8004318 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	f003 0302 	and.w	r3, r3, #2
 80042dc:	2b02      	cmp	r3, #2
 80042de:	d11b      	bne.n	8004318 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f06f 0202 	mvn.w	r2, #2
 80042e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2201      	movs	r2, #1
 80042ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	699b      	ldr	r3, [r3, #24]
 80042f6:	f003 0303 	and.w	r3, r3, #3
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d003      	beq.n	8004306 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 f8ee 	bl	80044e0 <HAL_TIM_IC_CaptureCallback>
 8004304:	e005      	b.n	8004312 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f000 f8e0 	bl	80044cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f000 f8f1 	bl	80044f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2200      	movs	r2, #0
 8004316:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	691b      	ldr	r3, [r3, #16]
 800431e:	f003 0304 	and.w	r3, r3, #4
 8004322:	2b04      	cmp	r3, #4
 8004324:	d122      	bne.n	800436c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	f003 0304 	and.w	r3, r3, #4
 8004330:	2b04      	cmp	r3, #4
 8004332:	d11b      	bne.n	800436c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f06f 0204 	mvn.w	r2, #4
 800433c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2202      	movs	r2, #2
 8004342:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	699b      	ldr	r3, [r3, #24]
 800434a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800434e:	2b00      	cmp	r3, #0
 8004350:	d003      	beq.n	800435a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f000 f8c4 	bl	80044e0 <HAL_TIM_IC_CaptureCallback>
 8004358:	e005      	b.n	8004366 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f000 f8b6 	bl	80044cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f000 f8c7 	bl	80044f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	f003 0308 	and.w	r3, r3, #8
 8004376:	2b08      	cmp	r3, #8
 8004378:	d122      	bne.n	80043c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	f003 0308 	and.w	r3, r3, #8
 8004384:	2b08      	cmp	r3, #8
 8004386:	d11b      	bne.n	80043c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f06f 0208 	mvn.w	r2, #8
 8004390:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2204      	movs	r2, #4
 8004396:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	69db      	ldr	r3, [r3, #28]
 800439e:	f003 0303 	and.w	r3, r3, #3
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d003      	beq.n	80043ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f000 f89a 	bl	80044e0 <HAL_TIM_IC_CaptureCallback>
 80043ac:	e005      	b.n	80043ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f000 f88c 	bl	80044cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f000 f89d 	bl	80044f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2200      	movs	r2, #0
 80043be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	691b      	ldr	r3, [r3, #16]
 80043c6:	f003 0310 	and.w	r3, r3, #16
 80043ca:	2b10      	cmp	r3, #16
 80043cc:	d122      	bne.n	8004414 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	f003 0310 	and.w	r3, r3, #16
 80043d8:	2b10      	cmp	r3, #16
 80043da:	d11b      	bne.n	8004414 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f06f 0210 	mvn.w	r2, #16
 80043e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2208      	movs	r2, #8
 80043ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	69db      	ldr	r3, [r3, #28]
 80043f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d003      	beq.n	8004402 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f000 f870 	bl	80044e0 <HAL_TIM_IC_CaptureCallback>
 8004400:	e005      	b.n	800440e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f000 f862 	bl	80044cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f000 f873 	bl	80044f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	f003 0301 	and.w	r3, r3, #1
 800441e:	2b01      	cmp	r3, #1
 8004420:	d10e      	bne.n	8004440 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	f003 0301 	and.w	r3, r3, #1
 800442c:	2b01      	cmp	r3, #1
 800442e:	d107      	bne.n	8004440 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f06f 0201 	mvn.w	r2, #1
 8004438:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f7fc fe56 	bl	80010ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800444a:	2b80      	cmp	r3, #128	; 0x80
 800444c:	d10e      	bne.n	800446c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004458:	2b80      	cmp	r3, #128	; 0x80
 800445a:	d107      	bne.n	800446c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004464:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f000 f8e2 	bl	8004630 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	691b      	ldr	r3, [r3, #16]
 8004472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004476:	2b40      	cmp	r3, #64	; 0x40
 8004478:	d10e      	bne.n	8004498 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004484:	2b40      	cmp	r3, #64	; 0x40
 8004486:	d107      	bne.n	8004498 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004490:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 f838 	bl	8004508 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	691b      	ldr	r3, [r3, #16]
 800449e:	f003 0320 	and.w	r3, r3, #32
 80044a2:	2b20      	cmp	r3, #32
 80044a4:	d10e      	bne.n	80044c4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	f003 0320 	and.w	r3, r3, #32
 80044b0:	2b20      	cmp	r3, #32
 80044b2:	d107      	bne.n	80044c4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f06f 0220 	mvn.w	r2, #32
 80044bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f000 f8ac 	bl	800461c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044c4:	bf00      	nop
 80044c6:	3708      	adds	r7, #8
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}

080044cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80044d4:	bf00      	nop
 80044d6:	370c      	adds	r7, #12
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80044e8:	bf00      	nop
 80044ea:	370c      	adds	r7, #12
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80044fc:	bf00      	nop
 80044fe:	370c      	adds	r7, #12
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr

08004508 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004510:	bf00      	nop
 8004512:	370c      	adds	r7, #12
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr

0800451c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800451c:	b480      	push	{r7}
 800451e:	b085      	sub	sp, #20
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	4a34      	ldr	r2, [pc, #208]	; (8004600 <TIM_Base_SetConfig+0xe4>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d00f      	beq.n	8004554 <TIM_Base_SetConfig+0x38>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800453a:	d00b      	beq.n	8004554 <TIM_Base_SetConfig+0x38>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	4a31      	ldr	r2, [pc, #196]	; (8004604 <TIM_Base_SetConfig+0xe8>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d007      	beq.n	8004554 <TIM_Base_SetConfig+0x38>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	4a30      	ldr	r2, [pc, #192]	; (8004608 <TIM_Base_SetConfig+0xec>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d003      	beq.n	8004554 <TIM_Base_SetConfig+0x38>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	4a2f      	ldr	r2, [pc, #188]	; (800460c <TIM_Base_SetConfig+0xf0>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d108      	bne.n	8004566 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800455a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	68fa      	ldr	r2, [r7, #12]
 8004562:	4313      	orrs	r3, r2
 8004564:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4a25      	ldr	r2, [pc, #148]	; (8004600 <TIM_Base_SetConfig+0xe4>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d01b      	beq.n	80045a6 <TIM_Base_SetConfig+0x8a>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004574:	d017      	beq.n	80045a6 <TIM_Base_SetConfig+0x8a>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	4a22      	ldr	r2, [pc, #136]	; (8004604 <TIM_Base_SetConfig+0xe8>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d013      	beq.n	80045a6 <TIM_Base_SetConfig+0x8a>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a21      	ldr	r2, [pc, #132]	; (8004608 <TIM_Base_SetConfig+0xec>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d00f      	beq.n	80045a6 <TIM_Base_SetConfig+0x8a>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a20      	ldr	r2, [pc, #128]	; (800460c <TIM_Base_SetConfig+0xf0>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d00b      	beq.n	80045a6 <TIM_Base_SetConfig+0x8a>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a1f      	ldr	r2, [pc, #124]	; (8004610 <TIM_Base_SetConfig+0xf4>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d007      	beq.n	80045a6 <TIM_Base_SetConfig+0x8a>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a1e      	ldr	r2, [pc, #120]	; (8004614 <TIM_Base_SetConfig+0xf8>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d003      	beq.n	80045a6 <TIM_Base_SetConfig+0x8a>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a1d      	ldr	r2, [pc, #116]	; (8004618 <TIM_Base_SetConfig+0xfc>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d108      	bne.n	80045b8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	68fa      	ldr	r2, [r7, #12]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	695b      	ldr	r3, [r3, #20]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	68fa      	ldr	r2, [r7, #12]
 80045ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	689a      	ldr	r2, [r3, #8]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	4a08      	ldr	r2, [pc, #32]	; (8004600 <TIM_Base_SetConfig+0xe4>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d103      	bne.n	80045ec <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	691a      	ldr	r2, [r3, #16]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2201      	movs	r2, #1
 80045f0:	615a      	str	r2, [r3, #20]
}
 80045f2:	bf00      	nop
 80045f4:	3714      	adds	r7, #20
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr
 80045fe:	bf00      	nop
 8004600:	40010000 	.word	0x40010000
 8004604:	40000400 	.word	0x40000400
 8004608:	40000800 	.word	0x40000800
 800460c:	40000c00 	.word	0x40000c00
 8004610:	40014000 	.word	0x40014000
 8004614:	40014400 	.word	0x40014400
 8004618:	40014800 	.word	0x40014800

0800461c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004624:	bf00      	nop
 8004626:	370c      	adds	r7, #12
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr

08004630 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004638:	bf00      	nop
 800463a:	370c      	adds	r7, #12
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr

08004644 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b082      	sub	sp, #8
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d101      	bne.n	8004656 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e03f      	b.n	80046d6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800465c:	b2db      	uxtb	r3, r3
 800465e:	2b00      	cmp	r3, #0
 8004660:	d106      	bne.n	8004670 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f7fc ffb6 	bl	80015dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2224      	movs	r2, #36	; 0x24
 8004674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	68da      	ldr	r2, [r3, #12]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004686:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f000 f929 	bl	80048e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	691a      	ldr	r2, [r3, #16]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800469c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	695a      	ldr	r2, [r3, #20]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80046ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	68da      	ldr	r2, [r3, #12]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2220      	movs	r2, #32
 80046c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2220      	movs	r2, #32
 80046d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80046d4:	2300      	movs	r3, #0
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3708      	adds	r7, #8
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}

080046de <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046de:	b580      	push	{r7, lr}
 80046e0:	b08a      	sub	sp, #40	; 0x28
 80046e2:	af02      	add	r7, sp, #8
 80046e4:	60f8      	str	r0, [r7, #12]
 80046e6:	60b9      	str	r1, [r7, #8]
 80046e8:	603b      	str	r3, [r7, #0]
 80046ea:	4613      	mov	r3, r2
 80046ec:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80046ee:	2300      	movs	r3, #0
 80046f0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	2b20      	cmp	r3, #32
 80046fc:	d17c      	bne.n	80047f8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d002      	beq.n	800470a <HAL_UART_Transmit+0x2c>
 8004704:	88fb      	ldrh	r3, [r7, #6]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d101      	bne.n	800470e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e075      	b.n	80047fa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004714:	2b01      	cmp	r3, #1
 8004716:	d101      	bne.n	800471c <HAL_UART_Transmit+0x3e>
 8004718:	2302      	movs	r3, #2
 800471a:	e06e      	b.n	80047fa <HAL_UART_Transmit+0x11c>
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2200      	movs	r2, #0
 8004728:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2221      	movs	r2, #33	; 0x21
 800472e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004732:	f7fd f843 	bl	80017bc <HAL_GetTick>
 8004736:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	88fa      	ldrh	r2, [r7, #6]
 800473c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	88fa      	ldrh	r2, [r7, #6]
 8004742:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800474c:	d108      	bne.n	8004760 <HAL_UART_Transmit+0x82>
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	691b      	ldr	r3, [r3, #16]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d104      	bne.n	8004760 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004756:	2300      	movs	r3, #0
 8004758:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	61bb      	str	r3, [r7, #24]
 800475e:	e003      	b.n	8004768 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004764:	2300      	movs	r3, #0
 8004766:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2200      	movs	r2, #0
 800476c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004770:	e02a      	b.n	80047c8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	9300      	str	r3, [sp, #0]
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	2200      	movs	r2, #0
 800477a:	2180      	movs	r1, #128	; 0x80
 800477c:	68f8      	ldr	r0, [r7, #12]
 800477e:	f000 f840 	bl	8004802 <UART_WaitOnFlagUntilTimeout>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d001      	beq.n	800478c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004788:	2303      	movs	r3, #3
 800478a:	e036      	b.n	80047fa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d10b      	bne.n	80047aa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004792:	69bb      	ldr	r3, [r7, #24]
 8004794:	881b      	ldrh	r3, [r3, #0]
 8004796:	461a      	mov	r2, r3
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047a0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80047a2:	69bb      	ldr	r3, [r7, #24]
 80047a4:	3302      	adds	r3, #2
 80047a6:	61bb      	str	r3, [r7, #24]
 80047a8:	e007      	b.n	80047ba <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	781a      	ldrb	r2, [r3, #0]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	3301      	adds	r3, #1
 80047b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80047be:	b29b      	uxth	r3, r3
 80047c0:	3b01      	subs	r3, #1
 80047c2:	b29a      	uxth	r2, r3
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d1cf      	bne.n	8004772 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	9300      	str	r3, [sp, #0]
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	2200      	movs	r2, #0
 80047da:	2140      	movs	r1, #64	; 0x40
 80047dc:	68f8      	ldr	r0, [r7, #12]
 80047de:	f000 f810 	bl	8004802 <UART_WaitOnFlagUntilTimeout>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d001      	beq.n	80047ec <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80047e8:	2303      	movs	r3, #3
 80047ea:	e006      	b.n	80047fa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2220      	movs	r2, #32
 80047f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80047f4:	2300      	movs	r3, #0
 80047f6:	e000      	b.n	80047fa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80047f8:	2302      	movs	r3, #2
  }
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3720      	adds	r7, #32
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}

08004802 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004802:	b580      	push	{r7, lr}
 8004804:	b090      	sub	sp, #64	; 0x40
 8004806:	af00      	add	r7, sp, #0
 8004808:	60f8      	str	r0, [r7, #12]
 800480a:	60b9      	str	r1, [r7, #8]
 800480c:	603b      	str	r3, [r7, #0]
 800480e:	4613      	mov	r3, r2
 8004810:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004812:	e050      	b.n	80048b6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004814:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800481a:	d04c      	beq.n	80048b6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800481c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800481e:	2b00      	cmp	r3, #0
 8004820:	d007      	beq.n	8004832 <UART_WaitOnFlagUntilTimeout+0x30>
 8004822:	f7fc ffcb 	bl	80017bc <HAL_GetTick>
 8004826:	4602      	mov	r2, r0
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	1ad3      	subs	r3, r2, r3
 800482c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800482e:	429a      	cmp	r2, r3
 8004830:	d241      	bcs.n	80048b6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	330c      	adds	r3, #12
 8004838:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800483a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800483c:	e853 3f00 	ldrex	r3, [r3]
 8004840:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004844:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004848:	63fb      	str	r3, [r7, #60]	; 0x3c
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	330c      	adds	r3, #12
 8004850:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004852:	637a      	str	r2, [r7, #52]	; 0x34
 8004854:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004856:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004858:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800485a:	e841 2300 	strex	r3, r2, [r1]
 800485e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004862:	2b00      	cmp	r3, #0
 8004864:	d1e5      	bne.n	8004832 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	3314      	adds	r3, #20
 800486c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	e853 3f00 	ldrex	r3, [r3]
 8004874:	613b      	str	r3, [r7, #16]
   return(result);
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	f023 0301 	bic.w	r3, r3, #1
 800487c:	63bb      	str	r3, [r7, #56]	; 0x38
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	3314      	adds	r3, #20
 8004884:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004886:	623a      	str	r2, [r7, #32]
 8004888:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800488a:	69f9      	ldr	r1, [r7, #28]
 800488c:	6a3a      	ldr	r2, [r7, #32]
 800488e:	e841 2300 	strex	r3, r2, [r1]
 8004892:	61bb      	str	r3, [r7, #24]
   return(result);
 8004894:	69bb      	ldr	r3, [r7, #24]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d1e5      	bne.n	8004866 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2220      	movs	r2, #32
 800489e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2220      	movs	r2, #32
 80048a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2200      	movs	r2, #0
 80048ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80048b2:	2303      	movs	r3, #3
 80048b4:	e00f      	b.n	80048d6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	4013      	ands	r3, r2
 80048c0:	68ba      	ldr	r2, [r7, #8]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	bf0c      	ite	eq
 80048c6:	2301      	moveq	r3, #1
 80048c8:	2300      	movne	r3, #0
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	461a      	mov	r2, r3
 80048ce:	79fb      	ldrb	r3, [r7, #7]
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d09f      	beq.n	8004814 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80048d4:	2300      	movs	r3, #0
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3740      	adds	r7, #64	; 0x40
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
	...

080048e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048e4:	b0c0      	sub	sp, #256	; 0x100
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	691b      	ldr	r3, [r3, #16]
 80048f4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80048f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048fc:	68d9      	ldr	r1, [r3, #12]
 80048fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	ea40 0301 	orr.w	r3, r0, r1
 8004908:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800490a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800490e:	689a      	ldr	r2, [r3, #8]
 8004910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004914:	691b      	ldr	r3, [r3, #16]
 8004916:	431a      	orrs	r2, r3
 8004918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800491c:	695b      	ldr	r3, [r3, #20]
 800491e:	431a      	orrs	r2, r3
 8004920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004924:	69db      	ldr	r3, [r3, #28]
 8004926:	4313      	orrs	r3, r2
 8004928:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800492c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004938:	f021 010c 	bic.w	r1, r1, #12
 800493c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004946:	430b      	orrs	r3, r1
 8004948:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800494a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	695b      	ldr	r3, [r3, #20]
 8004952:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004956:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800495a:	6999      	ldr	r1, [r3, #24]
 800495c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	ea40 0301 	orr.w	r3, r0, r1
 8004966:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	4b8f      	ldr	r3, [pc, #572]	; (8004bac <UART_SetConfig+0x2cc>)
 8004970:	429a      	cmp	r2, r3
 8004972:	d005      	beq.n	8004980 <UART_SetConfig+0xa0>
 8004974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	4b8d      	ldr	r3, [pc, #564]	; (8004bb0 <UART_SetConfig+0x2d0>)
 800497c:	429a      	cmp	r2, r3
 800497e:	d104      	bne.n	800498a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004980:	f7ff f8fc 	bl	8003b7c <HAL_RCC_GetPCLK2Freq>
 8004984:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004988:	e003      	b.n	8004992 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800498a:	f7ff f8e3 	bl	8003b54 <HAL_RCC_GetPCLK1Freq>
 800498e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004996:	69db      	ldr	r3, [r3, #28]
 8004998:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800499c:	f040 810c 	bne.w	8004bb8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80049a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049a4:	2200      	movs	r2, #0
 80049a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80049aa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80049ae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80049b2:	4622      	mov	r2, r4
 80049b4:	462b      	mov	r3, r5
 80049b6:	1891      	adds	r1, r2, r2
 80049b8:	65b9      	str	r1, [r7, #88]	; 0x58
 80049ba:	415b      	adcs	r3, r3
 80049bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049be:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80049c2:	4621      	mov	r1, r4
 80049c4:	eb12 0801 	adds.w	r8, r2, r1
 80049c8:	4629      	mov	r1, r5
 80049ca:	eb43 0901 	adc.w	r9, r3, r1
 80049ce:	f04f 0200 	mov.w	r2, #0
 80049d2:	f04f 0300 	mov.w	r3, #0
 80049d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80049da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80049de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80049e2:	4690      	mov	r8, r2
 80049e4:	4699      	mov	r9, r3
 80049e6:	4623      	mov	r3, r4
 80049e8:	eb18 0303 	adds.w	r3, r8, r3
 80049ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80049f0:	462b      	mov	r3, r5
 80049f2:	eb49 0303 	adc.w	r3, r9, r3
 80049f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80049fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004a06:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004a0a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004a0e:	460b      	mov	r3, r1
 8004a10:	18db      	adds	r3, r3, r3
 8004a12:	653b      	str	r3, [r7, #80]	; 0x50
 8004a14:	4613      	mov	r3, r2
 8004a16:	eb42 0303 	adc.w	r3, r2, r3
 8004a1a:	657b      	str	r3, [r7, #84]	; 0x54
 8004a1c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004a20:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004a24:	f7fc f8c8 	bl	8000bb8 <__aeabi_uldivmod>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	460b      	mov	r3, r1
 8004a2c:	4b61      	ldr	r3, [pc, #388]	; (8004bb4 <UART_SetConfig+0x2d4>)
 8004a2e:	fba3 2302 	umull	r2, r3, r3, r2
 8004a32:	095b      	lsrs	r3, r3, #5
 8004a34:	011c      	lsls	r4, r3, #4
 8004a36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a40:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004a44:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004a48:	4642      	mov	r2, r8
 8004a4a:	464b      	mov	r3, r9
 8004a4c:	1891      	adds	r1, r2, r2
 8004a4e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004a50:	415b      	adcs	r3, r3
 8004a52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a54:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004a58:	4641      	mov	r1, r8
 8004a5a:	eb12 0a01 	adds.w	sl, r2, r1
 8004a5e:	4649      	mov	r1, r9
 8004a60:	eb43 0b01 	adc.w	fp, r3, r1
 8004a64:	f04f 0200 	mov.w	r2, #0
 8004a68:	f04f 0300 	mov.w	r3, #0
 8004a6c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004a70:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004a74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a78:	4692      	mov	sl, r2
 8004a7a:	469b      	mov	fp, r3
 8004a7c:	4643      	mov	r3, r8
 8004a7e:	eb1a 0303 	adds.w	r3, sl, r3
 8004a82:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a86:	464b      	mov	r3, r9
 8004a88:	eb4b 0303 	adc.w	r3, fp, r3
 8004a8c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	2200      	movs	r2, #0
 8004a98:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a9c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004aa0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004aa4:	460b      	mov	r3, r1
 8004aa6:	18db      	adds	r3, r3, r3
 8004aa8:	643b      	str	r3, [r7, #64]	; 0x40
 8004aaa:	4613      	mov	r3, r2
 8004aac:	eb42 0303 	adc.w	r3, r2, r3
 8004ab0:	647b      	str	r3, [r7, #68]	; 0x44
 8004ab2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004ab6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004aba:	f7fc f87d 	bl	8000bb8 <__aeabi_uldivmod>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	460b      	mov	r3, r1
 8004ac2:	4611      	mov	r1, r2
 8004ac4:	4b3b      	ldr	r3, [pc, #236]	; (8004bb4 <UART_SetConfig+0x2d4>)
 8004ac6:	fba3 2301 	umull	r2, r3, r3, r1
 8004aca:	095b      	lsrs	r3, r3, #5
 8004acc:	2264      	movs	r2, #100	; 0x64
 8004ace:	fb02 f303 	mul.w	r3, r2, r3
 8004ad2:	1acb      	subs	r3, r1, r3
 8004ad4:	00db      	lsls	r3, r3, #3
 8004ad6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004ada:	4b36      	ldr	r3, [pc, #216]	; (8004bb4 <UART_SetConfig+0x2d4>)
 8004adc:	fba3 2302 	umull	r2, r3, r3, r2
 8004ae0:	095b      	lsrs	r3, r3, #5
 8004ae2:	005b      	lsls	r3, r3, #1
 8004ae4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ae8:	441c      	add	r4, r3
 8004aea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004aee:	2200      	movs	r2, #0
 8004af0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004af4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004af8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004afc:	4642      	mov	r2, r8
 8004afe:	464b      	mov	r3, r9
 8004b00:	1891      	adds	r1, r2, r2
 8004b02:	63b9      	str	r1, [r7, #56]	; 0x38
 8004b04:	415b      	adcs	r3, r3
 8004b06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b08:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004b0c:	4641      	mov	r1, r8
 8004b0e:	1851      	adds	r1, r2, r1
 8004b10:	6339      	str	r1, [r7, #48]	; 0x30
 8004b12:	4649      	mov	r1, r9
 8004b14:	414b      	adcs	r3, r1
 8004b16:	637b      	str	r3, [r7, #52]	; 0x34
 8004b18:	f04f 0200 	mov.w	r2, #0
 8004b1c:	f04f 0300 	mov.w	r3, #0
 8004b20:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004b24:	4659      	mov	r1, fp
 8004b26:	00cb      	lsls	r3, r1, #3
 8004b28:	4651      	mov	r1, sl
 8004b2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b2e:	4651      	mov	r1, sl
 8004b30:	00ca      	lsls	r2, r1, #3
 8004b32:	4610      	mov	r0, r2
 8004b34:	4619      	mov	r1, r3
 8004b36:	4603      	mov	r3, r0
 8004b38:	4642      	mov	r2, r8
 8004b3a:	189b      	adds	r3, r3, r2
 8004b3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b40:	464b      	mov	r3, r9
 8004b42:	460a      	mov	r2, r1
 8004b44:	eb42 0303 	adc.w	r3, r2, r3
 8004b48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004b58:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004b5c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004b60:	460b      	mov	r3, r1
 8004b62:	18db      	adds	r3, r3, r3
 8004b64:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b66:	4613      	mov	r3, r2
 8004b68:	eb42 0303 	adc.w	r3, r2, r3
 8004b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b6e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b72:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004b76:	f7fc f81f 	bl	8000bb8 <__aeabi_uldivmod>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	4b0d      	ldr	r3, [pc, #52]	; (8004bb4 <UART_SetConfig+0x2d4>)
 8004b80:	fba3 1302 	umull	r1, r3, r3, r2
 8004b84:	095b      	lsrs	r3, r3, #5
 8004b86:	2164      	movs	r1, #100	; 0x64
 8004b88:	fb01 f303 	mul.w	r3, r1, r3
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	00db      	lsls	r3, r3, #3
 8004b90:	3332      	adds	r3, #50	; 0x32
 8004b92:	4a08      	ldr	r2, [pc, #32]	; (8004bb4 <UART_SetConfig+0x2d4>)
 8004b94:	fba2 2303 	umull	r2, r3, r2, r3
 8004b98:	095b      	lsrs	r3, r3, #5
 8004b9a:	f003 0207 	and.w	r2, r3, #7
 8004b9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4422      	add	r2, r4
 8004ba6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004ba8:	e105      	b.n	8004db6 <UART_SetConfig+0x4d6>
 8004baa:	bf00      	nop
 8004bac:	40011000 	.word	0x40011000
 8004bb0:	40011400 	.word	0x40011400
 8004bb4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004bb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004bc2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004bc6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004bca:	4642      	mov	r2, r8
 8004bcc:	464b      	mov	r3, r9
 8004bce:	1891      	adds	r1, r2, r2
 8004bd0:	6239      	str	r1, [r7, #32]
 8004bd2:	415b      	adcs	r3, r3
 8004bd4:	627b      	str	r3, [r7, #36]	; 0x24
 8004bd6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004bda:	4641      	mov	r1, r8
 8004bdc:	1854      	adds	r4, r2, r1
 8004bde:	4649      	mov	r1, r9
 8004be0:	eb43 0501 	adc.w	r5, r3, r1
 8004be4:	f04f 0200 	mov.w	r2, #0
 8004be8:	f04f 0300 	mov.w	r3, #0
 8004bec:	00eb      	lsls	r3, r5, #3
 8004bee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bf2:	00e2      	lsls	r2, r4, #3
 8004bf4:	4614      	mov	r4, r2
 8004bf6:	461d      	mov	r5, r3
 8004bf8:	4643      	mov	r3, r8
 8004bfa:	18e3      	adds	r3, r4, r3
 8004bfc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004c00:	464b      	mov	r3, r9
 8004c02:	eb45 0303 	adc.w	r3, r5, r3
 8004c06:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004c0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004c16:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004c1a:	f04f 0200 	mov.w	r2, #0
 8004c1e:	f04f 0300 	mov.w	r3, #0
 8004c22:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004c26:	4629      	mov	r1, r5
 8004c28:	008b      	lsls	r3, r1, #2
 8004c2a:	4621      	mov	r1, r4
 8004c2c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c30:	4621      	mov	r1, r4
 8004c32:	008a      	lsls	r2, r1, #2
 8004c34:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004c38:	f7fb ffbe 	bl	8000bb8 <__aeabi_uldivmod>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	460b      	mov	r3, r1
 8004c40:	4b60      	ldr	r3, [pc, #384]	; (8004dc4 <UART_SetConfig+0x4e4>)
 8004c42:	fba3 2302 	umull	r2, r3, r3, r2
 8004c46:	095b      	lsrs	r3, r3, #5
 8004c48:	011c      	lsls	r4, r3, #4
 8004c4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004c54:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004c58:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004c5c:	4642      	mov	r2, r8
 8004c5e:	464b      	mov	r3, r9
 8004c60:	1891      	adds	r1, r2, r2
 8004c62:	61b9      	str	r1, [r7, #24]
 8004c64:	415b      	adcs	r3, r3
 8004c66:	61fb      	str	r3, [r7, #28]
 8004c68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c6c:	4641      	mov	r1, r8
 8004c6e:	1851      	adds	r1, r2, r1
 8004c70:	6139      	str	r1, [r7, #16]
 8004c72:	4649      	mov	r1, r9
 8004c74:	414b      	adcs	r3, r1
 8004c76:	617b      	str	r3, [r7, #20]
 8004c78:	f04f 0200 	mov.w	r2, #0
 8004c7c:	f04f 0300 	mov.w	r3, #0
 8004c80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c84:	4659      	mov	r1, fp
 8004c86:	00cb      	lsls	r3, r1, #3
 8004c88:	4651      	mov	r1, sl
 8004c8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c8e:	4651      	mov	r1, sl
 8004c90:	00ca      	lsls	r2, r1, #3
 8004c92:	4610      	mov	r0, r2
 8004c94:	4619      	mov	r1, r3
 8004c96:	4603      	mov	r3, r0
 8004c98:	4642      	mov	r2, r8
 8004c9a:	189b      	adds	r3, r3, r2
 8004c9c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004ca0:	464b      	mov	r3, r9
 8004ca2:	460a      	mov	r2, r1
 8004ca4:	eb42 0303 	adc.w	r3, r2, r3
 8004ca8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	67bb      	str	r3, [r7, #120]	; 0x78
 8004cb6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004cb8:	f04f 0200 	mov.w	r2, #0
 8004cbc:	f04f 0300 	mov.w	r3, #0
 8004cc0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004cc4:	4649      	mov	r1, r9
 8004cc6:	008b      	lsls	r3, r1, #2
 8004cc8:	4641      	mov	r1, r8
 8004cca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cce:	4641      	mov	r1, r8
 8004cd0:	008a      	lsls	r2, r1, #2
 8004cd2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004cd6:	f7fb ff6f 	bl	8000bb8 <__aeabi_uldivmod>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	460b      	mov	r3, r1
 8004cde:	4b39      	ldr	r3, [pc, #228]	; (8004dc4 <UART_SetConfig+0x4e4>)
 8004ce0:	fba3 1302 	umull	r1, r3, r3, r2
 8004ce4:	095b      	lsrs	r3, r3, #5
 8004ce6:	2164      	movs	r1, #100	; 0x64
 8004ce8:	fb01 f303 	mul.w	r3, r1, r3
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	011b      	lsls	r3, r3, #4
 8004cf0:	3332      	adds	r3, #50	; 0x32
 8004cf2:	4a34      	ldr	r2, [pc, #208]	; (8004dc4 <UART_SetConfig+0x4e4>)
 8004cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8004cf8:	095b      	lsrs	r3, r3, #5
 8004cfa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004cfe:	441c      	add	r4, r3
 8004d00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d04:	2200      	movs	r2, #0
 8004d06:	673b      	str	r3, [r7, #112]	; 0x70
 8004d08:	677a      	str	r2, [r7, #116]	; 0x74
 8004d0a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004d0e:	4642      	mov	r2, r8
 8004d10:	464b      	mov	r3, r9
 8004d12:	1891      	adds	r1, r2, r2
 8004d14:	60b9      	str	r1, [r7, #8]
 8004d16:	415b      	adcs	r3, r3
 8004d18:	60fb      	str	r3, [r7, #12]
 8004d1a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d1e:	4641      	mov	r1, r8
 8004d20:	1851      	adds	r1, r2, r1
 8004d22:	6039      	str	r1, [r7, #0]
 8004d24:	4649      	mov	r1, r9
 8004d26:	414b      	adcs	r3, r1
 8004d28:	607b      	str	r3, [r7, #4]
 8004d2a:	f04f 0200 	mov.w	r2, #0
 8004d2e:	f04f 0300 	mov.w	r3, #0
 8004d32:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004d36:	4659      	mov	r1, fp
 8004d38:	00cb      	lsls	r3, r1, #3
 8004d3a:	4651      	mov	r1, sl
 8004d3c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d40:	4651      	mov	r1, sl
 8004d42:	00ca      	lsls	r2, r1, #3
 8004d44:	4610      	mov	r0, r2
 8004d46:	4619      	mov	r1, r3
 8004d48:	4603      	mov	r3, r0
 8004d4a:	4642      	mov	r2, r8
 8004d4c:	189b      	adds	r3, r3, r2
 8004d4e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d50:	464b      	mov	r3, r9
 8004d52:	460a      	mov	r2, r1
 8004d54:	eb42 0303 	adc.w	r3, r2, r3
 8004d58:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	663b      	str	r3, [r7, #96]	; 0x60
 8004d64:	667a      	str	r2, [r7, #100]	; 0x64
 8004d66:	f04f 0200 	mov.w	r2, #0
 8004d6a:	f04f 0300 	mov.w	r3, #0
 8004d6e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004d72:	4649      	mov	r1, r9
 8004d74:	008b      	lsls	r3, r1, #2
 8004d76:	4641      	mov	r1, r8
 8004d78:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d7c:	4641      	mov	r1, r8
 8004d7e:	008a      	lsls	r2, r1, #2
 8004d80:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004d84:	f7fb ff18 	bl	8000bb8 <__aeabi_uldivmod>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	460b      	mov	r3, r1
 8004d8c:	4b0d      	ldr	r3, [pc, #52]	; (8004dc4 <UART_SetConfig+0x4e4>)
 8004d8e:	fba3 1302 	umull	r1, r3, r3, r2
 8004d92:	095b      	lsrs	r3, r3, #5
 8004d94:	2164      	movs	r1, #100	; 0x64
 8004d96:	fb01 f303 	mul.w	r3, r1, r3
 8004d9a:	1ad3      	subs	r3, r2, r3
 8004d9c:	011b      	lsls	r3, r3, #4
 8004d9e:	3332      	adds	r3, #50	; 0x32
 8004da0:	4a08      	ldr	r2, [pc, #32]	; (8004dc4 <UART_SetConfig+0x4e4>)
 8004da2:	fba2 2303 	umull	r2, r3, r2, r3
 8004da6:	095b      	lsrs	r3, r3, #5
 8004da8:	f003 020f 	and.w	r2, r3, #15
 8004dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4422      	add	r2, r4
 8004db4:	609a      	str	r2, [r3, #8]
}
 8004db6:	bf00      	nop
 8004db8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004dc2:	bf00      	nop
 8004dc4:	51eb851f 	.word	0x51eb851f

08004dc8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004dc8:	b084      	sub	sp, #16
 8004dca:	b580      	push	{r7, lr}
 8004dcc:	b084      	sub	sp, #16
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	6078      	str	r0, [r7, #4]
 8004dd2:	f107 001c 	add.w	r0, r7, #28
 8004dd6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d122      	bne.n	8004e26 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004df4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004e08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d105      	bne.n	8004e1a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	68db      	ldr	r3, [r3, #12]
 8004e12:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f001 fbee 	bl	80065fc <USB_CoreReset>
 8004e20:	4603      	mov	r3, r0
 8004e22:	73fb      	strb	r3, [r7, #15]
 8004e24:	e01a      	b.n	8004e5c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f001 fbe2 	bl	80065fc <USB_CoreReset>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004e3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d106      	bne.n	8004e50 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e46:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	639a      	str	r2, [r3, #56]	; 0x38
 8004e4e:	e005      	b.n	8004e5c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e54:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d10b      	bne.n	8004e7a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	f043 0206 	orr.w	r2, r3, #6
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	f043 0220 	orr.w	r2, r3, #32
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3710      	adds	r7, #16
 8004e80:	46bd      	mov	sp, r7
 8004e82:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e86:	b004      	add	sp, #16
 8004e88:	4770      	bx	lr
	...

08004e8c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b087      	sub	sp, #28
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	60f8      	str	r0, [r7, #12]
 8004e94:	60b9      	str	r1, [r7, #8]
 8004e96:	4613      	mov	r3, r2
 8004e98:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004e9a:	79fb      	ldrb	r3, [r7, #7]
 8004e9c:	2b02      	cmp	r3, #2
 8004e9e:	d165      	bne.n	8004f6c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	4a41      	ldr	r2, [pc, #260]	; (8004fa8 <USB_SetTurnaroundTime+0x11c>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d906      	bls.n	8004eb6 <USB_SetTurnaroundTime+0x2a>
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	4a40      	ldr	r2, [pc, #256]	; (8004fac <USB_SetTurnaroundTime+0x120>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d202      	bcs.n	8004eb6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004eb0:	230f      	movs	r3, #15
 8004eb2:	617b      	str	r3, [r7, #20]
 8004eb4:	e062      	b.n	8004f7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	4a3c      	ldr	r2, [pc, #240]	; (8004fac <USB_SetTurnaroundTime+0x120>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d306      	bcc.n	8004ecc <USB_SetTurnaroundTime+0x40>
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	4a3b      	ldr	r2, [pc, #236]	; (8004fb0 <USB_SetTurnaroundTime+0x124>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d202      	bcs.n	8004ecc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004ec6:	230e      	movs	r3, #14
 8004ec8:	617b      	str	r3, [r7, #20]
 8004eca:	e057      	b.n	8004f7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	4a38      	ldr	r2, [pc, #224]	; (8004fb0 <USB_SetTurnaroundTime+0x124>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d306      	bcc.n	8004ee2 <USB_SetTurnaroundTime+0x56>
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	4a37      	ldr	r2, [pc, #220]	; (8004fb4 <USB_SetTurnaroundTime+0x128>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d202      	bcs.n	8004ee2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004edc:	230d      	movs	r3, #13
 8004ede:	617b      	str	r3, [r7, #20]
 8004ee0:	e04c      	b.n	8004f7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	4a33      	ldr	r2, [pc, #204]	; (8004fb4 <USB_SetTurnaroundTime+0x128>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d306      	bcc.n	8004ef8 <USB_SetTurnaroundTime+0x6c>
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	4a32      	ldr	r2, [pc, #200]	; (8004fb8 <USB_SetTurnaroundTime+0x12c>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d802      	bhi.n	8004ef8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004ef2:	230c      	movs	r3, #12
 8004ef4:	617b      	str	r3, [r7, #20]
 8004ef6:	e041      	b.n	8004f7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	4a2f      	ldr	r2, [pc, #188]	; (8004fb8 <USB_SetTurnaroundTime+0x12c>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d906      	bls.n	8004f0e <USB_SetTurnaroundTime+0x82>
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	4a2e      	ldr	r2, [pc, #184]	; (8004fbc <USB_SetTurnaroundTime+0x130>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d802      	bhi.n	8004f0e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004f08:	230b      	movs	r3, #11
 8004f0a:	617b      	str	r3, [r7, #20]
 8004f0c:	e036      	b.n	8004f7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	4a2a      	ldr	r2, [pc, #168]	; (8004fbc <USB_SetTurnaroundTime+0x130>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d906      	bls.n	8004f24 <USB_SetTurnaroundTime+0x98>
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	4a29      	ldr	r2, [pc, #164]	; (8004fc0 <USB_SetTurnaroundTime+0x134>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d802      	bhi.n	8004f24 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004f1e:	230a      	movs	r3, #10
 8004f20:	617b      	str	r3, [r7, #20]
 8004f22:	e02b      	b.n	8004f7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	4a26      	ldr	r2, [pc, #152]	; (8004fc0 <USB_SetTurnaroundTime+0x134>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d906      	bls.n	8004f3a <USB_SetTurnaroundTime+0xae>
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	4a25      	ldr	r2, [pc, #148]	; (8004fc4 <USB_SetTurnaroundTime+0x138>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d202      	bcs.n	8004f3a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004f34:	2309      	movs	r3, #9
 8004f36:	617b      	str	r3, [r7, #20]
 8004f38:	e020      	b.n	8004f7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	4a21      	ldr	r2, [pc, #132]	; (8004fc4 <USB_SetTurnaroundTime+0x138>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d306      	bcc.n	8004f50 <USB_SetTurnaroundTime+0xc4>
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	4a20      	ldr	r2, [pc, #128]	; (8004fc8 <USB_SetTurnaroundTime+0x13c>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d802      	bhi.n	8004f50 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004f4a:	2308      	movs	r3, #8
 8004f4c:	617b      	str	r3, [r7, #20]
 8004f4e:	e015      	b.n	8004f7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	4a1d      	ldr	r2, [pc, #116]	; (8004fc8 <USB_SetTurnaroundTime+0x13c>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d906      	bls.n	8004f66 <USB_SetTurnaroundTime+0xda>
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	4a1c      	ldr	r2, [pc, #112]	; (8004fcc <USB_SetTurnaroundTime+0x140>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d202      	bcs.n	8004f66 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004f60:	2307      	movs	r3, #7
 8004f62:	617b      	str	r3, [r7, #20]
 8004f64:	e00a      	b.n	8004f7c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004f66:	2306      	movs	r3, #6
 8004f68:	617b      	str	r3, [r7, #20]
 8004f6a:	e007      	b.n	8004f7c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004f6c:	79fb      	ldrb	r3, [r7, #7]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d102      	bne.n	8004f78 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004f72:	2309      	movs	r3, #9
 8004f74:	617b      	str	r3, [r7, #20]
 8004f76:	e001      	b.n	8004f7c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004f78:	2309      	movs	r3, #9
 8004f7a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	68da      	ldr	r2, [r3, #12]
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	029b      	lsls	r3, r3, #10
 8004f90:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004f94:	431a      	orrs	r2, r3
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004f9a:	2300      	movs	r3, #0
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	371c      	adds	r7, #28
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr
 8004fa8:	00d8acbf 	.word	0x00d8acbf
 8004fac:	00e4e1c0 	.word	0x00e4e1c0
 8004fb0:	00f42400 	.word	0x00f42400
 8004fb4:	01067380 	.word	0x01067380
 8004fb8:	011a499f 	.word	0x011a499f
 8004fbc:	01312cff 	.word	0x01312cff
 8004fc0:	014ca43f 	.word	0x014ca43f
 8004fc4:	016e3600 	.word	0x016e3600
 8004fc8:	01a6ab1f 	.word	0x01a6ab1f
 8004fcc:	01e84800 	.word	0x01e84800

08004fd0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	f043 0201 	orr.w	r2, r3, #1
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004fe4:	2300      	movs	r3, #0
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	370c      	adds	r7, #12
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr

08004ff2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ff2:	b480      	push	{r7}
 8004ff4:	b083      	sub	sp, #12
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	f023 0201 	bic.w	r2, r3, #1
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005006:	2300      	movs	r3, #0
}
 8005008:	4618      	mov	r0, r3
 800500a:	370c      	adds	r7, #12
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr

08005014 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	460b      	mov	r3, r1
 800501e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005020:	2300      	movs	r3, #0
 8005022:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	68db      	ldr	r3, [r3, #12]
 8005028:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005030:	78fb      	ldrb	r3, [r7, #3]
 8005032:	2b01      	cmp	r3, #1
 8005034:	d115      	bne.n	8005062 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	68db      	ldr	r3, [r3, #12]
 800503a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005042:	2001      	movs	r0, #1
 8005044:	f7fc fbc6 	bl	80017d4 <HAL_Delay>
      ms++;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	3301      	adds	r3, #1
 800504c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f001 fa45 	bl	80064de <USB_GetMode>
 8005054:	4603      	mov	r3, r0
 8005056:	2b01      	cmp	r3, #1
 8005058:	d01e      	beq.n	8005098 <USB_SetCurrentMode+0x84>
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2b31      	cmp	r3, #49	; 0x31
 800505e:	d9f0      	bls.n	8005042 <USB_SetCurrentMode+0x2e>
 8005060:	e01a      	b.n	8005098 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005062:	78fb      	ldrb	r3, [r7, #3]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d115      	bne.n	8005094 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005074:	2001      	movs	r0, #1
 8005076:	f7fc fbad 	bl	80017d4 <HAL_Delay>
      ms++;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	3301      	adds	r3, #1
 800507e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f001 fa2c 	bl	80064de <USB_GetMode>
 8005086:	4603      	mov	r3, r0
 8005088:	2b00      	cmp	r3, #0
 800508a:	d005      	beq.n	8005098 <USB_SetCurrentMode+0x84>
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2b31      	cmp	r3, #49	; 0x31
 8005090:	d9f0      	bls.n	8005074 <USB_SetCurrentMode+0x60>
 8005092:	e001      	b.n	8005098 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e005      	b.n	80050a4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2b32      	cmp	r3, #50	; 0x32
 800509c:	d101      	bne.n	80050a2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e000      	b.n	80050a4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80050a2:	2300      	movs	r3, #0
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3710      	adds	r7, #16
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}

080050ac <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80050ac:	b084      	sub	sp, #16
 80050ae:	b580      	push	{r7, lr}
 80050b0:	b086      	sub	sp, #24
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	6078      	str	r0, [r7, #4]
 80050b6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80050ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80050be:	2300      	movs	r3, #0
 80050c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80050c6:	2300      	movs	r3, #0
 80050c8:	613b      	str	r3, [r7, #16]
 80050ca:	e009      	b.n	80050e0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80050cc:	687a      	ldr	r2, [r7, #4]
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	3340      	adds	r3, #64	; 0x40
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	4413      	add	r3, r2
 80050d6:	2200      	movs	r2, #0
 80050d8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	3301      	adds	r3, #1
 80050de:	613b      	str	r3, [r7, #16]
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	2b0e      	cmp	r3, #14
 80050e4:	d9f2      	bls.n	80050cc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80050e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d11c      	bne.n	8005126 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	68fa      	ldr	r2, [r7, #12]
 80050f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050fa:	f043 0302 	orr.w	r3, r3, #2
 80050fe:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005104:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005110:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800511c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	639a      	str	r2, [r3, #56]	; 0x38
 8005124:	e00b      	b.n	800513e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800512a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005136:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005144:	461a      	mov	r2, r3
 8005146:	2300      	movs	r3, #0
 8005148:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005150:	4619      	mov	r1, r3
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005158:	461a      	mov	r2, r3
 800515a:	680b      	ldr	r3, [r1, #0]
 800515c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800515e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005160:	2b01      	cmp	r3, #1
 8005162:	d10c      	bne.n	800517e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005166:	2b00      	cmp	r3, #0
 8005168:	d104      	bne.n	8005174 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800516a:	2100      	movs	r1, #0
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f000 f965 	bl	800543c <USB_SetDevSpeed>
 8005172:	e008      	b.n	8005186 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005174:	2101      	movs	r1, #1
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f000 f960 	bl	800543c <USB_SetDevSpeed>
 800517c:	e003      	b.n	8005186 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800517e:	2103      	movs	r1, #3
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f000 f95b 	bl	800543c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005186:	2110      	movs	r1, #16
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f000 f8f3 	bl	8005374 <USB_FlushTxFifo>
 800518e:	4603      	mov	r3, r0
 8005190:	2b00      	cmp	r3, #0
 8005192:	d001      	beq.n	8005198 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f000 f91f 	bl	80053dc <USB_FlushRxFifo>
 800519e:	4603      	mov	r3, r0
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d001      	beq.n	80051a8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051ae:	461a      	mov	r2, r3
 80051b0:	2300      	movs	r3, #0
 80051b2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051ba:	461a      	mov	r2, r3
 80051bc:	2300      	movs	r3, #0
 80051be:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051c6:	461a      	mov	r2, r3
 80051c8:	2300      	movs	r3, #0
 80051ca:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051cc:	2300      	movs	r3, #0
 80051ce:	613b      	str	r3, [r7, #16]
 80051d0:	e043      	b.n	800525a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	015a      	lsls	r2, r3, #5
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	4413      	add	r3, r2
 80051da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051e8:	d118      	bne.n	800521c <USB_DevInit+0x170>
    {
      if (i == 0U)
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d10a      	bne.n	8005206 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	015a      	lsls	r2, r3, #5
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	4413      	add	r3, r2
 80051f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051fc:	461a      	mov	r2, r3
 80051fe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005202:	6013      	str	r3, [r2, #0]
 8005204:	e013      	b.n	800522e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	015a      	lsls	r2, r3, #5
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	4413      	add	r3, r2
 800520e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005212:	461a      	mov	r2, r3
 8005214:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005218:	6013      	str	r3, [r2, #0]
 800521a:	e008      	b.n	800522e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	015a      	lsls	r2, r3, #5
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	4413      	add	r3, r2
 8005224:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005228:	461a      	mov	r2, r3
 800522a:	2300      	movs	r3, #0
 800522c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	015a      	lsls	r2, r3, #5
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	4413      	add	r3, r2
 8005236:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800523a:	461a      	mov	r2, r3
 800523c:	2300      	movs	r3, #0
 800523e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	015a      	lsls	r2, r3, #5
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	4413      	add	r3, r2
 8005248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800524c:	461a      	mov	r2, r3
 800524e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005252:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	3301      	adds	r3, #1
 8005258:	613b      	str	r3, [r7, #16]
 800525a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525c:	693a      	ldr	r2, [r7, #16]
 800525e:	429a      	cmp	r2, r3
 8005260:	d3b7      	bcc.n	80051d2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005262:	2300      	movs	r3, #0
 8005264:	613b      	str	r3, [r7, #16]
 8005266:	e043      	b.n	80052f0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	015a      	lsls	r2, r3, #5
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	4413      	add	r3, r2
 8005270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800527a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800527e:	d118      	bne.n	80052b2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d10a      	bne.n	800529c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	015a      	lsls	r2, r3, #5
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	4413      	add	r3, r2
 800528e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005292:	461a      	mov	r2, r3
 8005294:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005298:	6013      	str	r3, [r2, #0]
 800529a:	e013      	b.n	80052c4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	015a      	lsls	r2, r3, #5
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	4413      	add	r3, r2
 80052a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052a8:	461a      	mov	r2, r3
 80052aa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80052ae:	6013      	str	r3, [r2, #0]
 80052b0:	e008      	b.n	80052c4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	015a      	lsls	r2, r3, #5
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	4413      	add	r3, r2
 80052ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052be:	461a      	mov	r2, r3
 80052c0:	2300      	movs	r3, #0
 80052c2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	015a      	lsls	r2, r3, #5
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	4413      	add	r3, r2
 80052cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052d0:	461a      	mov	r2, r3
 80052d2:	2300      	movs	r3, #0
 80052d4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	015a      	lsls	r2, r3, #5
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	4413      	add	r3, r2
 80052de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052e2:	461a      	mov	r2, r3
 80052e4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80052e8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	3301      	adds	r3, #1
 80052ee:	613b      	str	r3, [r7, #16]
 80052f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f2:	693a      	ldr	r2, [r7, #16]
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d3b7      	bcc.n	8005268 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052fe:	691b      	ldr	r3, [r3, #16]
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005306:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800530a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2200      	movs	r2, #0
 8005310:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005318:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800531a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800531c:	2b00      	cmp	r3, #0
 800531e:	d105      	bne.n	800532c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	699b      	ldr	r3, [r3, #24]
 8005324:	f043 0210 	orr.w	r2, r3, #16
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	699a      	ldr	r2, [r3, #24]
 8005330:	4b0f      	ldr	r3, [pc, #60]	; (8005370 <USB_DevInit+0x2c4>)
 8005332:	4313      	orrs	r3, r2
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005338:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800533a:	2b00      	cmp	r3, #0
 800533c:	d005      	beq.n	800534a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	699b      	ldr	r3, [r3, #24]
 8005342:	f043 0208 	orr.w	r2, r3, #8
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800534a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800534c:	2b01      	cmp	r3, #1
 800534e:	d107      	bne.n	8005360 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	699b      	ldr	r3, [r3, #24]
 8005354:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005358:	f043 0304 	orr.w	r3, r3, #4
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005360:	7dfb      	ldrb	r3, [r7, #23]
}
 8005362:	4618      	mov	r0, r3
 8005364:	3718      	adds	r7, #24
 8005366:	46bd      	mov	sp, r7
 8005368:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800536c:	b004      	add	sp, #16
 800536e:	4770      	bx	lr
 8005370:	803c3800 	.word	0x803c3800

08005374 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005374:	b480      	push	{r7}
 8005376:	b085      	sub	sp, #20
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800537e:	2300      	movs	r3, #0
 8005380:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	3301      	adds	r3, #1
 8005386:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	4a13      	ldr	r2, [pc, #76]	; (80053d8 <USB_FlushTxFifo+0x64>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d901      	bls.n	8005394 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005390:	2303      	movs	r3, #3
 8005392:	e01b      	b.n	80053cc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	691b      	ldr	r3, [r3, #16]
 8005398:	2b00      	cmp	r3, #0
 800539a:	daf2      	bge.n	8005382 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800539c:	2300      	movs	r3, #0
 800539e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	019b      	lsls	r3, r3, #6
 80053a4:	f043 0220 	orr.w	r2, r3, #32
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	3301      	adds	r3, #1
 80053b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	4a08      	ldr	r2, [pc, #32]	; (80053d8 <USB_FlushTxFifo+0x64>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d901      	bls.n	80053be <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80053ba:	2303      	movs	r3, #3
 80053bc:	e006      	b.n	80053cc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	691b      	ldr	r3, [r3, #16]
 80053c2:	f003 0320 	and.w	r3, r3, #32
 80053c6:	2b20      	cmp	r3, #32
 80053c8:	d0f0      	beq.n	80053ac <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80053ca:	2300      	movs	r3, #0
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3714      	adds	r7, #20
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr
 80053d8:	00030d40 	.word	0x00030d40

080053dc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80053dc:	b480      	push	{r7}
 80053de:	b085      	sub	sp, #20
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80053e4:	2300      	movs	r3, #0
 80053e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	3301      	adds	r3, #1
 80053ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	4a11      	ldr	r2, [pc, #68]	; (8005438 <USB_FlushRxFifo+0x5c>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d901      	bls.n	80053fa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80053f6:	2303      	movs	r3, #3
 80053f8:	e018      	b.n	800542c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	691b      	ldr	r3, [r3, #16]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	daf2      	bge.n	80053e8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005402:	2300      	movs	r3, #0
 8005404:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2210      	movs	r2, #16
 800540a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	3301      	adds	r3, #1
 8005410:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	4a08      	ldr	r2, [pc, #32]	; (8005438 <USB_FlushRxFifo+0x5c>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d901      	bls.n	800541e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800541a:	2303      	movs	r3, #3
 800541c:	e006      	b.n	800542c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	f003 0310 	and.w	r3, r3, #16
 8005426:	2b10      	cmp	r3, #16
 8005428:	d0f0      	beq.n	800540c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800542a:	2300      	movs	r3, #0
}
 800542c:	4618      	mov	r0, r3
 800542e:	3714      	adds	r7, #20
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr
 8005438:	00030d40 	.word	0x00030d40

0800543c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800543c:	b480      	push	{r7}
 800543e:	b085      	sub	sp, #20
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	460b      	mov	r3, r1
 8005446:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	78fb      	ldrb	r3, [r7, #3]
 8005456:	68f9      	ldr	r1, [r7, #12]
 8005458:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800545c:	4313      	orrs	r3, r2
 800545e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005460:	2300      	movs	r3, #0
}
 8005462:	4618      	mov	r0, r3
 8005464:	3714      	adds	r7, #20
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr

0800546e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800546e:	b480      	push	{r7}
 8005470:	b087      	sub	sp, #28
 8005472:	af00      	add	r7, sp, #0
 8005474:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	f003 0306 	and.w	r3, r3, #6
 8005486:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d102      	bne.n	8005494 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800548e:	2300      	movs	r3, #0
 8005490:	75fb      	strb	r3, [r7, #23]
 8005492:	e00a      	b.n	80054aa <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2b02      	cmp	r3, #2
 8005498:	d002      	beq.n	80054a0 <USB_GetDevSpeed+0x32>
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2b06      	cmp	r3, #6
 800549e:	d102      	bne.n	80054a6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80054a0:	2302      	movs	r3, #2
 80054a2:	75fb      	strb	r3, [r7, #23]
 80054a4:	e001      	b.n	80054aa <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80054a6:	230f      	movs	r3, #15
 80054a8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80054aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	371c      	adds	r7, #28
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr

080054b8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b085      	sub	sp, #20
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	785b      	ldrb	r3, [r3, #1]
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d13a      	bne.n	800554a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054da:	69da      	ldr	r2, [r3, #28]
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	f003 030f 	and.w	r3, r3, #15
 80054e4:	2101      	movs	r1, #1
 80054e6:	fa01 f303 	lsl.w	r3, r1, r3
 80054ea:	b29b      	uxth	r3, r3
 80054ec:	68f9      	ldr	r1, [r7, #12]
 80054ee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054f2:	4313      	orrs	r3, r2
 80054f4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	015a      	lsls	r2, r3, #5
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	4413      	add	r3, r2
 80054fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005508:	2b00      	cmp	r3, #0
 800550a:	d155      	bne.n	80055b8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	015a      	lsls	r2, r3, #5
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	4413      	add	r3, r2
 8005514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	68db      	ldr	r3, [r3, #12]
 800551e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	791b      	ldrb	r3, [r3, #4]
 8005526:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005528:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	059b      	lsls	r3, r3, #22
 800552e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005530:	4313      	orrs	r3, r2
 8005532:	68ba      	ldr	r2, [r7, #8]
 8005534:	0151      	lsls	r1, r2, #5
 8005536:	68fa      	ldr	r2, [r7, #12]
 8005538:	440a      	add	r2, r1
 800553a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800553e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005542:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005546:	6013      	str	r3, [r2, #0]
 8005548:	e036      	b.n	80055b8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005550:	69da      	ldr	r2, [r3, #28]
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	f003 030f 	and.w	r3, r3, #15
 800555a:	2101      	movs	r1, #1
 800555c:	fa01 f303 	lsl.w	r3, r1, r3
 8005560:	041b      	lsls	r3, r3, #16
 8005562:	68f9      	ldr	r1, [r7, #12]
 8005564:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005568:	4313      	orrs	r3, r2
 800556a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	015a      	lsls	r2, r3, #5
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	4413      	add	r3, r2
 8005574:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800557e:	2b00      	cmp	r3, #0
 8005580:	d11a      	bne.n	80055b8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	015a      	lsls	r2, r3, #5
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	4413      	add	r3, r2
 800558a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	791b      	ldrb	r3, [r3, #4]
 800559c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800559e:	430b      	orrs	r3, r1
 80055a0:	4313      	orrs	r3, r2
 80055a2:	68ba      	ldr	r2, [r7, #8]
 80055a4:	0151      	lsls	r1, r2, #5
 80055a6:	68fa      	ldr	r2, [r7, #12]
 80055a8:	440a      	add	r2, r1
 80055aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055b6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80055b8:	2300      	movs	r3, #0
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3714      	adds	r7, #20
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr
	...

080055c8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b085      	sub	sp, #20
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	781b      	ldrb	r3, [r3, #0]
 80055da:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	785b      	ldrb	r3, [r3, #1]
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d161      	bne.n	80056a8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	015a      	lsls	r2, r3, #5
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	4413      	add	r3, r2
 80055ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055fa:	d11f      	bne.n	800563c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	015a      	lsls	r2, r3, #5
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	4413      	add	r3, r2
 8005604:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	68ba      	ldr	r2, [r7, #8]
 800560c:	0151      	lsls	r1, r2, #5
 800560e:	68fa      	ldr	r2, [r7, #12]
 8005610:	440a      	add	r2, r1
 8005612:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005616:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800561a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	015a      	lsls	r2, r3, #5
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	4413      	add	r3, r2
 8005624:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	68ba      	ldr	r2, [r7, #8]
 800562c:	0151      	lsls	r1, r2, #5
 800562e:	68fa      	ldr	r2, [r7, #12]
 8005630:	440a      	add	r2, r1
 8005632:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005636:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800563a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005642:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	f003 030f 	and.w	r3, r3, #15
 800564c:	2101      	movs	r1, #1
 800564e:	fa01 f303 	lsl.w	r3, r1, r3
 8005652:	b29b      	uxth	r3, r3
 8005654:	43db      	mvns	r3, r3
 8005656:	68f9      	ldr	r1, [r7, #12]
 8005658:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800565c:	4013      	ands	r3, r2
 800565e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005666:	69da      	ldr	r2, [r3, #28]
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	781b      	ldrb	r3, [r3, #0]
 800566c:	f003 030f 	and.w	r3, r3, #15
 8005670:	2101      	movs	r1, #1
 8005672:	fa01 f303 	lsl.w	r3, r1, r3
 8005676:	b29b      	uxth	r3, r3
 8005678:	43db      	mvns	r3, r3
 800567a:	68f9      	ldr	r1, [r7, #12]
 800567c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005680:	4013      	ands	r3, r2
 8005682:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	015a      	lsls	r2, r3, #5
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	4413      	add	r3, r2
 800568c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	0159      	lsls	r1, r3, #5
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	440b      	add	r3, r1
 800569a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800569e:	4619      	mov	r1, r3
 80056a0:	4b35      	ldr	r3, [pc, #212]	; (8005778 <USB_DeactivateEndpoint+0x1b0>)
 80056a2:	4013      	ands	r3, r2
 80056a4:	600b      	str	r3, [r1, #0]
 80056a6:	e060      	b.n	800576a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	015a      	lsls	r2, r3, #5
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	4413      	add	r3, r2
 80056b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056be:	d11f      	bne.n	8005700 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	015a      	lsls	r2, r3, #5
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	4413      	add	r3, r2
 80056c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	68ba      	ldr	r2, [r7, #8]
 80056d0:	0151      	lsls	r1, r2, #5
 80056d2:	68fa      	ldr	r2, [r7, #12]
 80056d4:	440a      	add	r2, r1
 80056d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056da:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80056de:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	015a      	lsls	r2, r3, #5
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	4413      	add	r3, r2
 80056e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	68ba      	ldr	r2, [r7, #8]
 80056f0:	0151      	lsls	r1, r2, #5
 80056f2:	68fa      	ldr	r2, [r7, #12]
 80056f4:	440a      	add	r2, r1
 80056f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80056fe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005706:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	f003 030f 	and.w	r3, r3, #15
 8005710:	2101      	movs	r1, #1
 8005712:	fa01 f303 	lsl.w	r3, r1, r3
 8005716:	041b      	lsls	r3, r3, #16
 8005718:	43db      	mvns	r3, r3
 800571a:	68f9      	ldr	r1, [r7, #12]
 800571c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005720:	4013      	ands	r3, r2
 8005722:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800572a:	69da      	ldr	r2, [r3, #28]
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	f003 030f 	and.w	r3, r3, #15
 8005734:	2101      	movs	r1, #1
 8005736:	fa01 f303 	lsl.w	r3, r1, r3
 800573a:	041b      	lsls	r3, r3, #16
 800573c:	43db      	mvns	r3, r3
 800573e:	68f9      	ldr	r1, [r7, #12]
 8005740:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005744:	4013      	ands	r3, r2
 8005746:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	015a      	lsls	r2, r3, #5
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	4413      	add	r3, r2
 8005750:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	0159      	lsls	r1, r3, #5
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	440b      	add	r3, r1
 800575e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005762:	4619      	mov	r1, r3
 8005764:	4b05      	ldr	r3, [pc, #20]	; (800577c <USB_DeactivateEndpoint+0x1b4>)
 8005766:	4013      	ands	r3, r2
 8005768:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800576a:	2300      	movs	r3, #0
}
 800576c:	4618      	mov	r0, r3
 800576e:	3714      	adds	r7, #20
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr
 8005778:	ec337800 	.word	0xec337800
 800577c:	eff37800 	.word	0xeff37800

08005780 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b08a      	sub	sp, #40	; 0x28
 8005784:	af02      	add	r7, sp, #8
 8005786:	60f8      	str	r0, [r7, #12]
 8005788:	60b9      	str	r1, [r7, #8]
 800578a:	4613      	mov	r3, r2
 800578c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	781b      	ldrb	r3, [r3, #0]
 8005796:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	785b      	ldrb	r3, [r3, #1]
 800579c:	2b01      	cmp	r3, #1
 800579e:	f040 815c 	bne.w	8005a5a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	699b      	ldr	r3, [r3, #24]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d132      	bne.n	8005810 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80057aa:	69bb      	ldr	r3, [r7, #24]
 80057ac:	015a      	lsls	r2, r3, #5
 80057ae:	69fb      	ldr	r3, [r7, #28]
 80057b0:	4413      	add	r3, r2
 80057b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057b6:	691b      	ldr	r3, [r3, #16]
 80057b8:	69ba      	ldr	r2, [r7, #24]
 80057ba:	0151      	lsls	r1, r2, #5
 80057bc:	69fa      	ldr	r2, [r7, #28]
 80057be:	440a      	add	r2, r1
 80057c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057c4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80057c8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80057cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80057ce:	69bb      	ldr	r3, [r7, #24]
 80057d0:	015a      	lsls	r2, r3, #5
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	4413      	add	r3, r2
 80057d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057da:	691b      	ldr	r3, [r3, #16]
 80057dc:	69ba      	ldr	r2, [r7, #24]
 80057de:	0151      	lsls	r1, r2, #5
 80057e0:	69fa      	ldr	r2, [r7, #28]
 80057e2:	440a      	add	r2, r1
 80057e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80057ec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80057ee:	69bb      	ldr	r3, [r7, #24]
 80057f0:	015a      	lsls	r2, r3, #5
 80057f2:	69fb      	ldr	r3, [r7, #28]
 80057f4:	4413      	add	r3, r2
 80057f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057fa:	691b      	ldr	r3, [r3, #16]
 80057fc:	69ba      	ldr	r2, [r7, #24]
 80057fe:	0151      	lsls	r1, r2, #5
 8005800:	69fa      	ldr	r2, [r7, #28]
 8005802:	440a      	add	r2, r1
 8005804:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005808:	0cdb      	lsrs	r3, r3, #19
 800580a:	04db      	lsls	r3, r3, #19
 800580c:	6113      	str	r3, [r2, #16]
 800580e:	e074      	b.n	80058fa <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005810:	69bb      	ldr	r3, [r7, #24]
 8005812:	015a      	lsls	r2, r3, #5
 8005814:	69fb      	ldr	r3, [r7, #28]
 8005816:	4413      	add	r3, r2
 8005818:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800581c:	691b      	ldr	r3, [r3, #16]
 800581e:	69ba      	ldr	r2, [r7, #24]
 8005820:	0151      	lsls	r1, r2, #5
 8005822:	69fa      	ldr	r2, [r7, #28]
 8005824:	440a      	add	r2, r1
 8005826:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800582a:	0cdb      	lsrs	r3, r3, #19
 800582c:	04db      	lsls	r3, r3, #19
 800582e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005830:	69bb      	ldr	r3, [r7, #24]
 8005832:	015a      	lsls	r2, r3, #5
 8005834:	69fb      	ldr	r3, [r7, #28]
 8005836:	4413      	add	r3, r2
 8005838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800583c:	691b      	ldr	r3, [r3, #16]
 800583e:	69ba      	ldr	r2, [r7, #24]
 8005840:	0151      	lsls	r1, r2, #5
 8005842:	69fa      	ldr	r2, [r7, #28]
 8005844:	440a      	add	r2, r1
 8005846:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800584a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800584e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005852:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005854:	69bb      	ldr	r3, [r7, #24]
 8005856:	015a      	lsls	r2, r3, #5
 8005858:	69fb      	ldr	r3, [r7, #28]
 800585a:	4413      	add	r3, r2
 800585c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005860:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	6999      	ldr	r1, [r3, #24]
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	68db      	ldr	r3, [r3, #12]
 800586a:	440b      	add	r3, r1
 800586c:	1e59      	subs	r1, r3, #1
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	fbb1 f3f3 	udiv	r3, r1, r3
 8005876:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005878:	4b9d      	ldr	r3, [pc, #628]	; (8005af0 <USB_EPStartXfer+0x370>)
 800587a:	400b      	ands	r3, r1
 800587c:	69b9      	ldr	r1, [r7, #24]
 800587e:	0148      	lsls	r0, r1, #5
 8005880:	69f9      	ldr	r1, [r7, #28]
 8005882:	4401      	add	r1, r0
 8005884:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005888:	4313      	orrs	r3, r2
 800588a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800588c:	69bb      	ldr	r3, [r7, #24]
 800588e:	015a      	lsls	r2, r3, #5
 8005890:	69fb      	ldr	r3, [r7, #28]
 8005892:	4413      	add	r3, r2
 8005894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005898:	691a      	ldr	r2, [r3, #16]
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	699b      	ldr	r3, [r3, #24]
 800589e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058a2:	69b9      	ldr	r1, [r7, #24]
 80058a4:	0148      	lsls	r0, r1, #5
 80058a6:	69f9      	ldr	r1, [r7, #28]
 80058a8:	4401      	add	r1, r0
 80058aa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80058ae:	4313      	orrs	r3, r2
 80058b0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	791b      	ldrb	r3, [r3, #4]
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d11f      	bne.n	80058fa <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80058ba:	69bb      	ldr	r3, [r7, #24]
 80058bc:	015a      	lsls	r2, r3, #5
 80058be:	69fb      	ldr	r3, [r7, #28]
 80058c0:	4413      	add	r3, r2
 80058c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058c6:	691b      	ldr	r3, [r3, #16]
 80058c8:	69ba      	ldr	r2, [r7, #24]
 80058ca:	0151      	lsls	r1, r2, #5
 80058cc:	69fa      	ldr	r2, [r7, #28]
 80058ce:	440a      	add	r2, r1
 80058d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058d4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80058d8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80058da:	69bb      	ldr	r3, [r7, #24]
 80058dc:	015a      	lsls	r2, r3, #5
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	4413      	add	r3, r2
 80058e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058e6:	691b      	ldr	r3, [r3, #16]
 80058e8:	69ba      	ldr	r2, [r7, #24]
 80058ea:	0151      	lsls	r1, r2, #5
 80058ec:	69fa      	ldr	r2, [r7, #28]
 80058ee:	440a      	add	r2, r1
 80058f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058f4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80058f8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80058fa:	79fb      	ldrb	r3, [r7, #7]
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d14b      	bne.n	8005998 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	695b      	ldr	r3, [r3, #20]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d009      	beq.n	800591c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005908:	69bb      	ldr	r3, [r7, #24]
 800590a:	015a      	lsls	r2, r3, #5
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	4413      	add	r3, r2
 8005910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005914:	461a      	mov	r2, r3
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	695b      	ldr	r3, [r3, #20]
 800591a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	791b      	ldrb	r3, [r3, #4]
 8005920:	2b01      	cmp	r3, #1
 8005922:	d128      	bne.n	8005976 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005924:	69fb      	ldr	r3, [r7, #28]
 8005926:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005930:	2b00      	cmp	r3, #0
 8005932:	d110      	bne.n	8005956 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005934:	69bb      	ldr	r3, [r7, #24]
 8005936:	015a      	lsls	r2, r3, #5
 8005938:	69fb      	ldr	r3, [r7, #28]
 800593a:	4413      	add	r3, r2
 800593c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	69ba      	ldr	r2, [r7, #24]
 8005944:	0151      	lsls	r1, r2, #5
 8005946:	69fa      	ldr	r2, [r7, #28]
 8005948:	440a      	add	r2, r1
 800594a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800594e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005952:	6013      	str	r3, [r2, #0]
 8005954:	e00f      	b.n	8005976 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005956:	69bb      	ldr	r3, [r7, #24]
 8005958:	015a      	lsls	r2, r3, #5
 800595a:	69fb      	ldr	r3, [r7, #28]
 800595c:	4413      	add	r3, r2
 800595e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	69ba      	ldr	r2, [r7, #24]
 8005966:	0151      	lsls	r1, r2, #5
 8005968:	69fa      	ldr	r2, [r7, #28]
 800596a:	440a      	add	r2, r1
 800596c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005970:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005974:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005976:	69bb      	ldr	r3, [r7, #24]
 8005978:	015a      	lsls	r2, r3, #5
 800597a:	69fb      	ldr	r3, [r7, #28]
 800597c:	4413      	add	r3, r2
 800597e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	69ba      	ldr	r2, [r7, #24]
 8005986:	0151      	lsls	r1, r2, #5
 8005988:	69fa      	ldr	r2, [r7, #28]
 800598a:	440a      	add	r2, r1
 800598c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005990:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005994:	6013      	str	r3, [r2, #0]
 8005996:	e133      	b.n	8005c00 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005998:	69bb      	ldr	r3, [r7, #24]
 800599a:	015a      	lsls	r2, r3, #5
 800599c:	69fb      	ldr	r3, [r7, #28]
 800599e:	4413      	add	r3, r2
 80059a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	69ba      	ldr	r2, [r7, #24]
 80059a8:	0151      	lsls	r1, r2, #5
 80059aa:	69fa      	ldr	r2, [r7, #28]
 80059ac:	440a      	add	r2, r1
 80059ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059b2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80059b6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	791b      	ldrb	r3, [r3, #4]
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d015      	beq.n	80059ec <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	699b      	ldr	r3, [r3, #24]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	f000 811b 	beq.w	8005c00 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80059ca:	69fb      	ldr	r3, [r7, #28]
 80059cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	781b      	ldrb	r3, [r3, #0]
 80059d6:	f003 030f 	and.w	r3, r3, #15
 80059da:	2101      	movs	r1, #1
 80059dc:	fa01 f303 	lsl.w	r3, r1, r3
 80059e0:	69f9      	ldr	r1, [r7, #28]
 80059e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059e6:	4313      	orrs	r3, r2
 80059e8:	634b      	str	r3, [r1, #52]	; 0x34
 80059ea:	e109      	b.n	8005c00 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80059ec:	69fb      	ldr	r3, [r7, #28]
 80059ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d110      	bne.n	8005a1e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80059fc:	69bb      	ldr	r3, [r7, #24]
 80059fe:	015a      	lsls	r2, r3, #5
 8005a00:	69fb      	ldr	r3, [r7, #28]
 8005a02:	4413      	add	r3, r2
 8005a04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	69ba      	ldr	r2, [r7, #24]
 8005a0c:	0151      	lsls	r1, r2, #5
 8005a0e:	69fa      	ldr	r2, [r7, #28]
 8005a10:	440a      	add	r2, r1
 8005a12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a16:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005a1a:	6013      	str	r3, [r2, #0]
 8005a1c:	e00f      	b.n	8005a3e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005a1e:	69bb      	ldr	r3, [r7, #24]
 8005a20:	015a      	lsls	r2, r3, #5
 8005a22:	69fb      	ldr	r3, [r7, #28]
 8005a24:	4413      	add	r3, r2
 8005a26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	69ba      	ldr	r2, [r7, #24]
 8005a2e:	0151      	lsls	r1, r2, #5
 8005a30:	69fa      	ldr	r2, [r7, #28]
 8005a32:	440a      	add	r2, r1
 8005a34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a3c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	6919      	ldr	r1, [r3, #16]
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	781a      	ldrb	r2, [r3, #0]
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	699b      	ldr	r3, [r3, #24]
 8005a4a:	b298      	uxth	r0, r3
 8005a4c:	79fb      	ldrb	r3, [r7, #7]
 8005a4e:	9300      	str	r3, [sp, #0]
 8005a50:	4603      	mov	r3, r0
 8005a52:	68f8      	ldr	r0, [r7, #12]
 8005a54:	f000 fade 	bl	8006014 <USB_WritePacket>
 8005a58:	e0d2      	b.n	8005c00 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005a5a:	69bb      	ldr	r3, [r7, #24]
 8005a5c:	015a      	lsls	r2, r3, #5
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	4413      	add	r3, r2
 8005a62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a66:	691b      	ldr	r3, [r3, #16]
 8005a68:	69ba      	ldr	r2, [r7, #24]
 8005a6a:	0151      	lsls	r1, r2, #5
 8005a6c:	69fa      	ldr	r2, [r7, #28]
 8005a6e:	440a      	add	r2, r1
 8005a70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a74:	0cdb      	lsrs	r3, r3, #19
 8005a76:	04db      	lsls	r3, r3, #19
 8005a78:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005a7a:	69bb      	ldr	r3, [r7, #24]
 8005a7c:	015a      	lsls	r2, r3, #5
 8005a7e:	69fb      	ldr	r3, [r7, #28]
 8005a80:	4413      	add	r3, r2
 8005a82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a86:	691b      	ldr	r3, [r3, #16]
 8005a88:	69ba      	ldr	r2, [r7, #24]
 8005a8a:	0151      	lsls	r1, r2, #5
 8005a8c:	69fa      	ldr	r2, [r7, #28]
 8005a8e:	440a      	add	r2, r1
 8005a90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a94:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005a98:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005a9c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	699b      	ldr	r3, [r3, #24]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d126      	bne.n	8005af4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005aa6:	69bb      	ldr	r3, [r7, #24]
 8005aa8:	015a      	lsls	r2, r3, #5
 8005aaa:	69fb      	ldr	r3, [r7, #28]
 8005aac:	4413      	add	r3, r2
 8005aae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ab2:	691a      	ldr	r2, [r3, #16]
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	68db      	ldr	r3, [r3, #12]
 8005ab8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005abc:	69b9      	ldr	r1, [r7, #24]
 8005abe:	0148      	lsls	r0, r1, #5
 8005ac0:	69f9      	ldr	r1, [r7, #28]
 8005ac2:	4401      	add	r1, r0
 8005ac4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005acc:	69bb      	ldr	r3, [r7, #24]
 8005ace:	015a      	lsls	r2, r3, #5
 8005ad0:	69fb      	ldr	r3, [r7, #28]
 8005ad2:	4413      	add	r3, r2
 8005ad4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ad8:	691b      	ldr	r3, [r3, #16]
 8005ada:	69ba      	ldr	r2, [r7, #24]
 8005adc:	0151      	lsls	r1, r2, #5
 8005ade:	69fa      	ldr	r2, [r7, #28]
 8005ae0:	440a      	add	r2, r1
 8005ae2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ae6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005aea:	6113      	str	r3, [r2, #16]
 8005aec:	e03a      	b.n	8005b64 <USB_EPStartXfer+0x3e4>
 8005aee:	bf00      	nop
 8005af0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	699a      	ldr	r2, [r3, #24]
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	68db      	ldr	r3, [r3, #12]
 8005afc:	4413      	add	r3, r2
 8005afe:	1e5a      	subs	r2, r3, #1
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	68db      	ldr	r3, [r3, #12]
 8005b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b08:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	8afa      	ldrh	r2, [r7, #22]
 8005b10:	fb03 f202 	mul.w	r2, r3, r2
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005b18:	69bb      	ldr	r3, [r7, #24]
 8005b1a:	015a      	lsls	r2, r3, #5
 8005b1c:	69fb      	ldr	r3, [r7, #28]
 8005b1e:	4413      	add	r3, r2
 8005b20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b24:	691a      	ldr	r2, [r3, #16]
 8005b26:	8afb      	ldrh	r3, [r7, #22]
 8005b28:	04d9      	lsls	r1, r3, #19
 8005b2a:	4b38      	ldr	r3, [pc, #224]	; (8005c0c <USB_EPStartXfer+0x48c>)
 8005b2c:	400b      	ands	r3, r1
 8005b2e:	69b9      	ldr	r1, [r7, #24]
 8005b30:	0148      	lsls	r0, r1, #5
 8005b32:	69f9      	ldr	r1, [r7, #28]
 8005b34:	4401      	add	r1, r0
 8005b36:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005b3e:	69bb      	ldr	r3, [r7, #24]
 8005b40:	015a      	lsls	r2, r3, #5
 8005b42:	69fb      	ldr	r3, [r7, #28]
 8005b44:	4413      	add	r3, r2
 8005b46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b4a:	691a      	ldr	r2, [r3, #16]
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	69db      	ldr	r3, [r3, #28]
 8005b50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b54:	69b9      	ldr	r1, [r7, #24]
 8005b56:	0148      	lsls	r0, r1, #5
 8005b58:	69f9      	ldr	r1, [r7, #28]
 8005b5a:	4401      	add	r1, r0
 8005b5c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005b60:	4313      	orrs	r3, r2
 8005b62:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005b64:	79fb      	ldrb	r3, [r7, #7]
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d10d      	bne.n	8005b86 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	691b      	ldr	r3, [r3, #16]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d009      	beq.n	8005b86 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	6919      	ldr	r1, [r3, #16]
 8005b76:	69bb      	ldr	r3, [r7, #24]
 8005b78:	015a      	lsls	r2, r3, #5
 8005b7a:	69fb      	ldr	r3, [r7, #28]
 8005b7c:	4413      	add	r3, r2
 8005b7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b82:	460a      	mov	r2, r1
 8005b84:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	791b      	ldrb	r3, [r3, #4]
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d128      	bne.n	8005be0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005b8e:	69fb      	ldr	r3, [r7, #28]
 8005b90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d110      	bne.n	8005bc0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005b9e:	69bb      	ldr	r3, [r7, #24]
 8005ba0:	015a      	lsls	r2, r3, #5
 8005ba2:	69fb      	ldr	r3, [r7, #28]
 8005ba4:	4413      	add	r3, r2
 8005ba6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	69ba      	ldr	r2, [r7, #24]
 8005bae:	0151      	lsls	r1, r2, #5
 8005bb0:	69fa      	ldr	r2, [r7, #28]
 8005bb2:	440a      	add	r2, r1
 8005bb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bb8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005bbc:	6013      	str	r3, [r2, #0]
 8005bbe:	e00f      	b.n	8005be0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005bc0:	69bb      	ldr	r3, [r7, #24]
 8005bc2:	015a      	lsls	r2, r3, #5
 8005bc4:	69fb      	ldr	r3, [r7, #28]
 8005bc6:	4413      	add	r3, r2
 8005bc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	69ba      	ldr	r2, [r7, #24]
 8005bd0:	0151      	lsls	r1, r2, #5
 8005bd2:	69fa      	ldr	r2, [r7, #28]
 8005bd4:	440a      	add	r2, r1
 8005bd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bde:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005be0:	69bb      	ldr	r3, [r7, #24]
 8005be2:	015a      	lsls	r2, r3, #5
 8005be4:	69fb      	ldr	r3, [r7, #28]
 8005be6:	4413      	add	r3, r2
 8005be8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	69ba      	ldr	r2, [r7, #24]
 8005bf0:	0151      	lsls	r1, r2, #5
 8005bf2:	69fa      	ldr	r2, [r7, #28]
 8005bf4:	440a      	add	r2, r1
 8005bf6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bfa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005bfe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005c00:	2300      	movs	r3, #0
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3720      	adds	r7, #32
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}
 8005c0a:	bf00      	nop
 8005c0c:	1ff80000 	.word	0x1ff80000

08005c10 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b087      	sub	sp, #28
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	60f8      	str	r0, [r7, #12]
 8005c18:	60b9      	str	r1, [r7, #8]
 8005c1a:	4613      	mov	r3, r2
 8005c1c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	781b      	ldrb	r3, [r3, #0]
 8005c26:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	785b      	ldrb	r3, [r3, #1]
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	f040 80ce 	bne.w	8005dce <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	699b      	ldr	r3, [r3, #24]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d132      	bne.n	8005ca0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	015a      	lsls	r2, r3, #5
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	4413      	add	r3, r2
 8005c42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c46:	691b      	ldr	r3, [r3, #16]
 8005c48:	693a      	ldr	r2, [r7, #16]
 8005c4a:	0151      	lsls	r1, r2, #5
 8005c4c:	697a      	ldr	r2, [r7, #20]
 8005c4e:	440a      	add	r2, r1
 8005c50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c54:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c58:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c5c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	015a      	lsls	r2, r3, #5
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	4413      	add	r3, r2
 8005c66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c6a:	691b      	ldr	r3, [r3, #16]
 8005c6c:	693a      	ldr	r2, [r7, #16]
 8005c6e:	0151      	lsls	r1, r2, #5
 8005c70:	697a      	ldr	r2, [r7, #20]
 8005c72:	440a      	add	r2, r1
 8005c74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c78:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c7c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	015a      	lsls	r2, r3, #5
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	4413      	add	r3, r2
 8005c86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c8a:	691b      	ldr	r3, [r3, #16]
 8005c8c:	693a      	ldr	r2, [r7, #16]
 8005c8e:	0151      	lsls	r1, r2, #5
 8005c90:	697a      	ldr	r2, [r7, #20]
 8005c92:	440a      	add	r2, r1
 8005c94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c98:	0cdb      	lsrs	r3, r3, #19
 8005c9a:	04db      	lsls	r3, r3, #19
 8005c9c:	6113      	str	r3, [r2, #16]
 8005c9e:	e04e      	b.n	8005d3e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	015a      	lsls	r2, r3, #5
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	4413      	add	r3, r2
 8005ca8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cac:	691b      	ldr	r3, [r3, #16]
 8005cae:	693a      	ldr	r2, [r7, #16]
 8005cb0:	0151      	lsls	r1, r2, #5
 8005cb2:	697a      	ldr	r2, [r7, #20]
 8005cb4:	440a      	add	r2, r1
 8005cb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cba:	0cdb      	lsrs	r3, r3, #19
 8005cbc:	04db      	lsls	r3, r3, #19
 8005cbe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	015a      	lsls	r2, r3, #5
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	4413      	add	r3, r2
 8005cc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ccc:	691b      	ldr	r3, [r3, #16]
 8005cce:	693a      	ldr	r2, [r7, #16]
 8005cd0:	0151      	lsls	r1, r2, #5
 8005cd2:	697a      	ldr	r2, [r7, #20]
 8005cd4:	440a      	add	r2, r1
 8005cd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cda:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005cde:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005ce2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	699a      	ldr	r2, [r3, #24]
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	68db      	ldr	r3, [r3, #12]
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d903      	bls.n	8005cf8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	68da      	ldr	r2, [r3, #12]
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	015a      	lsls	r2, r3, #5
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	4413      	add	r3, r2
 8005d00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d04:	691b      	ldr	r3, [r3, #16]
 8005d06:	693a      	ldr	r2, [r7, #16]
 8005d08:	0151      	lsls	r1, r2, #5
 8005d0a:	697a      	ldr	r2, [r7, #20]
 8005d0c:	440a      	add	r2, r1
 8005d0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d12:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d16:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	015a      	lsls	r2, r3, #5
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	4413      	add	r3, r2
 8005d20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d24:	691a      	ldr	r2, [r3, #16]
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	699b      	ldr	r3, [r3, #24]
 8005d2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d2e:	6939      	ldr	r1, [r7, #16]
 8005d30:	0148      	lsls	r0, r1, #5
 8005d32:	6979      	ldr	r1, [r7, #20]
 8005d34:	4401      	add	r1, r0
 8005d36:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005d3e:	79fb      	ldrb	r3, [r7, #7]
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d11e      	bne.n	8005d82 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	695b      	ldr	r3, [r3, #20]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d009      	beq.n	8005d60 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	015a      	lsls	r2, r3, #5
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	4413      	add	r3, r2
 8005d54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d58:	461a      	mov	r2, r3
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	695b      	ldr	r3, [r3, #20]
 8005d5e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	015a      	lsls	r2, r3, #5
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	4413      	add	r3, r2
 8005d68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	693a      	ldr	r2, [r7, #16]
 8005d70:	0151      	lsls	r1, r2, #5
 8005d72:	697a      	ldr	r2, [r7, #20]
 8005d74:	440a      	add	r2, r1
 8005d76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d7a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d7e:	6013      	str	r3, [r2, #0]
 8005d80:	e097      	b.n	8005eb2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	015a      	lsls	r2, r3, #5
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	4413      	add	r3, r2
 8005d8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	693a      	ldr	r2, [r7, #16]
 8005d92:	0151      	lsls	r1, r2, #5
 8005d94:	697a      	ldr	r2, [r7, #20]
 8005d96:	440a      	add	r2, r1
 8005d98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d9c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005da0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	699b      	ldr	r3, [r3, #24]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	f000 8083 	beq.w	8005eb2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005db2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	781b      	ldrb	r3, [r3, #0]
 8005db8:	f003 030f 	and.w	r3, r3, #15
 8005dbc:	2101      	movs	r1, #1
 8005dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8005dc2:	6979      	ldr	r1, [r7, #20]
 8005dc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	634b      	str	r3, [r1, #52]	; 0x34
 8005dcc:	e071      	b.n	8005eb2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	015a      	lsls	r2, r3, #5
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	4413      	add	r3, r2
 8005dd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dda:	691b      	ldr	r3, [r3, #16]
 8005ddc:	693a      	ldr	r2, [r7, #16]
 8005dde:	0151      	lsls	r1, r2, #5
 8005de0:	697a      	ldr	r2, [r7, #20]
 8005de2:	440a      	add	r2, r1
 8005de4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005de8:	0cdb      	lsrs	r3, r3, #19
 8005dea:	04db      	lsls	r3, r3, #19
 8005dec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	015a      	lsls	r2, r3, #5
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	4413      	add	r3, r2
 8005df6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dfa:	691b      	ldr	r3, [r3, #16]
 8005dfc:	693a      	ldr	r2, [r7, #16]
 8005dfe:	0151      	lsls	r1, r2, #5
 8005e00:	697a      	ldr	r2, [r7, #20]
 8005e02:	440a      	add	r2, r1
 8005e04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e08:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005e0c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005e10:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	699b      	ldr	r3, [r3, #24]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d003      	beq.n	8005e22 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	68da      	ldr	r2, [r3, #12]
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	68da      	ldr	r2, [r3, #12]
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	015a      	lsls	r2, r3, #5
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	4413      	add	r3, r2
 8005e32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e36:	691b      	ldr	r3, [r3, #16]
 8005e38:	693a      	ldr	r2, [r7, #16]
 8005e3a:	0151      	lsls	r1, r2, #5
 8005e3c:	697a      	ldr	r2, [r7, #20]
 8005e3e:	440a      	add	r2, r1
 8005e40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e44:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e48:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	015a      	lsls	r2, r3, #5
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	4413      	add	r3, r2
 8005e52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e56:	691a      	ldr	r2, [r3, #16]
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	69db      	ldr	r3, [r3, #28]
 8005e5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e60:	6939      	ldr	r1, [r7, #16]
 8005e62:	0148      	lsls	r0, r1, #5
 8005e64:	6979      	ldr	r1, [r7, #20]
 8005e66:	4401      	add	r1, r0
 8005e68:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005e70:	79fb      	ldrb	r3, [r7, #7]
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d10d      	bne.n	8005e92 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	691b      	ldr	r3, [r3, #16]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d009      	beq.n	8005e92 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	6919      	ldr	r1, [r3, #16]
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	015a      	lsls	r2, r3, #5
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	4413      	add	r3, r2
 8005e8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e8e:	460a      	mov	r2, r1
 8005e90:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	015a      	lsls	r2, r3, #5
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	4413      	add	r3, r2
 8005e9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	693a      	ldr	r2, [r7, #16]
 8005ea2:	0151      	lsls	r1, r2, #5
 8005ea4:	697a      	ldr	r2, [r7, #20]
 8005ea6:	440a      	add	r2, r1
 8005ea8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005eac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005eb0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005eb2:	2300      	movs	r3, #0
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	371c      	adds	r7, #28
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr

08005ec0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b087      	sub	sp, #28
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	785b      	ldrb	r3, [r3, #1]
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d14a      	bne.n	8005f74 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	781b      	ldrb	r3, [r3, #0]
 8005ee2:	015a      	lsls	r2, r3, #5
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	4413      	add	r3, r2
 8005ee8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ef2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ef6:	f040 8086 	bne.w	8006006 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	015a      	lsls	r2, r3, #5
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	4413      	add	r3, r2
 8005f04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	683a      	ldr	r2, [r7, #0]
 8005f0c:	7812      	ldrb	r2, [r2, #0]
 8005f0e:	0151      	lsls	r1, r2, #5
 8005f10:	693a      	ldr	r2, [r7, #16]
 8005f12:	440a      	add	r2, r1
 8005f14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f18:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005f1c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	781b      	ldrb	r3, [r3, #0]
 8005f22:	015a      	lsls	r2, r3, #5
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	4413      	add	r3, r2
 8005f28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	683a      	ldr	r2, [r7, #0]
 8005f30:	7812      	ldrb	r2, [r2, #0]
 8005f32:	0151      	lsls	r1, r2, #5
 8005f34:	693a      	ldr	r2, [r7, #16]
 8005f36:	440a      	add	r2, r1
 8005f38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f3c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f40:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	3301      	adds	r3, #1
 8005f46:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f242 7210 	movw	r2, #10000	; 0x2710
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d902      	bls.n	8005f58 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	75fb      	strb	r3, [r7, #23]
          break;
 8005f56:	e056      	b.n	8006006 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	015a      	lsls	r2, r3, #5
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	4413      	add	r3, r2
 8005f62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f70:	d0e7      	beq.n	8005f42 <USB_EPStopXfer+0x82>
 8005f72:	e048      	b.n	8006006 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	015a      	lsls	r2, r3, #5
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	4413      	add	r3, r2
 8005f7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f8c:	d13b      	bne.n	8006006 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	781b      	ldrb	r3, [r3, #0]
 8005f92:	015a      	lsls	r2, r3, #5
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	4413      	add	r3, r2
 8005f98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	683a      	ldr	r2, [r7, #0]
 8005fa0:	7812      	ldrb	r2, [r2, #0]
 8005fa2:	0151      	lsls	r1, r2, #5
 8005fa4:	693a      	ldr	r2, [r7, #16]
 8005fa6:	440a      	add	r2, r1
 8005fa8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005fb0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	781b      	ldrb	r3, [r3, #0]
 8005fb6:	015a      	lsls	r2, r3, #5
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	4413      	add	r3, r2
 8005fbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	683a      	ldr	r2, [r7, #0]
 8005fc4:	7812      	ldrb	r2, [r2, #0]
 8005fc6:	0151      	lsls	r1, r2, #5
 8005fc8:	693a      	ldr	r2, [r7, #16]
 8005fca:	440a      	add	r2, r1
 8005fcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fd0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005fd4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	3301      	adds	r3, #1
 8005fda:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f242 7210 	movw	r2, #10000	; 0x2710
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d902      	bls.n	8005fec <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	75fb      	strb	r3, [r7, #23]
          break;
 8005fea:	e00c      	b.n	8006006 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	781b      	ldrb	r3, [r3, #0]
 8005ff0:	015a      	lsls	r2, r3, #5
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	4413      	add	r3, r2
 8005ff6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006000:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006004:	d0e7      	beq.n	8005fd6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006006:	7dfb      	ldrb	r3, [r7, #23]
}
 8006008:	4618      	mov	r0, r3
 800600a:	371c      	adds	r7, #28
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr

08006014 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006014:	b480      	push	{r7}
 8006016:	b089      	sub	sp, #36	; 0x24
 8006018:	af00      	add	r7, sp, #0
 800601a:	60f8      	str	r0, [r7, #12]
 800601c:	60b9      	str	r1, [r7, #8]
 800601e:	4611      	mov	r1, r2
 8006020:	461a      	mov	r2, r3
 8006022:	460b      	mov	r3, r1
 8006024:	71fb      	strb	r3, [r7, #7]
 8006026:	4613      	mov	r3, r2
 8006028:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006032:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006036:	2b00      	cmp	r3, #0
 8006038:	d123      	bne.n	8006082 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800603a:	88bb      	ldrh	r3, [r7, #4]
 800603c:	3303      	adds	r3, #3
 800603e:	089b      	lsrs	r3, r3, #2
 8006040:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006042:	2300      	movs	r3, #0
 8006044:	61bb      	str	r3, [r7, #24]
 8006046:	e018      	b.n	800607a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006048:	79fb      	ldrb	r3, [r7, #7]
 800604a:	031a      	lsls	r2, r3, #12
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	4413      	add	r3, r2
 8006050:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006054:	461a      	mov	r2, r3
 8006056:	69fb      	ldr	r3, [r7, #28]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800605c:	69fb      	ldr	r3, [r7, #28]
 800605e:	3301      	adds	r3, #1
 8006060:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006062:	69fb      	ldr	r3, [r7, #28]
 8006064:	3301      	adds	r3, #1
 8006066:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006068:	69fb      	ldr	r3, [r7, #28]
 800606a:	3301      	adds	r3, #1
 800606c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800606e:	69fb      	ldr	r3, [r7, #28]
 8006070:	3301      	adds	r3, #1
 8006072:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006074:	69bb      	ldr	r3, [r7, #24]
 8006076:	3301      	adds	r3, #1
 8006078:	61bb      	str	r3, [r7, #24]
 800607a:	69ba      	ldr	r2, [r7, #24]
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	429a      	cmp	r2, r3
 8006080:	d3e2      	bcc.n	8006048 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006082:	2300      	movs	r3, #0
}
 8006084:	4618      	mov	r0, r3
 8006086:	3724      	adds	r7, #36	; 0x24
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr

08006090 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006090:	b480      	push	{r7}
 8006092:	b08b      	sub	sp, #44	; 0x2c
 8006094:	af00      	add	r7, sp, #0
 8006096:	60f8      	str	r0, [r7, #12]
 8006098:	60b9      	str	r1, [r7, #8]
 800609a:	4613      	mov	r3, r2
 800609c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80060a6:	88fb      	ldrh	r3, [r7, #6]
 80060a8:	089b      	lsrs	r3, r3, #2
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80060ae:	88fb      	ldrh	r3, [r7, #6]
 80060b0:	f003 0303 	and.w	r3, r3, #3
 80060b4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80060b6:	2300      	movs	r3, #0
 80060b8:	623b      	str	r3, [r7, #32]
 80060ba:	e014      	b.n	80060e6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80060bc:	69bb      	ldr	r3, [r7, #24]
 80060be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c6:	601a      	str	r2, [r3, #0]
    pDest++;
 80060c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ca:	3301      	adds	r3, #1
 80060cc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80060ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d0:	3301      	adds	r3, #1
 80060d2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80060d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d6:	3301      	adds	r3, #1
 80060d8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80060da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060dc:	3301      	adds	r3, #1
 80060de:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80060e0:	6a3b      	ldr	r3, [r7, #32]
 80060e2:	3301      	adds	r3, #1
 80060e4:	623b      	str	r3, [r7, #32]
 80060e6:	6a3a      	ldr	r2, [r7, #32]
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d3e6      	bcc.n	80060bc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80060ee:	8bfb      	ldrh	r3, [r7, #30]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d01e      	beq.n	8006132 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80060f4:	2300      	movs	r3, #0
 80060f6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80060f8:	69bb      	ldr	r3, [r7, #24]
 80060fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060fe:	461a      	mov	r2, r3
 8006100:	f107 0310 	add.w	r3, r7, #16
 8006104:	6812      	ldr	r2, [r2, #0]
 8006106:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006108:	693a      	ldr	r2, [r7, #16]
 800610a:	6a3b      	ldr	r3, [r7, #32]
 800610c:	b2db      	uxtb	r3, r3
 800610e:	00db      	lsls	r3, r3, #3
 8006110:	fa22 f303 	lsr.w	r3, r2, r3
 8006114:	b2da      	uxtb	r2, r3
 8006116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006118:	701a      	strb	r2, [r3, #0]
      i++;
 800611a:	6a3b      	ldr	r3, [r7, #32]
 800611c:	3301      	adds	r3, #1
 800611e:	623b      	str	r3, [r7, #32]
      pDest++;
 8006120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006122:	3301      	adds	r3, #1
 8006124:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006126:	8bfb      	ldrh	r3, [r7, #30]
 8006128:	3b01      	subs	r3, #1
 800612a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800612c:	8bfb      	ldrh	r3, [r7, #30]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d1ea      	bne.n	8006108 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006134:	4618      	mov	r0, r3
 8006136:	372c      	adds	r7, #44	; 0x2c
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr

08006140 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006140:	b480      	push	{r7}
 8006142:	b085      	sub	sp, #20
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	781b      	ldrb	r3, [r3, #0]
 8006152:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	785b      	ldrb	r3, [r3, #1]
 8006158:	2b01      	cmp	r3, #1
 800615a:	d12c      	bne.n	80061b6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	015a      	lsls	r2, r3, #5
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	4413      	add	r3, r2
 8006164:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	2b00      	cmp	r3, #0
 800616c:	db12      	blt.n	8006194 <USB_EPSetStall+0x54>
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d00f      	beq.n	8006194 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	015a      	lsls	r2, r3, #5
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	4413      	add	r3, r2
 800617c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	68ba      	ldr	r2, [r7, #8]
 8006184:	0151      	lsls	r1, r2, #5
 8006186:	68fa      	ldr	r2, [r7, #12]
 8006188:	440a      	add	r2, r1
 800618a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800618e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006192:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	015a      	lsls	r2, r3, #5
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	4413      	add	r3, r2
 800619c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	68ba      	ldr	r2, [r7, #8]
 80061a4:	0151      	lsls	r1, r2, #5
 80061a6:	68fa      	ldr	r2, [r7, #12]
 80061a8:	440a      	add	r2, r1
 80061aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80061b2:	6013      	str	r3, [r2, #0]
 80061b4:	e02b      	b.n	800620e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	015a      	lsls	r2, r3, #5
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	4413      	add	r3, r2
 80061be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	db12      	blt.n	80061ee <USB_EPSetStall+0xae>
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d00f      	beq.n	80061ee <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	015a      	lsls	r2, r3, #5
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	4413      	add	r3, r2
 80061d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	68ba      	ldr	r2, [r7, #8]
 80061de:	0151      	lsls	r1, r2, #5
 80061e0:	68fa      	ldr	r2, [r7, #12]
 80061e2:	440a      	add	r2, r1
 80061e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061e8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80061ec:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	015a      	lsls	r2, r3, #5
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	4413      	add	r3, r2
 80061f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	68ba      	ldr	r2, [r7, #8]
 80061fe:	0151      	lsls	r1, r2, #5
 8006200:	68fa      	ldr	r2, [r7, #12]
 8006202:	440a      	add	r2, r1
 8006204:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006208:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800620c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800620e:	2300      	movs	r3, #0
}
 8006210:	4618      	mov	r0, r3
 8006212:	3714      	adds	r7, #20
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr

0800621c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800621c:	b480      	push	{r7}
 800621e:	b085      	sub	sp, #20
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
 8006224:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	781b      	ldrb	r3, [r3, #0]
 800622e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	785b      	ldrb	r3, [r3, #1]
 8006234:	2b01      	cmp	r3, #1
 8006236:	d128      	bne.n	800628a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	015a      	lsls	r2, r3, #5
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	4413      	add	r3, r2
 8006240:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	68ba      	ldr	r2, [r7, #8]
 8006248:	0151      	lsls	r1, r2, #5
 800624a:	68fa      	ldr	r2, [r7, #12]
 800624c:	440a      	add	r2, r1
 800624e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006252:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006256:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	791b      	ldrb	r3, [r3, #4]
 800625c:	2b03      	cmp	r3, #3
 800625e:	d003      	beq.n	8006268 <USB_EPClearStall+0x4c>
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	791b      	ldrb	r3, [r3, #4]
 8006264:	2b02      	cmp	r3, #2
 8006266:	d138      	bne.n	80062da <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	015a      	lsls	r2, r3, #5
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	4413      	add	r3, r2
 8006270:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	68ba      	ldr	r2, [r7, #8]
 8006278:	0151      	lsls	r1, r2, #5
 800627a:	68fa      	ldr	r2, [r7, #12]
 800627c:	440a      	add	r2, r1
 800627e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006282:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006286:	6013      	str	r3, [r2, #0]
 8006288:	e027      	b.n	80062da <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	015a      	lsls	r2, r3, #5
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	4413      	add	r3, r2
 8006292:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	68ba      	ldr	r2, [r7, #8]
 800629a:	0151      	lsls	r1, r2, #5
 800629c:	68fa      	ldr	r2, [r7, #12]
 800629e:	440a      	add	r2, r1
 80062a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062a4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80062a8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	791b      	ldrb	r3, [r3, #4]
 80062ae:	2b03      	cmp	r3, #3
 80062b0:	d003      	beq.n	80062ba <USB_EPClearStall+0x9e>
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	791b      	ldrb	r3, [r3, #4]
 80062b6:	2b02      	cmp	r3, #2
 80062b8:	d10f      	bne.n	80062da <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	015a      	lsls	r2, r3, #5
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	4413      	add	r3, r2
 80062c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	68ba      	ldr	r2, [r7, #8]
 80062ca:	0151      	lsls	r1, r2, #5
 80062cc:	68fa      	ldr	r2, [r7, #12]
 80062ce:	440a      	add	r2, r1
 80062d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062d8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80062da:	2300      	movs	r3, #0
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3714      	adds	r7, #20
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr

080062e8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b085      	sub	sp, #20
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	460b      	mov	r3, r1
 80062f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	68fa      	ldr	r2, [r7, #12]
 8006302:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006306:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800630a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	78fb      	ldrb	r3, [r7, #3]
 8006316:	011b      	lsls	r3, r3, #4
 8006318:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800631c:	68f9      	ldr	r1, [r7, #12]
 800631e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006322:	4313      	orrs	r3, r2
 8006324:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006326:	2300      	movs	r3, #0
}
 8006328:	4618      	mov	r0, r3
 800632a:	3714      	adds	r7, #20
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr

08006334 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006334:	b480      	push	{r7}
 8006336:	b085      	sub	sp, #20
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	68fa      	ldr	r2, [r7, #12]
 800634a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800634e:	f023 0303 	bic.w	r3, r3, #3
 8006352:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	68fa      	ldr	r2, [r7, #12]
 800635e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006362:	f023 0302 	bic.w	r3, r3, #2
 8006366:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006368:	2300      	movs	r3, #0
}
 800636a:	4618      	mov	r0, r3
 800636c:	3714      	adds	r7, #20
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr

08006376 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006376:	b480      	push	{r7}
 8006378:	b085      	sub	sp, #20
 800637a:	af00      	add	r7, sp, #0
 800637c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	68fa      	ldr	r2, [r7, #12]
 800638c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006390:	f023 0303 	bic.w	r3, r3, #3
 8006394:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	68fa      	ldr	r2, [r7, #12]
 80063a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063a4:	f043 0302 	orr.w	r3, r3, #2
 80063a8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80063aa:	2300      	movs	r3, #0
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3714      	adds	r7, #20
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr

080063b8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b085      	sub	sp, #20
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	695b      	ldr	r3, [r3, #20]
 80063c4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	699b      	ldr	r3, [r3, #24]
 80063ca:	68fa      	ldr	r2, [r7, #12]
 80063cc:	4013      	ands	r3, r2
 80063ce:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80063d0:	68fb      	ldr	r3, [r7, #12]
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3714      	adds	r7, #20
 80063d6:	46bd      	mov	sp, r7
 80063d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063dc:	4770      	bx	lr

080063de <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80063de:	b480      	push	{r7}
 80063e0:	b085      	sub	sp, #20
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063f0:	699b      	ldr	r3, [r3, #24]
 80063f2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063fa:	69db      	ldr	r3, [r3, #28]
 80063fc:	68ba      	ldr	r2, [r7, #8]
 80063fe:	4013      	ands	r3, r2
 8006400:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	0c1b      	lsrs	r3, r3, #16
}
 8006406:	4618      	mov	r0, r3
 8006408:	3714      	adds	r7, #20
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr

08006412 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006412:	b480      	push	{r7}
 8006414:	b085      	sub	sp, #20
 8006416:	af00      	add	r7, sp, #0
 8006418:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006424:	699b      	ldr	r3, [r3, #24]
 8006426:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800642e:	69db      	ldr	r3, [r3, #28]
 8006430:	68ba      	ldr	r2, [r7, #8]
 8006432:	4013      	ands	r3, r2
 8006434:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	b29b      	uxth	r3, r3
}
 800643a:	4618      	mov	r0, r3
 800643c:	3714      	adds	r7, #20
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr

08006446 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006446:	b480      	push	{r7}
 8006448:	b085      	sub	sp, #20
 800644a:	af00      	add	r7, sp, #0
 800644c:	6078      	str	r0, [r7, #4]
 800644e:	460b      	mov	r3, r1
 8006450:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006456:	78fb      	ldrb	r3, [r7, #3]
 8006458:	015a      	lsls	r2, r3, #5
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	4413      	add	r3, r2
 800645e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006462:	689b      	ldr	r3, [r3, #8]
 8006464:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800646c:	695b      	ldr	r3, [r3, #20]
 800646e:	68ba      	ldr	r2, [r7, #8]
 8006470:	4013      	ands	r3, r2
 8006472:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006474:	68bb      	ldr	r3, [r7, #8]
}
 8006476:	4618      	mov	r0, r3
 8006478:	3714      	adds	r7, #20
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr

08006482 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006482:	b480      	push	{r7}
 8006484:	b087      	sub	sp, #28
 8006486:	af00      	add	r7, sp, #0
 8006488:	6078      	str	r0, [r7, #4]
 800648a:	460b      	mov	r3, r1
 800648c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006498:	691b      	ldr	r3, [r3, #16]
 800649a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064a4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80064a6:	78fb      	ldrb	r3, [r7, #3]
 80064a8:	f003 030f 	and.w	r3, r3, #15
 80064ac:	68fa      	ldr	r2, [r7, #12]
 80064ae:	fa22 f303 	lsr.w	r3, r2, r3
 80064b2:	01db      	lsls	r3, r3, #7
 80064b4:	b2db      	uxtb	r3, r3
 80064b6:	693a      	ldr	r2, [r7, #16]
 80064b8:	4313      	orrs	r3, r2
 80064ba:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80064bc:	78fb      	ldrb	r3, [r7, #3]
 80064be:	015a      	lsls	r2, r3, #5
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	4413      	add	r3, r2
 80064c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064c8:	689b      	ldr	r3, [r3, #8]
 80064ca:	693a      	ldr	r2, [r7, #16]
 80064cc:	4013      	ands	r3, r2
 80064ce:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80064d0:	68bb      	ldr	r3, [r7, #8]
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	371c      	adds	r7, #28
 80064d6:	46bd      	mov	sp, r7
 80064d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064dc:	4770      	bx	lr

080064de <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80064de:	b480      	push	{r7}
 80064e0:	b083      	sub	sp, #12
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	695b      	ldr	r3, [r3, #20]
 80064ea:	f003 0301 	and.w	r3, r3, #1
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	370c      	adds	r7, #12
 80064f2:	46bd      	mov	sp, r7
 80064f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f8:	4770      	bx	lr

080064fa <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80064fa:	b480      	push	{r7}
 80064fc:	b085      	sub	sp, #20
 80064fe:	af00      	add	r7, sp, #0
 8006500:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	68fa      	ldr	r2, [r7, #12]
 8006510:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006514:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006518:	f023 0307 	bic.w	r3, r3, #7
 800651c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	68fa      	ldr	r2, [r7, #12]
 8006528:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800652c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006530:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006532:	2300      	movs	r3, #0
}
 8006534:	4618      	mov	r0, r3
 8006536:	3714      	adds	r7, #20
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr

08006540 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006540:	b480      	push	{r7}
 8006542:	b087      	sub	sp, #28
 8006544:	af00      	add	r7, sp, #0
 8006546:	60f8      	str	r0, [r7, #12]
 8006548:	460b      	mov	r3, r1
 800654a:	607a      	str	r2, [r7, #4]
 800654c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	333c      	adds	r3, #60	; 0x3c
 8006556:	3304      	adds	r3, #4
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	4a26      	ldr	r2, [pc, #152]	; (80065f8 <USB_EP0_OutStart+0xb8>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d90a      	bls.n	800657a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006570:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006574:	d101      	bne.n	800657a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006576:	2300      	movs	r3, #0
 8006578:	e037      	b.n	80065ea <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006580:	461a      	mov	r2, r3
 8006582:	2300      	movs	r3, #0
 8006584:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800658c:	691b      	ldr	r3, [r3, #16]
 800658e:	697a      	ldr	r2, [r7, #20]
 8006590:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006594:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006598:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065a0:	691b      	ldr	r3, [r3, #16]
 80065a2:	697a      	ldr	r2, [r7, #20]
 80065a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065a8:	f043 0318 	orr.w	r3, r3, #24
 80065ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065b4:	691b      	ldr	r3, [r3, #16]
 80065b6:	697a      	ldr	r2, [r7, #20]
 80065b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065bc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80065c0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80065c2:	7afb      	ldrb	r3, [r7, #11]
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d10f      	bne.n	80065e8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065ce:	461a      	mov	r2, r3
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	697a      	ldr	r2, [r7, #20]
 80065de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065e2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80065e6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80065e8:	2300      	movs	r3, #0
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	371c      	adds	r7, #28
 80065ee:	46bd      	mov	sp, r7
 80065f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f4:	4770      	bx	lr
 80065f6:	bf00      	nop
 80065f8:	4f54300a 	.word	0x4f54300a

080065fc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b085      	sub	sp, #20
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006604:	2300      	movs	r3, #0
 8006606:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	3301      	adds	r3, #1
 800660c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	4a13      	ldr	r2, [pc, #76]	; (8006660 <USB_CoreReset+0x64>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d901      	bls.n	800661a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006616:	2303      	movs	r3, #3
 8006618:	e01b      	b.n	8006652 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	691b      	ldr	r3, [r3, #16]
 800661e:	2b00      	cmp	r3, #0
 8006620:	daf2      	bge.n	8006608 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006622:	2300      	movs	r3, #0
 8006624:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	691b      	ldr	r3, [r3, #16]
 800662a:	f043 0201 	orr.w	r2, r3, #1
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	3301      	adds	r3, #1
 8006636:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	4a09      	ldr	r2, [pc, #36]	; (8006660 <USB_CoreReset+0x64>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d901      	bls.n	8006644 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006640:	2303      	movs	r3, #3
 8006642:	e006      	b.n	8006652 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	691b      	ldr	r3, [r3, #16]
 8006648:	f003 0301 	and.w	r3, r3, #1
 800664c:	2b01      	cmp	r3, #1
 800664e:	d0f0      	beq.n	8006632 <USB_CoreReset+0x36>

  return HAL_OK;
 8006650:	2300      	movs	r3, #0
}
 8006652:	4618      	mov	r0, r3
 8006654:	3714      	adds	r7, #20
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	4770      	bx	lr
 800665e:	bf00      	nop
 8006660:	00030d40 	.word	0x00030d40

08006664 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b084      	sub	sp, #16
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
 800666c:	460b      	mov	r3, r1
 800666e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006670:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006674:	f002 ff1c 	bl	80094b0 <USBD_static_malloc>
 8006678:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d109      	bne.n	8006694 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	32b0      	adds	r2, #176	; 0xb0
 800668a:	2100      	movs	r1, #0
 800668c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006690:	2302      	movs	r3, #2
 8006692:	e0d4      	b.n	800683e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006694:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006698:	2100      	movs	r1, #0
 800669a:	68f8      	ldr	r0, [r7, #12]
 800669c:	f003 f812 	bl	80096c4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	32b0      	adds	r2, #176	; 0xb0
 80066aa:	68f9      	ldr	r1, [r7, #12]
 80066ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	32b0      	adds	r2, #176	; 0xb0
 80066ba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	7c1b      	ldrb	r3, [r3, #16]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d138      	bne.n	800673e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80066cc:	4b5e      	ldr	r3, [pc, #376]	; (8006848 <USBD_CDC_Init+0x1e4>)
 80066ce:	7819      	ldrb	r1, [r3, #0]
 80066d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80066d4:	2202      	movs	r2, #2
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f002 fdc7 	bl	800926a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80066dc:	4b5a      	ldr	r3, [pc, #360]	; (8006848 <USBD_CDC_Init+0x1e4>)
 80066de:	781b      	ldrb	r3, [r3, #0]
 80066e0:	f003 020f 	and.w	r2, r3, #15
 80066e4:	6879      	ldr	r1, [r7, #4]
 80066e6:	4613      	mov	r3, r2
 80066e8:	009b      	lsls	r3, r3, #2
 80066ea:	4413      	add	r3, r2
 80066ec:	009b      	lsls	r3, r3, #2
 80066ee:	440b      	add	r3, r1
 80066f0:	3324      	adds	r3, #36	; 0x24
 80066f2:	2201      	movs	r2, #1
 80066f4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80066f6:	4b55      	ldr	r3, [pc, #340]	; (800684c <USBD_CDC_Init+0x1e8>)
 80066f8:	7819      	ldrb	r1, [r3, #0]
 80066fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80066fe:	2202      	movs	r2, #2
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f002 fdb2 	bl	800926a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006706:	4b51      	ldr	r3, [pc, #324]	; (800684c <USBD_CDC_Init+0x1e8>)
 8006708:	781b      	ldrb	r3, [r3, #0]
 800670a:	f003 020f 	and.w	r2, r3, #15
 800670e:	6879      	ldr	r1, [r7, #4]
 8006710:	4613      	mov	r3, r2
 8006712:	009b      	lsls	r3, r3, #2
 8006714:	4413      	add	r3, r2
 8006716:	009b      	lsls	r3, r3, #2
 8006718:	440b      	add	r3, r1
 800671a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800671e:	2201      	movs	r2, #1
 8006720:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006722:	4b4b      	ldr	r3, [pc, #300]	; (8006850 <USBD_CDC_Init+0x1ec>)
 8006724:	781b      	ldrb	r3, [r3, #0]
 8006726:	f003 020f 	and.w	r2, r3, #15
 800672a:	6879      	ldr	r1, [r7, #4]
 800672c:	4613      	mov	r3, r2
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	4413      	add	r3, r2
 8006732:	009b      	lsls	r3, r3, #2
 8006734:	440b      	add	r3, r1
 8006736:	3326      	adds	r3, #38	; 0x26
 8006738:	2210      	movs	r2, #16
 800673a:	801a      	strh	r2, [r3, #0]
 800673c:	e035      	b.n	80067aa <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800673e:	4b42      	ldr	r3, [pc, #264]	; (8006848 <USBD_CDC_Init+0x1e4>)
 8006740:	7819      	ldrb	r1, [r3, #0]
 8006742:	2340      	movs	r3, #64	; 0x40
 8006744:	2202      	movs	r2, #2
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f002 fd8f 	bl	800926a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800674c:	4b3e      	ldr	r3, [pc, #248]	; (8006848 <USBD_CDC_Init+0x1e4>)
 800674e:	781b      	ldrb	r3, [r3, #0]
 8006750:	f003 020f 	and.w	r2, r3, #15
 8006754:	6879      	ldr	r1, [r7, #4]
 8006756:	4613      	mov	r3, r2
 8006758:	009b      	lsls	r3, r3, #2
 800675a:	4413      	add	r3, r2
 800675c:	009b      	lsls	r3, r3, #2
 800675e:	440b      	add	r3, r1
 8006760:	3324      	adds	r3, #36	; 0x24
 8006762:	2201      	movs	r2, #1
 8006764:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006766:	4b39      	ldr	r3, [pc, #228]	; (800684c <USBD_CDC_Init+0x1e8>)
 8006768:	7819      	ldrb	r1, [r3, #0]
 800676a:	2340      	movs	r3, #64	; 0x40
 800676c:	2202      	movs	r2, #2
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f002 fd7b 	bl	800926a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006774:	4b35      	ldr	r3, [pc, #212]	; (800684c <USBD_CDC_Init+0x1e8>)
 8006776:	781b      	ldrb	r3, [r3, #0]
 8006778:	f003 020f 	and.w	r2, r3, #15
 800677c:	6879      	ldr	r1, [r7, #4]
 800677e:	4613      	mov	r3, r2
 8006780:	009b      	lsls	r3, r3, #2
 8006782:	4413      	add	r3, r2
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	440b      	add	r3, r1
 8006788:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800678c:	2201      	movs	r2, #1
 800678e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006790:	4b2f      	ldr	r3, [pc, #188]	; (8006850 <USBD_CDC_Init+0x1ec>)
 8006792:	781b      	ldrb	r3, [r3, #0]
 8006794:	f003 020f 	and.w	r2, r3, #15
 8006798:	6879      	ldr	r1, [r7, #4]
 800679a:	4613      	mov	r3, r2
 800679c:	009b      	lsls	r3, r3, #2
 800679e:	4413      	add	r3, r2
 80067a0:	009b      	lsls	r3, r3, #2
 80067a2:	440b      	add	r3, r1
 80067a4:	3326      	adds	r3, #38	; 0x26
 80067a6:	2210      	movs	r2, #16
 80067a8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80067aa:	4b29      	ldr	r3, [pc, #164]	; (8006850 <USBD_CDC_Init+0x1ec>)
 80067ac:	7819      	ldrb	r1, [r3, #0]
 80067ae:	2308      	movs	r3, #8
 80067b0:	2203      	movs	r2, #3
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f002 fd59 	bl	800926a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80067b8:	4b25      	ldr	r3, [pc, #148]	; (8006850 <USBD_CDC_Init+0x1ec>)
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	f003 020f 	and.w	r2, r3, #15
 80067c0:	6879      	ldr	r1, [r7, #4]
 80067c2:	4613      	mov	r3, r2
 80067c4:	009b      	lsls	r3, r3, #2
 80067c6:	4413      	add	r3, r2
 80067c8:	009b      	lsls	r3, r3, #2
 80067ca:	440b      	add	r3, r1
 80067cc:	3324      	adds	r3, #36	; 0x24
 80067ce:	2201      	movs	r2, #1
 80067d0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2200      	movs	r2, #0
 80067d6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	33b0      	adds	r3, #176	; 0xb0
 80067e4:	009b      	lsls	r3, r3, #2
 80067e6:	4413      	add	r3, r2
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2200      	movs	r2, #0
 80067f2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2200      	movs	r2, #0
 80067fa:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006804:	2b00      	cmp	r3, #0
 8006806:	d101      	bne.n	800680c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006808:	2302      	movs	r3, #2
 800680a:	e018      	b.n	800683e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	7c1b      	ldrb	r3, [r3, #16]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d10a      	bne.n	800682a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006814:	4b0d      	ldr	r3, [pc, #52]	; (800684c <USBD_CDC_Init+0x1e8>)
 8006816:	7819      	ldrb	r1, [r3, #0]
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800681e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f002 fe10 	bl	8009448 <USBD_LL_PrepareReceive>
 8006828:	e008      	b.n	800683c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800682a:	4b08      	ldr	r3, [pc, #32]	; (800684c <USBD_CDC_Init+0x1e8>)
 800682c:	7819      	ldrb	r1, [r3, #0]
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006834:	2340      	movs	r3, #64	; 0x40
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f002 fe06 	bl	8009448 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800683c:	2300      	movs	r3, #0
}
 800683e:	4618      	mov	r0, r3
 8006840:	3710      	adds	r7, #16
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}
 8006846:	bf00      	nop
 8006848:	20000093 	.word	0x20000093
 800684c:	20000094 	.word	0x20000094
 8006850:	20000095 	.word	0x20000095

08006854 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b082      	sub	sp, #8
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	460b      	mov	r3, r1
 800685e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006860:	4b3a      	ldr	r3, [pc, #232]	; (800694c <USBD_CDC_DeInit+0xf8>)
 8006862:	781b      	ldrb	r3, [r3, #0]
 8006864:	4619      	mov	r1, r3
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f002 fd25 	bl	80092b6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800686c:	4b37      	ldr	r3, [pc, #220]	; (800694c <USBD_CDC_DeInit+0xf8>)
 800686e:	781b      	ldrb	r3, [r3, #0]
 8006870:	f003 020f 	and.w	r2, r3, #15
 8006874:	6879      	ldr	r1, [r7, #4]
 8006876:	4613      	mov	r3, r2
 8006878:	009b      	lsls	r3, r3, #2
 800687a:	4413      	add	r3, r2
 800687c:	009b      	lsls	r3, r3, #2
 800687e:	440b      	add	r3, r1
 8006880:	3324      	adds	r3, #36	; 0x24
 8006882:	2200      	movs	r2, #0
 8006884:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006886:	4b32      	ldr	r3, [pc, #200]	; (8006950 <USBD_CDC_DeInit+0xfc>)
 8006888:	781b      	ldrb	r3, [r3, #0]
 800688a:	4619      	mov	r1, r3
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f002 fd12 	bl	80092b6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006892:	4b2f      	ldr	r3, [pc, #188]	; (8006950 <USBD_CDC_DeInit+0xfc>)
 8006894:	781b      	ldrb	r3, [r3, #0]
 8006896:	f003 020f 	and.w	r2, r3, #15
 800689a:	6879      	ldr	r1, [r7, #4]
 800689c:	4613      	mov	r3, r2
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	4413      	add	r3, r2
 80068a2:	009b      	lsls	r3, r3, #2
 80068a4:	440b      	add	r3, r1
 80068a6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80068aa:	2200      	movs	r2, #0
 80068ac:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80068ae:	4b29      	ldr	r3, [pc, #164]	; (8006954 <USBD_CDC_DeInit+0x100>)
 80068b0:	781b      	ldrb	r3, [r3, #0]
 80068b2:	4619      	mov	r1, r3
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f002 fcfe 	bl	80092b6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80068ba:	4b26      	ldr	r3, [pc, #152]	; (8006954 <USBD_CDC_DeInit+0x100>)
 80068bc:	781b      	ldrb	r3, [r3, #0]
 80068be:	f003 020f 	and.w	r2, r3, #15
 80068c2:	6879      	ldr	r1, [r7, #4]
 80068c4:	4613      	mov	r3, r2
 80068c6:	009b      	lsls	r3, r3, #2
 80068c8:	4413      	add	r3, r2
 80068ca:	009b      	lsls	r3, r3, #2
 80068cc:	440b      	add	r3, r1
 80068ce:	3324      	adds	r3, #36	; 0x24
 80068d0:	2200      	movs	r2, #0
 80068d2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80068d4:	4b1f      	ldr	r3, [pc, #124]	; (8006954 <USBD_CDC_DeInit+0x100>)
 80068d6:	781b      	ldrb	r3, [r3, #0]
 80068d8:	f003 020f 	and.w	r2, r3, #15
 80068dc:	6879      	ldr	r1, [r7, #4]
 80068de:	4613      	mov	r3, r2
 80068e0:	009b      	lsls	r3, r3, #2
 80068e2:	4413      	add	r3, r2
 80068e4:	009b      	lsls	r3, r3, #2
 80068e6:	440b      	add	r3, r1
 80068e8:	3326      	adds	r3, #38	; 0x26
 80068ea:	2200      	movs	r2, #0
 80068ec:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	32b0      	adds	r2, #176	; 0xb0
 80068f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d01f      	beq.n	8006940 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006906:	687a      	ldr	r2, [r7, #4]
 8006908:	33b0      	adds	r3, #176	; 0xb0
 800690a:	009b      	lsls	r3, r3, #2
 800690c:	4413      	add	r3, r2
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	32b0      	adds	r2, #176	; 0xb0
 800691e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006922:	4618      	mov	r0, r3
 8006924:	f002 fdd2 	bl	80094cc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	32b0      	adds	r2, #176	; 0xb0
 8006932:	2100      	movs	r1, #0
 8006934:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2200      	movs	r2, #0
 800693c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006940:	2300      	movs	r3, #0
}
 8006942:	4618      	mov	r0, r3
 8006944:	3708      	adds	r7, #8
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
 800694a:	bf00      	nop
 800694c:	20000093 	.word	0x20000093
 8006950:	20000094 	.word	0x20000094
 8006954:	20000095 	.word	0x20000095

08006958 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b086      	sub	sp, #24
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
 8006960:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	32b0      	adds	r2, #176	; 0xb0
 800696c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006970:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006972:	2300      	movs	r3, #0
 8006974:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006976:	2300      	movs	r3, #0
 8006978:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800697a:	2300      	movs	r3, #0
 800697c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d101      	bne.n	8006988 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006984:	2303      	movs	r3, #3
 8006986:	e0bf      	b.n	8006b08 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	781b      	ldrb	r3, [r3, #0]
 800698c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006990:	2b00      	cmp	r3, #0
 8006992:	d050      	beq.n	8006a36 <USBD_CDC_Setup+0xde>
 8006994:	2b20      	cmp	r3, #32
 8006996:	f040 80af 	bne.w	8006af8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	88db      	ldrh	r3, [r3, #6]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d03a      	beq.n	8006a18 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	781b      	ldrb	r3, [r3, #0]
 80069a6:	b25b      	sxtb	r3, r3
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	da1b      	bge.n	80069e4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	33b0      	adds	r3, #176	; 0xb0
 80069b6:	009b      	lsls	r3, r3, #2
 80069b8:	4413      	add	r3, r2
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	683a      	ldr	r2, [r7, #0]
 80069c0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80069c2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80069c4:	683a      	ldr	r2, [r7, #0]
 80069c6:	88d2      	ldrh	r2, [r2, #6]
 80069c8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	88db      	ldrh	r3, [r3, #6]
 80069ce:	2b07      	cmp	r3, #7
 80069d0:	bf28      	it	cs
 80069d2:	2307      	movcs	r3, #7
 80069d4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	89fa      	ldrh	r2, [r7, #14]
 80069da:	4619      	mov	r1, r3
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f001 fd89 	bl	80084f4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80069e2:	e090      	b.n	8006b06 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	785a      	ldrb	r2, [r3, #1]
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	88db      	ldrh	r3, [r3, #6]
 80069f2:	2b3f      	cmp	r3, #63	; 0x3f
 80069f4:	d803      	bhi.n	80069fe <USBD_CDC_Setup+0xa6>
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	88db      	ldrh	r3, [r3, #6]
 80069fa:	b2da      	uxtb	r2, r3
 80069fc:	e000      	b.n	8006a00 <USBD_CDC_Setup+0xa8>
 80069fe:	2240      	movs	r2, #64	; 0x40
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006a06:	6939      	ldr	r1, [r7, #16]
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006a0e:	461a      	mov	r2, r3
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f001 fd9b 	bl	800854c <USBD_CtlPrepareRx>
      break;
 8006a16:	e076      	b.n	8006b06 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	33b0      	adds	r3, #176	; 0xb0
 8006a22:	009b      	lsls	r3, r3, #2
 8006a24:	4413      	add	r3, r2
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	683a      	ldr	r2, [r7, #0]
 8006a2c:	7850      	ldrb	r0, [r2, #1]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	6839      	ldr	r1, [r7, #0]
 8006a32:	4798      	blx	r3
      break;
 8006a34:	e067      	b.n	8006b06 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	785b      	ldrb	r3, [r3, #1]
 8006a3a:	2b0b      	cmp	r3, #11
 8006a3c:	d851      	bhi.n	8006ae2 <USBD_CDC_Setup+0x18a>
 8006a3e:	a201      	add	r2, pc, #4	; (adr r2, 8006a44 <USBD_CDC_Setup+0xec>)
 8006a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a44:	08006a75 	.word	0x08006a75
 8006a48:	08006af1 	.word	0x08006af1
 8006a4c:	08006ae3 	.word	0x08006ae3
 8006a50:	08006ae3 	.word	0x08006ae3
 8006a54:	08006ae3 	.word	0x08006ae3
 8006a58:	08006ae3 	.word	0x08006ae3
 8006a5c:	08006ae3 	.word	0x08006ae3
 8006a60:	08006ae3 	.word	0x08006ae3
 8006a64:	08006ae3 	.word	0x08006ae3
 8006a68:	08006ae3 	.word	0x08006ae3
 8006a6c:	08006a9f 	.word	0x08006a9f
 8006a70:	08006ac9 	.word	0x08006ac9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a7a:	b2db      	uxtb	r3, r3
 8006a7c:	2b03      	cmp	r3, #3
 8006a7e:	d107      	bne.n	8006a90 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006a80:	f107 030a 	add.w	r3, r7, #10
 8006a84:	2202      	movs	r2, #2
 8006a86:	4619      	mov	r1, r3
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f001 fd33 	bl	80084f4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a8e:	e032      	b.n	8006af6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006a90:	6839      	ldr	r1, [r7, #0]
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f001 fcbd 	bl	8008412 <USBD_CtlError>
            ret = USBD_FAIL;
 8006a98:	2303      	movs	r3, #3
 8006a9a:	75fb      	strb	r3, [r7, #23]
          break;
 8006a9c:	e02b      	b.n	8006af6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006aa4:	b2db      	uxtb	r3, r3
 8006aa6:	2b03      	cmp	r3, #3
 8006aa8:	d107      	bne.n	8006aba <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006aaa:	f107 030d 	add.w	r3, r7, #13
 8006aae:	2201      	movs	r2, #1
 8006ab0:	4619      	mov	r1, r3
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f001 fd1e 	bl	80084f4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006ab8:	e01d      	b.n	8006af6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006aba:	6839      	ldr	r1, [r7, #0]
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f001 fca8 	bl	8008412 <USBD_CtlError>
            ret = USBD_FAIL;
 8006ac2:	2303      	movs	r3, #3
 8006ac4:	75fb      	strb	r3, [r7, #23]
          break;
 8006ac6:	e016      	b.n	8006af6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ace:	b2db      	uxtb	r3, r3
 8006ad0:	2b03      	cmp	r3, #3
 8006ad2:	d00f      	beq.n	8006af4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006ad4:	6839      	ldr	r1, [r7, #0]
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f001 fc9b 	bl	8008412 <USBD_CtlError>
            ret = USBD_FAIL;
 8006adc:	2303      	movs	r3, #3
 8006ade:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006ae0:	e008      	b.n	8006af4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006ae2:	6839      	ldr	r1, [r7, #0]
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f001 fc94 	bl	8008412 <USBD_CtlError>
          ret = USBD_FAIL;
 8006aea:	2303      	movs	r3, #3
 8006aec:	75fb      	strb	r3, [r7, #23]
          break;
 8006aee:	e002      	b.n	8006af6 <USBD_CDC_Setup+0x19e>
          break;
 8006af0:	bf00      	nop
 8006af2:	e008      	b.n	8006b06 <USBD_CDC_Setup+0x1ae>
          break;
 8006af4:	bf00      	nop
      }
      break;
 8006af6:	e006      	b.n	8006b06 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006af8:	6839      	ldr	r1, [r7, #0]
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f001 fc89 	bl	8008412 <USBD_CtlError>
      ret = USBD_FAIL;
 8006b00:	2303      	movs	r3, #3
 8006b02:	75fb      	strb	r3, [r7, #23]
      break;
 8006b04:	bf00      	nop
  }

  return (uint8_t)ret;
 8006b06:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3718      	adds	r7, #24
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}

08006b10 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b084      	sub	sp, #16
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	460b      	mov	r3, r1
 8006b1a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006b22:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	32b0      	adds	r2, #176	; 0xb0
 8006b2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d101      	bne.n	8006b3a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006b36:	2303      	movs	r3, #3
 8006b38:	e065      	b.n	8006c06 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	32b0      	adds	r2, #176	; 0xb0
 8006b44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b48:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006b4a:	78fb      	ldrb	r3, [r7, #3]
 8006b4c:	f003 020f 	and.w	r2, r3, #15
 8006b50:	6879      	ldr	r1, [r7, #4]
 8006b52:	4613      	mov	r3, r2
 8006b54:	009b      	lsls	r3, r3, #2
 8006b56:	4413      	add	r3, r2
 8006b58:	009b      	lsls	r3, r3, #2
 8006b5a:	440b      	add	r3, r1
 8006b5c:	3318      	adds	r3, #24
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d02f      	beq.n	8006bc4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006b64:	78fb      	ldrb	r3, [r7, #3]
 8006b66:	f003 020f 	and.w	r2, r3, #15
 8006b6a:	6879      	ldr	r1, [r7, #4]
 8006b6c:	4613      	mov	r3, r2
 8006b6e:	009b      	lsls	r3, r3, #2
 8006b70:	4413      	add	r3, r2
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	440b      	add	r3, r1
 8006b76:	3318      	adds	r3, #24
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	78fb      	ldrb	r3, [r7, #3]
 8006b7c:	f003 010f 	and.w	r1, r3, #15
 8006b80:	68f8      	ldr	r0, [r7, #12]
 8006b82:	460b      	mov	r3, r1
 8006b84:	00db      	lsls	r3, r3, #3
 8006b86:	440b      	add	r3, r1
 8006b88:	009b      	lsls	r3, r3, #2
 8006b8a:	4403      	add	r3, r0
 8006b8c:	3348      	adds	r3, #72	; 0x48
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	fbb2 f1f3 	udiv	r1, r2, r3
 8006b94:	fb01 f303 	mul.w	r3, r1, r3
 8006b98:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d112      	bne.n	8006bc4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006b9e:	78fb      	ldrb	r3, [r7, #3]
 8006ba0:	f003 020f 	and.w	r2, r3, #15
 8006ba4:	6879      	ldr	r1, [r7, #4]
 8006ba6:	4613      	mov	r3, r2
 8006ba8:	009b      	lsls	r3, r3, #2
 8006baa:	4413      	add	r3, r2
 8006bac:	009b      	lsls	r3, r3, #2
 8006bae:	440b      	add	r3, r1
 8006bb0:	3318      	adds	r3, #24
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006bb6:	78f9      	ldrb	r1, [r7, #3]
 8006bb8:	2300      	movs	r3, #0
 8006bba:	2200      	movs	r2, #0
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f002 fc22 	bl	8009406 <USBD_LL_Transmit>
 8006bc2:	e01f      	b.n	8006c04 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006bd2:	687a      	ldr	r2, [r7, #4]
 8006bd4:	33b0      	adds	r3, #176	; 0xb0
 8006bd6:	009b      	lsls	r3, r3, #2
 8006bd8:	4413      	add	r3, r2
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	691b      	ldr	r3, [r3, #16]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d010      	beq.n	8006c04 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006be8:	687a      	ldr	r2, [r7, #4]
 8006bea:	33b0      	adds	r3, #176	; 0xb0
 8006bec:	009b      	lsls	r3, r3, #2
 8006bee:	4413      	add	r3, r2
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	691b      	ldr	r3, [r3, #16]
 8006bf4:	68ba      	ldr	r2, [r7, #8]
 8006bf6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006bfa:	68ba      	ldr	r2, [r7, #8]
 8006bfc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006c00:	78fa      	ldrb	r2, [r7, #3]
 8006c02:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006c04:	2300      	movs	r3, #0
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3710      	adds	r7, #16
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}

08006c0e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006c0e:	b580      	push	{r7, lr}
 8006c10:	b084      	sub	sp, #16
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	6078      	str	r0, [r7, #4]
 8006c16:	460b      	mov	r3, r1
 8006c18:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	32b0      	adds	r2, #176	; 0xb0
 8006c24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c28:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	32b0      	adds	r2, #176	; 0xb0
 8006c34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d101      	bne.n	8006c40 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006c3c:	2303      	movs	r3, #3
 8006c3e:	e01a      	b.n	8006c76 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006c40:	78fb      	ldrb	r3, [r7, #3]
 8006c42:	4619      	mov	r1, r3
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f002 fc20 	bl	800948a <USBD_LL_GetRxDataSize>
 8006c4a:	4602      	mov	r2, r0
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006c58:	687a      	ldr	r2, [r7, #4]
 8006c5a:	33b0      	adds	r3, #176	; 0xb0
 8006c5c:	009b      	lsls	r3, r3, #2
 8006c5e:	4413      	add	r3, r2
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	68db      	ldr	r3, [r3, #12]
 8006c64:	68fa      	ldr	r2, [r7, #12]
 8006c66:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006c6a:	68fa      	ldr	r2, [r7, #12]
 8006c6c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006c70:	4611      	mov	r1, r2
 8006c72:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006c74:	2300      	movs	r3, #0
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3710      	adds	r7, #16
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}

08006c7e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006c7e:	b580      	push	{r7, lr}
 8006c80:	b084      	sub	sp, #16
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	32b0      	adds	r2, #176	; 0xb0
 8006c90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c94:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d101      	bne.n	8006ca0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006c9c:	2303      	movs	r3, #3
 8006c9e:	e025      	b.n	8006cec <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006ca6:	687a      	ldr	r2, [r7, #4]
 8006ca8:	33b0      	adds	r3, #176	; 0xb0
 8006caa:	009b      	lsls	r3, r3, #2
 8006cac:	4413      	add	r3, r2
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d01a      	beq.n	8006cea <USBD_CDC_EP0_RxReady+0x6c>
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006cba:	2bff      	cmp	r3, #255	; 0xff
 8006cbc:	d015      	beq.n	8006cea <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006cc4:	687a      	ldr	r2, [r7, #4]
 8006cc6:	33b0      	adds	r3, #176	; 0xb0
 8006cc8:	009b      	lsls	r3, r3, #2
 8006cca:	4413      	add	r3, r2
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	689b      	ldr	r3, [r3, #8]
 8006cd0:	68fa      	ldr	r2, [r7, #12]
 8006cd2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006cd6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006cd8:	68fa      	ldr	r2, [r7, #12]
 8006cda:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006cde:	b292      	uxth	r2, r2
 8006ce0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	22ff      	movs	r2, #255	; 0xff
 8006ce6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006cea:	2300      	movs	r3, #0
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3710      	adds	r7, #16
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}

08006cf4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b086      	sub	sp, #24
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006cfc:	2182      	movs	r1, #130	; 0x82
 8006cfe:	4818      	ldr	r0, [pc, #96]	; (8006d60 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006d00:	f000 fd4f 	bl	80077a2 <USBD_GetEpDesc>
 8006d04:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006d06:	2101      	movs	r1, #1
 8006d08:	4815      	ldr	r0, [pc, #84]	; (8006d60 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006d0a:	f000 fd4a 	bl	80077a2 <USBD_GetEpDesc>
 8006d0e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006d10:	2181      	movs	r1, #129	; 0x81
 8006d12:	4813      	ldr	r0, [pc, #76]	; (8006d60 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006d14:	f000 fd45 	bl	80077a2 <USBD_GetEpDesc>
 8006d18:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d002      	beq.n	8006d26 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	2210      	movs	r2, #16
 8006d24:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d006      	beq.n	8006d3a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d34:	711a      	strb	r2, [r3, #4]
 8006d36:	2200      	movs	r2, #0
 8006d38:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d006      	beq.n	8006d4e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2200      	movs	r2, #0
 8006d44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d48:	711a      	strb	r2, [r3, #4]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2243      	movs	r2, #67	; 0x43
 8006d52:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006d54:	4b02      	ldr	r3, [pc, #8]	; (8006d60 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3718      	adds	r7, #24
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}
 8006d5e:	bf00      	nop
 8006d60:	20000050 	.word	0x20000050

08006d64 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b086      	sub	sp, #24
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006d6c:	2182      	movs	r1, #130	; 0x82
 8006d6e:	4818      	ldr	r0, [pc, #96]	; (8006dd0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006d70:	f000 fd17 	bl	80077a2 <USBD_GetEpDesc>
 8006d74:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006d76:	2101      	movs	r1, #1
 8006d78:	4815      	ldr	r0, [pc, #84]	; (8006dd0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006d7a:	f000 fd12 	bl	80077a2 <USBD_GetEpDesc>
 8006d7e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006d80:	2181      	movs	r1, #129	; 0x81
 8006d82:	4813      	ldr	r0, [pc, #76]	; (8006dd0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006d84:	f000 fd0d 	bl	80077a2 <USBD_GetEpDesc>
 8006d88:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d002      	beq.n	8006d96 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	2210      	movs	r2, #16
 8006d94:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d006      	beq.n	8006daa <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	711a      	strb	r2, [r3, #4]
 8006da2:	2200      	movs	r2, #0
 8006da4:	f042 0202 	orr.w	r2, r2, #2
 8006da8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d006      	beq.n	8006dbe <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2200      	movs	r2, #0
 8006db4:	711a      	strb	r2, [r3, #4]
 8006db6:	2200      	movs	r2, #0
 8006db8:	f042 0202 	orr.w	r2, r2, #2
 8006dbc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2243      	movs	r2, #67	; 0x43
 8006dc2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006dc4:	4b02      	ldr	r3, [pc, #8]	; (8006dd0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3718      	adds	r7, #24
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}
 8006dce:	bf00      	nop
 8006dd0:	20000050 	.word	0x20000050

08006dd4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b086      	sub	sp, #24
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006ddc:	2182      	movs	r1, #130	; 0x82
 8006dde:	4818      	ldr	r0, [pc, #96]	; (8006e40 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006de0:	f000 fcdf 	bl	80077a2 <USBD_GetEpDesc>
 8006de4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006de6:	2101      	movs	r1, #1
 8006de8:	4815      	ldr	r0, [pc, #84]	; (8006e40 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006dea:	f000 fcda 	bl	80077a2 <USBD_GetEpDesc>
 8006dee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006df0:	2181      	movs	r1, #129	; 0x81
 8006df2:	4813      	ldr	r0, [pc, #76]	; (8006e40 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006df4:	f000 fcd5 	bl	80077a2 <USBD_GetEpDesc>
 8006df8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d002      	beq.n	8006e06 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	2210      	movs	r2, #16
 8006e04:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d006      	beq.n	8006e1a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e14:	711a      	strb	r2, [r3, #4]
 8006e16:	2200      	movs	r2, #0
 8006e18:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d006      	beq.n	8006e2e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2200      	movs	r2, #0
 8006e24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e28:	711a      	strb	r2, [r3, #4]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2243      	movs	r2, #67	; 0x43
 8006e32:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006e34:	4b02      	ldr	r3, [pc, #8]	; (8006e40 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3718      	adds	r7, #24
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
 8006e3e:	bf00      	nop
 8006e40:	20000050 	.word	0x20000050

08006e44 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b083      	sub	sp, #12
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	220a      	movs	r2, #10
 8006e50:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006e52:	4b03      	ldr	r3, [pc, #12]	; (8006e60 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	370c      	adds	r7, #12
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr
 8006e60:	2000000c 	.word	0x2000000c

08006e64 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b083      	sub	sp, #12
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d101      	bne.n	8006e78 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006e74:	2303      	movs	r3, #3
 8006e76:	e009      	b.n	8006e8c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006e7e:	687a      	ldr	r2, [r7, #4]
 8006e80:	33b0      	adds	r3, #176	; 0xb0
 8006e82:	009b      	lsls	r3, r3, #2
 8006e84:	4413      	add	r3, r2
 8006e86:	683a      	ldr	r2, [r7, #0]
 8006e88:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006e8a:	2300      	movs	r3, #0
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	370c      	adds	r7, #12
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr

08006e98 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b087      	sub	sp, #28
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	60f8      	str	r0, [r7, #12]
 8006ea0:	60b9      	str	r1, [r7, #8]
 8006ea2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	32b0      	adds	r2, #176	; 0xb0
 8006eae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eb2:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d101      	bne.n	8006ebe <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006eba:	2303      	movs	r3, #3
 8006ebc:	e008      	b.n	8006ed0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	68ba      	ldr	r2, [r7, #8]
 8006ec2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	687a      	ldr	r2, [r7, #4]
 8006eca:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006ece:	2300      	movs	r3, #0
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	371c      	adds	r7, #28
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr

08006edc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b085      	sub	sp, #20
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
 8006ee4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	32b0      	adds	r2, #176	; 0xb0
 8006ef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ef4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d101      	bne.n	8006f00 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006efc:	2303      	movs	r3, #3
 8006efe:	e004      	b.n	8006f0a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	683a      	ldr	r2, [r7, #0]
 8006f04:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006f08:	2300      	movs	r3, #0
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3714      	adds	r7, #20
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f14:	4770      	bx	lr
	...

08006f18 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b084      	sub	sp, #16
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	32b0      	adds	r2, #176	; 0xb0
 8006f2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f2e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006f30:	2301      	movs	r3, #1
 8006f32:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	32b0      	adds	r2, #176	; 0xb0
 8006f3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d101      	bne.n	8006f4a <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006f46:	2303      	movs	r3, #3
 8006f48:	e025      	b.n	8006f96 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d11f      	bne.n	8006f94 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	2201      	movs	r2, #1
 8006f58:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006f5c:	4b10      	ldr	r3, [pc, #64]	; (8006fa0 <USBD_CDC_TransmitPacket+0x88>)
 8006f5e:	781b      	ldrb	r3, [r3, #0]
 8006f60:	f003 020f 	and.w	r2, r3, #15
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	4613      	mov	r3, r2
 8006f6e:	009b      	lsls	r3, r3, #2
 8006f70:	4413      	add	r3, r2
 8006f72:	009b      	lsls	r3, r3, #2
 8006f74:	4403      	add	r3, r0
 8006f76:	3318      	adds	r3, #24
 8006f78:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006f7a:	4b09      	ldr	r3, [pc, #36]	; (8006fa0 <USBD_CDC_TransmitPacket+0x88>)
 8006f7c:	7819      	ldrb	r1, [r3, #0]
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f002 fa3b 	bl	8009406 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006f90:	2300      	movs	r3, #0
 8006f92:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3710      	adds	r7, #16
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}
 8006f9e:	bf00      	nop
 8006fa0:	20000093 	.word	0x20000093

08006fa4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b084      	sub	sp, #16
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	32b0      	adds	r2, #176	; 0xb0
 8006fb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fba:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	32b0      	adds	r2, #176	; 0xb0
 8006fc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d101      	bne.n	8006fd2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006fce:	2303      	movs	r3, #3
 8006fd0:	e018      	b.n	8007004 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	7c1b      	ldrb	r3, [r3, #16]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d10a      	bne.n	8006ff0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006fda:	4b0c      	ldr	r3, [pc, #48]	; (800700c <USBD_CDC_ReceivePacket+0x68>)
 8006fdc:	7819      	ldrb	r1, [r3, #0]
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006fe4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f002 fa2d 	bl	8009448 <USBD_LL_PrepareReceive>
 8006fee:	e008      	b.n	8007002 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006ff0:	4b06      	ldr	r3, [pc, #24]	; (800700c <USBD_CDC_ReceivePacket+0x68>)
 8006ff2:	7819      	ldrb	r1, [r3, #0]
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006ffa:	2340      	movs	r3, #64	; 0x40
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f002 fa23 	bl	8009448 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007002:	2300      	movs	r3, #0
}
 8007004:	4618      	mov	r0, r3
 8007006:	3710      	adds	r7, #16
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}
 800700c:	20000094 	.word	0x20000094

08007010 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b086      	sub	sp, #24
 8007014:	af00      	add	r7, sp, #0
 8007016:	60f8      	str	r0, [r7, #12]
 8007018:	60b9      	str	r1, [r7, #8]
 800701a:	4613      	mov	r3, r2
 800701c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d101      	bne.n	8007028 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007024:	2303      	movs	r3, #3
 8007026:	e01f      	b.n	8007068 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2200      	movs	r2, #0
 800702c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2200      	movs	r2, #0
 8007034:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	2200      	movs	r2, #0
 800703c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d003      	beq.n	800704e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	68ba      	ldr	r2, [r7, #8]
 800704a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	2201      	movs	r2, #1
 8007052:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	79fa      	ldrb	r2, [r7, #7]
 800705a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800705c:	68f8      	ldr	r0, [r7, #12]
 800705e:	f002 f89d 	bl	800919c <USBD_LL_Init>
 8007062:	4603      	mov	r3, r0
 8007064:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007066:	7dfb      	ldrb	r3, [r7, #23]
}
 8007068:	4618      	mov	r0, r3
 800706a:	3718      	adds	r7, #24
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}

08007070 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b084      	sub	sp, #16
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
 8007078:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800707a:	2300      	movs	r3, #0
 800707c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d101      	bne.n	8007088 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007084:	2303      	movs	r3, #3
 8007086:	e025      	b.n	80070d4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	683a      	ldr	r2, [r7, #0]
 800708c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	32ae      	adds	r2, #174	; 0xae
 800709a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800709e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d00f      	beq.n	80070c4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	32ae      	adds	r2, #174	; 0xae
 80070ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070b4:	f107 020e 	add.w	r2, r7, #14
 80070b8:	4610      	mov	r0, r2
 80070ba:	4798      	blx	r3
 80070bc:	4602      	mov	r2, r0
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80070ca:	1c5a      	adds	r2, r3, #1
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80070d2:	2300      	movs	r3, #0
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3710      	adds	r7, #16
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}

080070dc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b082      	sub	sp, #8
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f002 f8a5 	bl	8009234 <USBD_LL_Start>
 80070ea:	4603      	mov	r3, r0
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3708      	adds	r7, #8
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}

080070f4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b083      	sub	sp, #12
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80070fc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80070fe:	4618      	mov	r0, r3
 8007100:	370c      	adds	r7, #12
 8007102:	46bd      	mov	sp, r7
 8007104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007108:	4770      	bx	lr

0800710a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800710a:	b580      	push	{r7, lr}
 800710c:	b084      	sub	sp, #16
 800710e:	af00      	add	r7, sp, #0
 8007110:	6078      	str	r0, [r7, #4]
 8007112:	460b      	mov	r3, r1
 8007114:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007116:	2300      	movs	r3, #0
 8007118:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007120:	2b00      	cmp	r3, #0
 8007122:	d009      	beq.n	8007138 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	78fa      	ldrb	r2, [r7, #3]
 800712e:	4611      	mov	r1, r2
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	4798      	blx	r3
 8007134:	4603      	mov	r3, r0
 8007136:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007138:	7bfb      	ldrb	r3, [r7, #15]
}
 800713a:	4618      	mov	r0, r3
 800713c:	3710      	adds	r7, #16
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}

08007142 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007142:	b580      	push	{r7, lr}
 8007144:	b084      	sub	sp, #16
 8007146:	af00      	add	r7, sp, #0
 8007148:	6078      	str	r0, [r7, #4]
 800714a:	460b      	mov	r3, r1
 800714c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800714e:	2300      	movs	r3, #0
 8007150:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	78fa      	ldrb	r2, [r7, #3]
 800715c:	4611      	mov	r1, r2
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	4798      	blx	r3
 8007162:	4603      	mov	r3, r0
 8007164:	2b00      	cmp	r3, #0
 8007166:	d001      	beq.n	800716c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007168:	2303      	movs	r3, #3
 800716a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800716c:	7bfb      	ldrb	r3, [r7, #15]
}
 800716e:	4618      	mov	r0, r3
 8007170:	3710      	adds	r7, #16
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}

08007176 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007176:	b580      	push	{r7, lr}
 8007178:	b084      	sub	sp, #16
 800717a:	af00      	add	r7, sp, #0
 800717c:	6078      	str	r0, [r7, #4]
 800717e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007186:	6839      	ldr	r1, [r7, #0]
 8007188:	4618      	mov	r0, r3
 800718a:	f001 f908 	bl	800839e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2201      	movs	r2, #1
 8007192:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800719c:	461a      	mov	r2, r3
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80071aa:	f003 031f 	and.w	r3, r3, #31
 80071ae:	2b02      	cmp	r3, #2
 80071b0:	d01a      	beq.n	80071e8 <USBD_LL_SetupStage+0x72>
 80071b2:	2b02      	cmp	r3, #2
 80071b4:	d822      	bhi.n	80071fc <USBD_LL_SetupStage+0x86>
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d002      	beq.n	80071c0 <USBD_LL_SetupStage+0x4a>
 80071ba:	2b01      	cmp	r3, #1
 80071bc:	d00a      	beq.n	80071d4 <USBD_LL_SetupStage+0x5e>
 80071be:	e01d      	b.n	80071fc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80071c6:	4619      	mov	r1, r3
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f000 fb5f 	bl	800788c <USBD_StdDevReq>
 80071ce:	4603      	mov	r3, r0
 80071d0:	73fb      	strb	r3, [r7, #15]
      break;
 80071d2:	e020      	b.n	8007216 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80071da:	4619      	mov	r1, r3
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f000 fbc7 	bl	8007970 <USBD_StdItfReq>
 80071e2:	4603      	mov	r3, r0
 80071e4:	73fb      	strb	r3, [r7, #15]
      break;
 80071e6:	e016      	b.n	8007216 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80071ee:	4619      	mov	r1, r3
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f000 fc29 	bl	8007a48 <USBD_StdEPReq>
 80071f6:	4603      	mov	r3, r0
 80071f8:	73fb      	strb	r3, [r7, #15]
      break;
 80071fa:	e00c      	b.n	8007216 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007202:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007206:	b2db      	uxtb	r3, r3
 8007208:	4619      	mov	r1, r3
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f002 f872 	bl	80092f4 <USBD_LL_StallEP>
 8007210:	4603      	mov	r3, r0
 8007212:	73fb      	strb	r3, [r7, #15]
      break;
 8007214:	bf00      	nop
  }

  return ret;
 8007216:	7bfb      	ldrb	r3, [r7, #15]
}
 8007218:	4618      	mov	r0, r3
 800721a:	3710      	adds	r7, #16
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}

08007220 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b086      	sub	sp, #24
 8007224:	af00      	add	r7, sp, #0
 8007226:	60f8      	str	r0, [r7, #12]
 8007228:	460b      	mov	r3, r1
 800722a:	607a      	str	r2, [r7, #4]
 800722c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800722e:	2300      	movs	r3, #0
 8007230:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007232:	7afb      	ldrb	r3, [r7, #11]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d16e      	bne.n	8007316 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800723e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007246:	2b03      	cmp	r3, #3
 8007248:	f040 8098 	bne.w	800737c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	689a      	ldr	r2, [r3, #8]
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	68db      	ldr	r3, [r3, #12]
 8007254:	429a      	cmp	r2, r3
 8007256:	d913      	bls.n	8007280 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	689a      	ldr	r2, [r3, #8]
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	68db      	ldr	r3, [r3, #12]
 8007260:	1ad2      	subs	r2, r2, r3
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007266:	693b      	ldr	r3, [r7, #16]
 8007268:	68da      	ldr	r2, [r3, #12]
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	689b      	ldr	r3, [r3, #8]
 800726e:	4293      	cmp	r3, r2
 8007270:	bf28      	it	cs
 8007272:	4613      	movcs	r3, r2
 8007274:	461a      	mov	r2, r3
 8007276:	6879      	ldr	r1, [r7, #4]
 8007278:	68f8      	ldr	r0, [r7, #12]
 800727a:	f001 f984 	bl	8008586 <USBD_CtlContinueRx>
 800727e:	e07d      	b.n	800737c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007286:	f003 031f 	and.w	r3, r3, #31
 800728a:	2b02      	cmp	r3, #2
 800728c:	d014      	beq.n	80072b8 <USBD_LL_DataOutStage+0x98>
 800728e:	2b02      	cmp	r3, #2
 8007290:	d81d      	bhi.n	80072ce <USBD_LL_DataOutStage+0xae>
 8007292:	2b00      	cmp	r3, #0
 8007294:	d002      	beq.n	800729c <USBD_LL_DataOutStage+0x7c>
 8007296:	2b01      	cmp	r3, #1
 8007298:	d003      	beq.n	80072a2 <USBD_LL_DataOutStage+0x82>
 800729a:	e018      	b.n	80072ce <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800729c:	2300      	movs	r3, #0
 800729e:	75bb      	strb	r3, [r7, #22]
            break;
 80072a0:	e018      	b.n	80072d4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80072a8:	b2db      	uxtb	r3, r3
 80072aa:	4619      	mov	r1, r3
 80072ac:	68f8      	ldr	r0, [r7, #12]
 80072ae:	f000 fa5e 	bl	800776e <USBD_CoreFindIF>
 80072b2:	4603      	mov	r3, r0
 80072b4:	75bb      	strb	r3, [r7, #22]
            break;
 80072b6:	e00d      	b.n	80072d4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80072be:	b2db      	uxtb	r3, r3
 80072c0:	4619      	mov	r1, r3
 80072c2:	68f8      	ldr	r0, [r7, #12]
 80072c4:	f000 fa60 	bl	8007788 <USBD_CoreFindEP>
 80072c8:	4603      	mov	r3, r0
 80072ca:	75bb      	strb	r3, [r7, #22]
            break;
 80072cc:	e002      	b.n	80072d4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80072ce:	2300      	movs	r3, #0
 80072d0:	75bb      	strb	r3, [r7, #22]
            break;
 80072d2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80072d4:	7dbb      	ldrb	r3, [r7, #22]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d119      	bne.n	800730e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072e0:	b2db      	uxtb	r3, r3
 80072e2:	2b03      	cmp	r3, #3
 80072e4:	d113      	bne.n	800730e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80072e6:	7dba      	ldrb	r2, [r7, #22]
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	32ae      	adds	r2, #174	; 0xae
 80072ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072f0:	691b      	ldr	r3, [r3, #16]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d00b      	beq.n	800730e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80072f6:	7dba      	ldrb	r2, [r7, #22]
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80072fe:	7dba      	ldrb	r2, [r7, #22]
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	32ae      	adds	r2, #174	; 0xae
 8007304:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007308:	691b      	ldr	r3, [r3, #16]
 800730a:	68f8      	ldr	r0, [r7, #12]
 800730c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800730e:	68f8      	ldr	r0, [r7, #12]
 8007310:	f001 f94a 	bl	80085a8 <USBD_CtlSendStatus>
 8007314:	e032      	b.n	800737c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007316:	7afb      	ldrb	r3, [r7, #11]
 8007318:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800731c:	b2db      	uxtb	r3, r3
 800731e:	4619      	mov	r1, r3
 8007320:	68f8      	ldr	r0, [r7, #12]
 8007322:	f000 fa31 	bl	8007788 <USBD_CoreFindEP>
 8007326:	4603      	mov	r3, r0
 8007328:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800732a:	7dbb      	ldrb	r3, [r7, #22]
 800732c:	2bff      	cmp	r3, #255	; 0xff
 800732e:	d025      	beq.n	800737c <USBD_LL_DataOutStage+0x15c>
 8007330:	7dbb      	ldrb	r3, [r7, #22]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d122      	bne.n	800737c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800733c:	b2db      	uxtb	r3, r3
 800733e:	2b03      	cmp	r3, #3
 8007340:	d117      	bne.n	8007372 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007342:	7dba      	ldrb	r2, [r7, #22]
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	32ae      	adds	r2, #174	; 0xae
 8007348:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800734c:	699b      	ldr	r3, [r3, #24]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d00f      	beq.n	8007372 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007352:	7dba      	ldrb	r2, [r7, #22]
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800735a:	7dba      	ldrb	r2, [r7, #22]
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	32ae      	adds	r2, #174	; 0xae
 8007360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007364:	699b      	ldr	r3, [r3, #24]
 8007366:	7afa      	ldrb	r2, [r7, #11]
 8007368:	4611      	mov	r1, r2
 800736a:	68f8      	ldr	r0, [r7, #12]
 800736c:	4798      	blx	r3
 800736e:	4603      	mov	r3, r0
 8007370:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007372:	7dfb      	ldrb	r3, [r7, #23]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d001      	beq.n	800737c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007378:	7dfb      	ldrb	r3, [r7, #23]
 800737a:	e000      	b.n	800737e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800737c:	2300      	movs	r3, #0
}
 800737e:	4618      	mov	r0, r3
 8007380:	3718      	adds	r7, #24
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}

08007386 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007386:	b580      	push	{r7, lr}
 8007388:	b086      	sub	sp, #24
 800738a:	af00      	add	r7, sp, #0
 800738c:	60f8      	str	r0, [r7, #12]
 800738e:	460b      	mov	r3, r1
 8007390:	607a      	str	r2, [r7, #4]
 8007392:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007394:	7afb      	ldrb	r3, [r7, #11]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d16f      	bne.n	800747a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	3314      	adds	r3, #20
 800739e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80073a6:	2b02      	cmp	r3, #2
 80073a8:	d15a      	bne.n	8007460 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	689a      	ldr	r2, [r3, #8]
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	68db      	ldr	r3, [r3, #12]
 80073b2:	429a      	cmp	r2, r3
 80073b4:	d914      	bls.n	80073e0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	689a      	ldr	r2, [r3, #8]
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	68db      	ldr	r3, [r3, #12]
 80073be:	1ad2      	subs	r2, r2, r3
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	689b      	ldr	r3, [r3, #8]
 80073c8:	461a      	mov	r2, r3
 80073ca:	6879      	ldr	r1, [r7, #4]
 80073cc:	68f8      	ldr	r0, [r7, #12]
 80073ce:	f001 f8ac 	bl	800852a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80073d2:	2300      	movs	r3, #0
 80073d4:	2200      	movs	r2, #0
 80073d6:	2100      	movs	r1, #0
 80073d8:	68f8      	ldr	r0, [r7, #12]
 80073da:	f002 f835 	bl	8009448 <USBD_LL_PrepareReceive>
 80073de:	e03f      	b.n	8007460 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80073e0:	693b      	ldr	r3, [r7, #16]
 80073e2:	68da      	ldr	r2, [r3, #12]
 80073e4:	693b      	ldr	r3, [r7, #16]
 80073e6:	689b      	ldr	r3, [r3, #8]
 80073e8:	429a      	cmp	r2, r3
 80073ea:	d11c      	bne.n	8007426 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	685a      	ldr	r2, [r3, #4]
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80073f4:	429a      	cmp	r2, r3
 80073f6:	d316      	bcc.n	8007426 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	685a      	ldr	r2, [r3, #4]
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007402:	429a      	cmp	r2, r3
 8007404:	d20f      	bcs.n	8007426 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007406:	2200      	movs	r2, #0
 8007408:	2100      	movs	r1, #0
 800740a:	68f8      	ldr	r0, [r7, #12]
 800740c:	f001 f88d 	bl	800852a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	2200      	movs	r2, #0
 8007414:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007418:	2300      	movs	r3, #0
 800741a:	2200      	movs	r2, #0
 800741c:	2100      	movs	r1, #0
 800741e:	68f8      	ldr	r0, [r7, #12]
 8007420:	f002 f812 	bl	8009448 <USBD_LL_PrepareReceive>
 8007424:	e01c      	b.n	8007460 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800742c:	b2db      	uxtb	r3, r3
 800742e:	2b03      	cmp	r3, #3
 8007430:	d10f      	bne.n	8007452 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007438:	68db      	ldr	r3, [r3, #12]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d009      	beq.n	8007452 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2200      	movs	r2, #0
 8007442:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800744c:	68db      	ldr	r3, [r3, #12]
 800744e:	68f8      	ldr	r0, [r7, #12]
 8007450:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007452:	2180      	movs	r1, #128	; 0x80
 8007454:	68f8      	ldr	r0, [r7, #12]
 8007456:	f001 ff4d 	bl	80092f4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800745a:	68f8      	ldr	r0, [r7, #12]
 800745c:	f001 f8b7 	bl	80085ce <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007466:	2b00      	cmp	r3, #0
 8007468:	d03a      	beq.n	80074e0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800746a:	68f8      	ldr	r0, [r7, #12]
 800746c:	f7ff fe42 	bl	80070f4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	2200      	movs	r2, #0
 8007474:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007478:	e032      	b.n	80074e0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800747a:	7afb      	ldrb	r3, [r7, #11]
 800747c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007480:	b2db      	uxtb	r3, r3
 8007482:	4619      	mov	r1, r3
 8007484:	68f8      	ldr	r0, [r7, #12]
 8007486:	f000 f97f 	bl	8007788 <USBD_CoreFindEP>
 800748a:	4603      	mov	r3, r0
 800748c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800748e:	7dfb      	ldrb	r3, [r7, #23]
 8007490:	2bff      	cmp	r3, #255	; 0xff
 8007492:	d025      	beq.n	80074e0 <USBD_LL_DataInStage+0x15a>
 8007494:	7dfb      	ldrb	r3, [r7, #23]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d122      	bne.n	80074e0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074a0:	b2db      	uxtb	r3, r3
 80074a2:	2b03      	cmp	r3, #3
 80074a4:	d11c      	bne.n	80074e0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80074a6:	7dfa      	ldrb	r2, [r7, #23]
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	32ae      	adds	r2, #174	; 0xae
 80074ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074b0:	695b      	ldr	r3, [r3, #20]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d014      	beq.n	80074e0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80074b6:	7dfa      	ldrb	r2, [r7, #23]
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80074be:	7dfa      	ldrb	r2, [r7, #23]
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	32ae      	adds	r2, #174	; 0xae
 80074c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074c8:	695b      	ldr	r3, [r3, #20]
 80074ca:	7afa      	ldrb	r2, [r7, #11]
 80074cc:	4611      	mov	r1, r2
 80074ce:	68f8      	ldr	r0, [r7, #12]
 80074d0:	4798      	blx	r3
 80074d2:	4603      	mov	r3, r0
 80074d4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80074d6:	7dbb      	ldrb	r3, [r7, #22]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d001      	beq.n	80074e0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80074dc:	7dbb      	ldrb	r3, [r7, #22]
 80074de:	e000      	b.n	80074e2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80074e0:	2300      	movs	r3, #0
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3718      	adds	r7, #24
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}

080074ea <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80074ea:	b580      	push	{r7, lr}
 80074ec:	b084      	sub	sp, #16
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80074f2:	2300      	movs	r3, #0
 80074f4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2201      	movs	r2, #1
 80074fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2200      	movs	r2, #0
 8007502:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2200      	movs	r2, #0
 800750a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2200      	movs	r2, #0
 8007510:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2200      	movs	r2, #0
 8007518:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007522:	2b00      	cmp	r3, #0
 8007524:	d014      	beq.n	8007550 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800752c:	685b      	ldr	r3, [r3, #4]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d00e      	beq.n	8007550 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	687a      	ldr	r2, [r7, #4]
 800753c:	6852      	ldr	r2, [r2, #4]
 800753e:	b2d2      	uxtb	r2, r2
 8007540:	4611      	mov	r1, r2
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	4798      	blx	r3
 8007546:	4603      	mov	r3, r0
 8007548:	2b00      	cmp	r3, #0
 800754a:	d001      	beq.n	8007550 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800754c:	2303      	movs	r3, #3
 800754e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007550:	2340      	movs	r3, #64	; 0x40
 8007552:	2200      	movs	r2, #0
 8007554:	2100      	movs	r1, #0
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f001 fe87 	bl	800926a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2201      	movs	r2, #1
 8007560:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2240      	movs	r2, #64	; 0x40
 8007568:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800756c:	2340      	movs	r3, #64	; 0x40
 800756e:	2200      	movs	r2, #0
 8007570:	2180      	movs	r1, #128	; 0x80
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f001 fe79 	bl	800926a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2201      	movs	r2, #1
 800757c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2240      	movs	r2, #64	; 0x40
 8007582:	621a      	str	r2, [r3, #32]

  return ret;
 8007584:	7bfb      	ldrb	r3, [r7, #15]
}
 8007586:	4618      	mov	r0, r3
 8007588:	3710      	adds	r7, #16
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}

0800758e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800758e:	b480      	push	{r7}
 8007590:	b083      	sub	sp, #12
 8007592:	af00      	add	r7, sp, #0
 8007594:	6078      	str	r0, [r7, #4]
 8007596:	460b      	mov	r3, r1
 8007598:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	78fa      	ldrb	r2, [r7, #3]
 800759e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80075a0:	2300      	movs	r3, #0
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	370c      	adds	r7, #12
 80075a6:	46bd      	mov	sp, r7
 80075a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ac:	4770      	bx	lr

080075ae <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80075ae:	b480      	push	{r7}
 80075b0:	b083      	sub	sp, #12
 80075b2:	af00      	add	r7, sp, #0
 80075b4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075bc:	b2da      	uxtb	r2, r3
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2204      	movs	r2, #4
 80075c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80075cc:	2300      	movs	r3, #0
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	370c      	adds	r7, #12
 80075d2:	46bd      	mov	sp, r7
 80075d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d8:	4770      	bx	lr

080075da <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80075da:	b480      	push	{r7}
 80075dc:	b083      	sub	sp, #12
 80075de:	af00      	add	r7, sp, #0
 80075e0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075e8:	b2db      	uxtb	r3, r3
 80075ea:	2b04      	cmp	r3, #4
 80075ec:	d106      	bne.n	80075fc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80075f4:	b2da      	uxtb	r2, r3
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80075fc:	2300      	movs	r3, #0
}
 80075fe:	4618      	mov	r0, r3
 8007600:	370c      	adds	r7, #12
 8007602:	46bd      	mov	sp, r7
 8007604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007608:	4770      	bx	lr

0800760a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800760a:	b580      	push	{r7, lr}
 800760c:	b082      	sub	sp, #8
 800760e:	af00      	add	r7, sp, #0
 8007610:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007618:	b2db      	uxtb	r3, r3
 800761a:	2b03      	cmp	r3, #3
 800761c:	d110      	bne.n	8007640 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007624:	2b00      	cmp	r3, #0
 8007626:	d00b      	beq.n	8007640 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800762e:	69db      	ldr	r3, [r3, #28]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d005      	beq.n	8007640 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800763a:	69db      	ldr	r3, [r3, #28]
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007640:	2300      	movs	r3, #0
}
 8007642:	4618      	mov	r0, r3
 8007644:	3708      	adds	r7, #8
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}

0800764a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800764a:	b580      	push	{r7, lr}
 800764c:	b082      	sub	sp, #8
 800764e:	af00      	add	r7, sp, #0
 8007650:	6078      	str	r0, [r7, #4]
 8007652:	460b      	mov	r3, r1
 8007654:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	32ae      	adds	r2, #174	; 0xae
 8007660:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d101      	bne.n	800766c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007668:	2303      	movs	r3, #3
 800766a:	e01c      	b.n	80076a6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007672:	b2db      	uxtb	r3, r3
 8007674:	2b03      	cmp	r3, #3
 8007676:	d115      	bne.n	80076a4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	32ae      	adds	r2, #174	; 0xae
 8007682:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007686:	6a1b      	ldr	r3, [r3, #32]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d00b      	beq.n	80076a4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	32ae      	adds	r2, #174	; 0xae
 8007696:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800769a:	6a1b      	ldr	r3, [r3, #32]
 800769c:	78fa      	ldrb	r2, [r7, #3]
 800769e:	4611      	mov	r1, r2
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80076a4:	2300      	movs	r3, #0
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	3708      	adds	r7, #8
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}

080076ae <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80076ae:	b580      	push	{r7, lr}
 80076b0:	b082      	sub	sp, #8
 80076b2:	af00      	add	r7, sp, #0
 80076b4:	6078      	str	r0, [r7, #4]
 80076b6:	460b      	mov	r3, r1
 80076b8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	32ae      	adds	r2, #174	; 0xae
 80076c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d101      	bne.n	80076d0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80076cc:	2303      	movs	r3, #3
 80076ce:	e01c      	b.n	800770a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076d6:	b2db      	uxtb	r3, r3
 80076d8:	2b03      	cmp	r3, #3
 80076da:	d115      	bne.n	8007708 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	32ae      	adds	r2, #174	; 0xae
 80076e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d00b      	beq.n	8007708 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	32ae      	adds	r2, #174	; 0xae
 80076fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007700:	78fa      	ldrb	r2, [r7, #3]
 8007702:	4611      	mov	r1, r2
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007708:	2300      	movs	r3, #0
}
 800770a:	4618      	mov	r0, r3
 800770c:	3708      	adds	r7, #8
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}

08007712 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007712:	b480      	push	{r7}
 8007714:	b083      	sub	sp, #12
 8007716:	af00      	add	r7, sp, #0
 8007718:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800771a:	2300      	movs	r3, #0
}
 800771c:	4618      	mov	r0, r3
 800771e:	370c      	adds	r7, #12
 8007720:	46bd      	mov	sp, r7
 8007722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007726:	4770      	bx	lr

08007728 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b084      	sub	sp, #16
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007730:	2300      	movs	r3, #0
 8007732:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2201      	movs	r2, #1
 8007738:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007742:	2b00      	cmp	r3, #0
 8007744:	d00e      	beq.n	8007764 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	687a      	ldr	r2, [r7, #4]
 8007750:	6852      	ldr	r2, [r2, #4]
 8007752:	b2d2      	uxtb	r2, r2
 8007754:	4611      	mov	r1, r2
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	4798      	blx	r3
 800775a:	4603      	mov	r3, r0
 800775c:	2b00      	cmp	r3, #0
 800775e:	d001      	beq.n	8007764 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007760:	2303      	movs	r3, #3
 8007762:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007764:	7bfb      	ldrb	r3, [r7, #15]
}
 8007766:	4618      	mov	r0, r3
 8007768:	3710      	adds	r7, #16
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}

0800776e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800776e:	b480      	push	{r7}
 8007770:	b083      	sub	sp, #12
 8007772:	af00      	add	r7, sp, #0
 8007774:	6078      	str	r0, [r7, #4]
 8007776:	460b      	mov	r3, r1
 8007778:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800777a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800777c:	4618      	mov	r0, r3
 800777e:	370c      	adds	r7, #12
 8007780:	46bd      	mov	sp, r7
 8007782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007786:	4770      	bx	lr

08007788 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007788:	b480      	push	{r7}
 800778a:	b083      	sub	sp, #12
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
 8007790:	460b      	mov	r3, r1
 8007792:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007794:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007796:	4618      	mov	r0, r3
 8007798:	370c      	adds	r7, #12
 800779a:	46bd      	mov	sp, r7
 800779c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a0:	4770      	bx	lr

080077a2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80077a2:	b580      	push	{r7, lr}
 80077a4:	b086      	sub	sp, #24
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	6078      	str	r0, [r7, #4]
 80077aa:	460b      	mov	r3, r1
 80077ac:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80077b6:	2300      	movs	r3, #0
 80077b8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	885b      	ldrh	r3, [r3, #2]
 80077be:	b29a      	uxth	r2, r3
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	b29b      	uxth	r3, r3
 80077c6:	429a      	cmp	r2, r3
 80077c8:	d920      	bls.n	800780c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	781b      	ldrb	r3, [r3, #0]
 80077ce:	b29b      	uxth	r3, r3
 80077d0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80077d2:	e013      	b.n	80077fc <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80077d4:	f107 030a 	add.w	r3, r7, #10
 80077d8:	4619      	mov	r1, r3
 80077da:	6978      	ldr	r0, [r7, #20]
 80077dc:	f000 f81b 	bl	8007816 <USBD_GetNextDesc>
 80077e0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	785b      	ldrb	r3, [r3, #1]
 80077e6:	2b05      	cmp	r3, #5
 80077e8:	d108      	bne.n	80077fc <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	789b      	ldrb	r3, [r3, #2]
 80077f2:	78fa      	ldrb	r2, [r7, #3]
 80077f4:	429a      	cmp	r2, r3
 80077f6:	d008      	beq.n	800780a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80077f8:	2300      	movs	r3, #0
 80077fa:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	885b      	ldrh	r3, [r3, #2]
 8007800:	b29a      	uxth	r2, r3
 8007802:	897b      	ldrh	r3, [r7, #10]
 8007804:	429a      	cmp	r2, r3
 8007806:	d8e5      	bhi.n	80077d4 <USBD_GetEpDesc+0x32>
 8007808:	e000      	b.n	800780c <USBD_GetEpDesc+0x6a>
          break;
 800780a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800780c:	693b      	ldr	r3, [r7, #16]
}
 800780e:	4618      	mov	r0, r3
 8007810:	3718      	adds	r7, #24
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}

08007816 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007816:	b480      	push	{r7}
 8007818:	b085      	sub	sp, #20
 800781a:	af00      	add	r7, sp, #0
 800781c:	6078      	str	r0, [r7, #4]
 800781e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	881a      	ldrh	r2, [r3, #0]
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	781b      	ldrb	r3, [r3, #0]
 800782c:	b29b      	uxth	r3, r3
 800782e:	4413      	add	r3, r2
 8007830:	b29a      	uxth	r2, r3
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	781b      	ldrb	r3, [r3, #0]
 800783a:	461a      	mov	r2, r3
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	4413      	add	r3, r2
 8007840:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007842:	68fb      	ldr	r3, [r7, #12]
}
 8007844:	4618      	mov	r0, r3
 8007846:	3714      	adds	r7, #20
 8007848:	46bd      	mov	sp, r7
 800784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784e:	4770      	bx	lr

08007850 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007850:	b480      	push	{r7}
 8007852:	b087      	sub	sp, #28
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	781b      	ldrb	r3, [r3, #0]
 8007860:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	3301      	adds	r3, #1
 8007866:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	781b      	ldrb	r3, [r3, #0]
 800786c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800786e:	8a3b      	ldrh	r3, [r7, #16]
 8007870:	021b      	lsls	r3, r3, #8
 8007872:	b21a      	sxth	r2, r3
 8007874:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007878:	4313      	orrs	r3, r2
 800787a:	b21b      	sxth	r3, r3
 800787c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800787e:	89fb      	ldrh	r3, [r7, #14]
}
 8007880:	4618      	mov	r0, r3
 8007882:	371c      	adds	r7, #28
 8007884:	46bd      	mov	sp, r7
 8007886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788a:	4770      	bx	lr

0800788c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b084      	sub	sp, #16
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
 8007894:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007896:	2300      	movs	r3, #0
 8007898:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	781b      	ldrb	r3, [r3, #0]
 800789e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80078a2:	2b40      	cmp	r3, #64	; 0x40
 80078a4:	d005      	beq.n	80078b2 <USBD_StdDevReq+0x26>
 80078a6:	2b40      	cmp	r3, #64	; 0x40
 80078a8:	d857      	bhi.n	800795a <USBD_StdDevReq+0xce>
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d00f      	beq.n	80078ce <USBD_StdDevReq+0x42>
 80078ae:	2b20      	cmp	r3, #32
 80078b0:	d153      	bne.n	800795a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	32ae      	adds	r2, #174	; 0xae
 80078bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078c0:	689b      	ldr	r3, [r3, #8]
 80078c2:	6839      	ldr	r1, [r7, #0]
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	4798      	blx	r3
 80078c8:	4603      	mov	r3, r0
 80078ca:	73fb      	strb	r3, [r7, #15]
      break;
 80078cc:	e04a      	b.n	8007964 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	785b      	ldrb	r3, [r3, #1]
 80078d2:	2b09      	cmp	r3, #9
 80078d4:	d83b      	bhi.n	800794e <USBD_StdDevReq+0xc2>
 80078d6:	a201      	add	r2, pc, #4	; (adr r2, 80078dc <USBD_StdDevReq+0x50>)
 80078d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078dc:	08007931 	.word	0x08007931
 80078e0:	08007945 	.word	0x08007945
 80078e4:	0800794f 	.word	0x0800794f
 80078e8:	0800793b 	.word	0x0800793b
 80078ec:	0800794f 	.word	0x0800794f
 80078f0:	0800790f 	.word	0x0800790f
 80078f4:	08007905 	.word	0x08007905
 80078f8:	0800794f 	.word	0x0800794f
 80078fc:	08007927 	.word	0x08007927
 8007900:	08007919 	.word	0x08007919
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007904:	6839      	ldr	r1, [r7, #0]
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f000 fa3c 	bl	8007d84 <USBD_GetDescriptor>
          break;
 800790c:	e024      	b.n	8007958 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800790e:	6839      	ldr	r1, [r7, #0]
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f000 fba1 	bl	8008058 <USBD_SetAddress>
          break;
 8007916:	e01f      	b.n	8007958 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007918:	6839      	ldr	r1, [r7, #0]
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f000 fbe0 	bl	80080e0 <USBD_SetConfig>
 8007920:	4603      	mov	r3, r0
 8007922:	73fb      	strb	r3, [r7, #15]
          break;
 8007924:	e018      	b.n	8007958 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007926:	6839      	ldr	r1, [r7, #0]
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f000 fc83 	bl	8008234 <USBD_GetConfig>
          break;
 800792e:	e013      	b.n	8007958 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007930:	6839      	ldr	r1, [r7, #0]
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f000 fcb4 	bl	80082a0 <USBD_GetStatus>
          break;
 8007938:	e00e      	b.n	8007958 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800793a:	6839      	ldr	r1, [r7, #0]
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f000 fce3 	bl	8008308 <USBD_SetFeature>
          break;
 8007942:	e009      	b.n	8007958 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007944:	6839      	ldr	r1, [r7, #0]
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f000 fd07 	bl	800835a <USBD_ClrFeature>
          break;
 800794c:	e004      	b.n	8007958 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800794e:	6839      	ldr	r1, [r7, #0]
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f000 fd5e 	bl	8008412 <USBD_CtlError>
          break;
 8007956:	bf00      	nop
      }
      break;
 8007958:	e004      	b.n	8007964 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800795a:	6839      	ldr	r1, [r7, #0]
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f000 fd58 	bl	8008412 <USBD_CtlError>
      break;
 8007962:	bf00      	nop
  }

  return ret;
 8007964:	7bfb      	ldrb	r3, [r7, #15]
}
 8007966:	4618      	mov	r0, r3
 8007968:	3710      	adds	r7, #16
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}
 800796e:	bf00      	nop

08007970 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b084      	sub	sp, #16
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800797a:	2300      	movs	r3, #0
 800797c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	781b      	ldrb	r3, [r3, #0]
 8007982:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007986:	2b40      	cmp	r3, #64	; 0x40
 8007988:	d005      	beq.n	8007996 <USBD_StdItfReq+0x26>
 800798a:	2b40      	cmp	r3, #64	; 0x40
 800798c:	d852      	bhi.n	8007a34 <USBD_StdItfReq+0xc4>
 800798e:	2b00      	cmp	r3, #0
 8007990:	d001      	beq.n	8007996 <USBD_StdItfReq+0x26>
 8007992:	2b20      	cmp	r3, #32
 8007994:	d14e      	bne.n	8007a34 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800799c:	b2db      	uxtb	r3, r3
 800799e:	3b01      	subs	r3, #1
 80079a0:	2b02      	cmp	r3, #2
 80079a2:	d840      	bhi.n	8007a26 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	889b      	ldrh	r3, [r3, #4]
 80079a8:	b2db      	uxtb	r3, r3
 80079aa:	2b01      	cmp	r3, #1
 80079ac:	d836      	bhi.n	8007a1c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	889b      	ldrh	r3, [r3, #4]
 80079b2:	b2db      	uxtb	r3, r3
 80079b4:	4619      	mov	r1, r3
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f7ff fed9 	bl	800776e <USBD_CoreFindIF>
 80079bc:	4603      	mov	r3, r0
 80079be:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80079c0:	7bbb      	ldrb	r3, [r7, #14]
 80079c2:	2bff      	cmp	r3, #255	; 0xff
 80079c4:	d01d      	beq.n	8007a02 <USBD_StdItfReq+0x92>
 80079c6:	7bbb      	ldrb	r3, [r7, #14]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d11a      	bne.n	8007a02 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80079cc:	7bba      	ldrb	r2, [r7, #14]
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	32ae      	adds	r2, #174	; 0xae
 80079d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079d6:	689b      	ldr	r3, [r3, #8]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d00f      	beq.n	80079fc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80079dc:	7bba      	ldrb	r2, [r7, #14]
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80079e4:	7bba      	ldrb	r2, [r7, #14]
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	32ae      	adds	r2, #174	; 0xae
 80079ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079ee:	689b      	ldr	r3, [r3, #8]
 80079f0:	6839      	ldr	r1, [r7, #0]
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	4798      	blx	r3
 80079f6:	4603      	mov	r3, r0
 80079f8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80079fa:	e004      	b.n	8007a06 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80079fc:	2303      	movs	r3, #3
 80079fe:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007a00:	e001      	b.n	8007a06 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007a02:	2303      	movs	r3, #3
 8007a04:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	88db      	ldrh	r3, [r3, #6]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d110      	bne.n	8007a30 <USBD_StdItfReq+0xc0>
 8007a0e:	7bfb      	ldrb	r3, [r7, #15]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d10d      	bne.n	8007a30 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f000 fdc7 	bl	80085a8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007a1a:	e009      	b.n	8007a30 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007a1c:	6839      	ldr	r1, [r7, #0]
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f000 fcf7 	bl	8008412 <USBD_CtlError>
          break;
 8007a24:	e004      	b.n	8007a30 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007a26:	6839      	ldr	r1, [r7, #0]
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f000 fcf2 	bl	8008412 <USBD_CtlError>
          break;
 8007a2e:	e000      	b.n	8007a32 <USBD_StdItfReq+0xc2>
          break;
 8007a30:	bf00      	nop
      }
      break;
 8007a32:	e004      	b.n	8007a3e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007a34:	6839      	ldr	r1, [r7, #0]
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f000 fceb 	bl	8008412 <USBD_CtlError>
      break;
 8007a3c:	bf00      	nop
  }

  return ret;
 8007a3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	3710      	adds	r7, #16
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}

08007a48 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b084      	sub	sp, #16
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
 8007a50:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007a52:	2300      	movs	r3, #0
 8007a54:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	889b      	ldrh	r3, [r3, #4]
 8007a5a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	781b      	ldrb	r3, [r3, #0]
 8007a60:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a64:	2b40      	cmp	r3, #64	; 0x40
 8007a66:	d007      	beq.n	8007a78 <USBD_StdEPReq+0x30>
 8007a68:	2b40      	cmp	r3, #64	; 0x40
 8007a6a:	f200 817f 	bhi.w	8007d6c <USBD_StdEPReq+0x324>
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d02a      	beq.n	8007ac8 <USBD_StdEPReq+0x80>
 8007a72:	2b20      	cmp	r3, #32
 8007a74:	f040 817a 	bne.w	8007d6c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007a78:	7bbb      	ldrb	r3, [r7, #14]
 8007a7a:	4619      	mov	r1, r3
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f7ff fe83 	bl	8007788 <USBD_CoreFindEP>
 8007a82:	4603      	mov	r3, r0
 8007a84:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007a86:	7b7b      	ldrb	r3, [r7, #13]
 8007a88:	2bff      	cmp	r3, #255	; 0xff
 8007a8a:	f000 8174 	beq.w	8007d76 <USBD_StdEPReq+0x32e>
 8007a8e:	7b7b      	ldrb	r3, [r7, #13]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	f040 8170 	bne.w	8007d76 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007a96:	7b7a      	ldrb	r2, [r7, #13]
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007a9e:	7b7a      	ldrb	r2, [r7, #13]
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	32ae      	adds	r2, #174	; 0xae
 8007aa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aa8:	689b      	ldr	r3, [r3, #8]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	f000 8163 	beq.w	8007d76 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007ab0:	7b7a      	ldrb	r2, [r7, #13]
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	32ae      	adds	r2, #174	; 0xae
 8007ab6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aba:	689b      	ldr	r3, [r3, #8]
 8007abc:	6839      	ldr	r1, [r7, #0]
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	4798      	blx	r3
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007ac6:	e156      	b.n	8007d76 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	785b      	ldrb	r3, [r3, #1]
 8007acc:	2b03      	cmp	r3, #3
 8007ace:	d008      	beq.n	8007ae2 <USBD_StdEPReq+0x9a>
 8007ad0:	2b03      	cmp	r3, #3
 8007ad2:	f300 8145 	bgt.w	8007d60 <USBD_StdEPReq+0x318>
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	f000 809b 	beq.w	8007c12 <USBD_StdEPReq+0x1ca>
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	d03c      	beq.n	8007b5a <USBD_StdEPReq+0x112>
 8007ae0:	e13e      	b.n	8007d60 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ae8:	b2db      	uxtb	r3, r3
 8007aea:	2b02      	cmp	r3, #2
 8007aec:	d002      	beq.n	8007af4 <USBD_StdEPReq+0xac>
 8007aee:	2b03      	cmp	r3, #3
 8007af0:	d016      	beq.n	8007b20 <USBD_StdEPReq+0xd8>
 8007af2:	e02c      	b.n	8007b4e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007af4:	7bbb      	ldrb	r3, [r7, #14]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d00d      	beq.n	8007b16 <USBD_StdEPReq+0xce>
 8007afa:	7bbb      	ldrb	r3, [r7, #14]
 8007afc:	2b80      	cmp	r3, #128	; 0x80
 8007afe:	d00a      	beq.n	8007b16 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007b00:	7bbb      	ldrb	r3, [r7, #14]
 8007b02:	4619      	mov	r1, r3
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f001 fbf5 	bl	80092f4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007b0a:	2180      	movs	r1, #128	; 0x80
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f001 fbf1 	bl	80092f4 <USBD_LL_StallEP>
 8007b12:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007b14:	e020      	b.n	8007b58 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007b16:	6839      	ldr	r1, [r7, #0]
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f000 fc7a 	bl	8008412 <USBD_CtlError>
              break;
 8007b1e:	e01b      	b.n	8007b58 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	885b      	ldrh	r3, [r3, #2]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d10e      	bne.n	8007b46 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007b28:	7bbb      	ldrb	r3, [r7, #14]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d00b      	beq.n	8007b46 <USBD_StdEPReq+0xfe>
 8007b2e:	7bbb      	ldrb	r3, [r7, #14]
 8007b30:	2b80      	cmp	r3, #128	; 0x80
 8007b32:	d008      	beq.n	8007b46 <USBD_StdEPReq+0xfe>
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	88db      	ldrh	r3, [r3, #6]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d104      	bne.n	8007b46 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007b3c:	7bbb      	ldrb	r3, [r7, #14]
 8007b3e:	4619      	mov	r1, r3
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f001 fbd7 	bl	80092f4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f000 fd2e 	bl	80085a8 <USBD_CtlSendStatus>

              break;
 8007b4c:	e004      	b.n	8007b58 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007b4e:	6839      	ldr	r1, [r7, #0]
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f000 fc5e 	bl	8008412 <USBD_CtlError>
              break;
 8007b56:	bf00      	nop
          }
          break;
 8007b58:	e107      	b.n	8007d6a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b60:	b2db      	uxtb	r3, r3
 8007b62:	2b02      	cmp	r3, #2
 8007b64:	d002      	beq.n	8007b6c <USBD_StdEPReq+0x124>
 8007b66:	2b03      	cmp	r3, #3
 8007b68:	d016      	beq.n	8007b98 <USBD_StdEPReq+0x150>
 8007b6a:	e04b      	b.n	8007c04 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b6c:	7bbb      	ldrb	r3, [r7, #14]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d00d      	beq.n	8007b8e <USBD_StdEPReq+0x146>
 8007b72:	7bbb      	ldrb	r3, [r7, #14]
 8007b74:	2b80      	cmp	r3, #128	; 0x80
 8007b76:	d00a      	beq.n	8007b8e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007b78:	7bbb      	ldrb	r3, [r7, #14]
 8007b7a:	4619      	mov	r1, r3
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f001 fbb9 	bl	80092f4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007b82:	2180      	movs	r1, #128	; 0x80
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f001 fbb5 	bl	80092f4 <USBD_LL_StallEP>
 8007b8a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007b8c:	e040      	b.n	8007c10 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007b8e:	6839      	ldr	r1, [r7, #0]
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f000 fc3e 	bl	8008412 <USBD_CtlError>
              break;
 8007b96:	e03b      	b.n	8007c10 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	885b      	ldrh	r3, [r3, #2]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d136      	bne.n	8007c0e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007ba0:	7bbb      	ldrb	r3, [r7, #14]
 8007ba2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d004      	beq.n	8007bb4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007baa:	7bbb      	ldrb	r3, [r7, #14]
 8007bac:	4619      	mov	r1, r3
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f001 fbbf 	bl	8009332 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f000 fcf7 	bl	80085a8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007bba:	7bbb      	ldrb	r3, [r7, #14]
 8007bbc:	4619      	mov	r1, r3
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f7ff fde2 	bl	8007788 <USBD_CoreFindEP>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007bc8:	7b7b      	ldrb	r3, [r7, #13]
 8007bca:	2bff      	cmp	r3, #255	; 0xff
 8007bcc:	d01f      	beq.n	8007c0e <USBD_StdEPReq+0x1c6>
 8007bce:	7b7b      	ldrb	r3, [r7, #13]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d11c      	bne.n	8007c0e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007bd4:	7b7a      	ldrb	r2, [r7, #13]
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007bdc:	7b7a      	ldrb	r2, [r7, #13]
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	32ae      	adds	r2, #174	; 0xae
 8007be2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007be6:	689b      	ldr	r3, [r3, #8]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d010      	beq.n	8007c0e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007bec:	7b7a      	ldrb	r2, [r7, #13]
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	32ae      	adds	r2, #174	; 0xae
 8007bf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bf6:	689b      	ldr	r3, [r3, #8]
 8007bf8:	6839      	ldr	r1, [r7, #0]
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	4798      	blx	r3
 8007bfe:	4603      	mov	r3, r0
 8007c00:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007c02:	e004      	b.n	8007c0e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007c04:	6839      	ldr	r1, [r7, #0]
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f000 fc03 	bl	8008412 <USBD_CtlError>
              break;
 8007c0c:	e000      	b.n	8007c10 <USBD_StdEPReq+0x1c8>
              break;
 8007c0e:	bf00      	nop
          }
          break;
 8007c10:	e0ab      	b.n	8007d6a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c18:	b2db      	uxtb	r3, r3
 8007c1a:	2b02      	cmp	r3, #2
 8007c1c:	d002      	beq.n	8007c24 <USBD_StdEPReq+0x1dc>
 8007c1e:	2b03      	cmp	r3, #3
 8007c20:	d032      	beq.n	8007c88 <USBD_StdEPReq+0x240>
 8007c22:	e097      	b.n	8007d54 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007c24:	7bbb      	ldrb	r3, [r7, #14]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d007      	beq.n	8007c3a <USBD_StdEPReq+0x1f2>
 8007c2a:	7bbb      	ldrb	r3, [r7, #14]
 8007c2c:	2b80      	cmp	r3, #128	; 0x80
 8007c2e:	d004      	beq.n	8007c3a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007c30:	6839      	ldr	r1, [r7, #0]
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f000 fbed 	bl	8008412 <USBD_CtlError>
                break;
 8007c38:	e091      	b.n	8007d5e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c3a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	da0b      	bge.n	8007c5a <USBD_StdEPReq+0x212>
 8007c42:	7bbb      	ldrb	r3, [r7, #14]
 8007c44:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c48:	4613      	mov	r3, r2
 8007c4a:	009b      	lsls	r3, r3, #2
 8007c4c:	4413      	add	r3, r2
 8007c4e:	009b      	lsls	r3, r3, #2
 8007c50:	3310      	adds	r3, #16
 8007c52:	687a      	ldr	r2, [r7, #4]
 8007c54:	4413      	add	r3, r2
 8007c56:	3304      	adds	r3, #4
 8007c58:	e00b      	b.n	8007c72 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007c5a:	7bbb      	ldrb	r3, [r7, #14]
 8007c5c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c60:	4613      	mov	r3, r2
 8007c62:	009b      	lsls	r3, r3, #2
 8007c64:	4413      	add	r3, r2
 8007c66:	009b      	lsls	r3, r3, #2
 8007c68:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007c6c:	687a      	ldr	r2, [r7, #4]
 8007c6e:	4413      	add	r3, r2
 8007c70:	3304      	adds	r3, #4
 8007c72:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	2200      	movs	r2, #0
 8007c78:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	2202      	movs	r2, #2
 8007c7e:	4619      	mov	r1, r3
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f000 fc37 	bl	80084f4 <USBD_CtlSendData>
              break;
 8007c86:	e06a      	b.n	8007d5e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007c88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	da11      	bge.n	8007cb4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007c90:	7bbb      	ldrb	r3, [r7, #14]
 8007c92:	f003 020f 	and.w	r2, r3, #15
 8007c96:	6879      	ldr	r1, [r7, #4]
 8007c98:	4613      	mov	r3, r2
 8007c9a:	009b      	lsls	r3, r3, #2
 8007c9c:	4413      	add	r3, r2
 8007c9e:	009b      	lsls	r3, r3, #2
 8007ca0:	440b      	add	r3, r1
 8007ca2:	3324      	adds	r3, #36	; 0x24
 8007ca4:	881b      	ldrh	r3, [r3, #0]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d117      	bne.n	8007cda <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007caa:	6839      	ldr	r1, [r7, #0]
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f000 fbb0 	bl	8008412 <USBD_CtlError>
                  break;
 8007cb2:	e054      	b.n	8007d5e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007cb4:	7bbb      	ldrb	r3, [r7, #14]
 8007cb6:	f003 020f 	and.w	r2, r3, #15
 8007cba:	6879      	ldr	r1, [r7, #4]
 8007cbc:	4613      	mov	r3, r2
 8007cbe:	009b      	lsls	r3, r3, #2
 8007cc0:	4413      	add	r3, r2
 8007cc2:	009b      	lsls	r3, r3, #2
 8007cc4:	440b      	add	r3, r1
 8007cc6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007cca:	881b      	ldrh	r3, [r3, #0]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d104      	bne.n	8007cda <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007cd0:	6839      	ldr	r1, [r7, #0]
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f000 fb9d 	bl	8008412 <USBD_CtlError>
                  break;
 8007cd8:	e041      	b.n	8007d5e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007cda:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	da0b      	bge.n	8007cfa <USBD_StdEPReq+0x2b2>
 8007ce2:	7bbb      	ldrb	r3, [r7, #14]
 8007ce4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ce8:	4613      	mov	r3, r2
 8007cea:	009b      	lsls	r3, r3, #2
 8007cec:	4413      	add	r3, r2
 8007cee:	009b      	lsls	r3, r3, #2
 8007cf0:	3310      	adds	r3, #16
 8007cf2:	687a      	ldr	r2, [r7, #4]
 8007cf4:	4413      	add	r3, r2
 8007cf6:	3304      	adds	r3, #4
 8007cf8:	e00b      	b.n	8007d12 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007cfa:	7bbb      	ldrb	r3, [r7, #14]
 8007cfc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007d00:	4613      	mov	r3, r2
 8007d02:	009b      	lsls	r3, r3, #2
 8007d04:	4413      	add	r3, r2
 8007d06:	009b      	lsls	r3, r3, #2
 8007d08:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007d0c:	687a      	ldr	r2, [r7, #4]
 8007d0e:	4413      	add	r3, r2
 8007d10:	3304      	adds	r3, #4
 8007d12:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007d14:	7bbb      	ldrb	r3, [r7, #14]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d002      	beq.n	8007d20 <USBD_StdEPReq+0x2d8>
 8007d1a:	7bbb      	ldrb	r3, [r7, #14]
 8007d1c:	2b80      	cmp	r3, #128	; 0x80
 8007d1e:	d103      	bne.n	8007d28 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	2200      	movs	r2, #0
 8007d24:	601a      	str	r2, [r3, #0]
 8007d26:	e00e      	b.n	8007d46 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007d28:	7bbb      	ldrb	r3, [r7, #14]
 8007d2a:	4619      	mov	r1, r3
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f001 fb1f 	bl	8009370 <USBD_LL_IsStallEP>
 8007d32:	4603      	mov	r3, r0
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d003      	beq.n	8007d40 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	601a      	str	r2, [r3, #0]
 8007d3e:	e002      	b.n	8007d46 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	2200      	movs	r2, #0
 8007d44:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	2202      	movs	r2, #2
 8007d4a:	4619      	mov	r1, r3
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f000 fbd1 	bl	80084f4 <USBD_CtlSendData>
              break;
 8007d52:	e004      	b.n	8007d5e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007d54:	6839      	ldr	r1, [r7, #0]
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f000 fb5b 	bl	8008412 <USBD_CtlError>
              break;
 8007d5c:	bf00      	nop
          }
          break;
 8007d5e:	e004      	b.n	8007d6a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007d60:	6839      	ldr	r1, [r7, #0]
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f000 fb55 	bl	8008412 <USBD_CtlError>
          break;
 8007d68:	bf00      	nop
      }
      break;
 8007d6a:	e005      	b.n	8007d78 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007d6c:	6839      	ldr	r1, [r7, #0]
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f000 fb4f 	bl	8008412 <USBD_CtlError>
      break;
 8007d74:	e000      	b.n	8007d78 <USBD_StdEPReq+0x330>
      break;
 8007d76:	bf00      	nop
  }

  return ret;
 8007d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3710      	adds	r7, #16
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}
	...

08007d84 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b084      	sub	sp, #16
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
 8007d8c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007d92:	2300      	movs	r3, #0
 8007d94:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007d96:	2300      	movs	r3, #0
 8007d98:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	885b      	ldrh	r3, [r3, #2]
 8007d9e:	0a1b      	lsrs	r3, r3, #8
 8007da0:	b29b      	uxth	r3, r3
 8007da2:	3b01      	subs	r3, #1
 8007da4:	2b06      	cmp	r3, #6
 8007da6:	f200 8128 	bhi.w	8007ffa <USBD_GetDescriptor+0x276>
 8007daa:	a201      	add	r2, pc, #4	; (adr r2, 8007db0 <USBD_GetDescriptor+0x2c>)
 8007dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007db0:	08007dcd 	.word	0x08007dcd
 8007db4:	08007de5 	.word	0x08007de5
 8007db8:	08007e25 	.word	0x08007e25
 8007dbc:	08007ffb 	.word	0x08007ffb
 8007dc0:	08007ffb 	.word	0x08007ffb
 8007dc4:	08007f9b 	.word	0x08007f9b
 8007dc8:	08007fc7 	.word	0x08007fc7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	687a      	ldr	r2, [r7, #4]
 8007dd6:	7c12      	ldrb	r2, [r2, #16]
 8007dd8:	f107 0108 	add.w	r1, r7, #8
 8007ddc:	4610      	mov	r0, r2
 8007dde:	4798      	blx	r3
 8007de0:	60f8      	str	r0, [r7, #12]
      break;
 8007de2:	e112      	b.n	800800a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	7c1b      	ldrb	r3, [r3, #16]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d10d      	bne.n	8007e08 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007df4:	f107 0208 	add.w	r2, r7, #8
 8007df8:	4610      	mov	r0, r2
 8007dfa:	4798      	blx	r3
 8007dfc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	3301      	adds	r3, #1
 8007e02:	2202      	movs	r2, #2
 8007e04:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007e06:	e100      	b.n	800800a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e10:	f107 0208 	add.w	r2, r7, #8
 8007e14:	4610      	mov	r0, r2
 8007e16:	4798      	blx	r3
 8007e18:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	3301      	adds	r3, #1
 8007e1e:	2202      	movs	r2, #2
 8007e20:	701a      	strb	r2, [r3, #0]
      break;
 8007e22:	e0f2      	b.n	800800a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	885b      	ldrh	r3, [r3, #2]
 8007e28:	b2db      	uxtb	r3, r3
 8007e2a:	2b05      	cmp	r3, #5
 8007e2c:	f200 80ac 	bhi.w	8007f88 <USBD_GetDescriptor+0x204>
 8007e30:	a201      	add	r2, pc, #4	; (adr r2, 8007e38 <USBD_GetDescriptor+0xb4>)
 8007e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e36:	bf00      	nop
 8007e38:	08007e51 	.word	0x08007e51
 8007e3c:	08007e85 	.word	0x08007e85
 8007e40:	08007eb9 	.word	0x08007eb9
 8007e44:	08007eed 	.word	0x08007eed
 8007e48:	08007f21 	.word	0x08007f21
 8007e4c:	08007f55 	.word	0x08007f55
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e56:	685b      	ldr	r3, [r3, #4]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d00b      	beq.n	8007e74 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e62:	685b      	ldr	r3, [r3, #4]
 8007e64:	687a      	ldr	r2, [r7, #4]
 8007e66:	7c12      	ldrb	r2, [r2, #16]
 8007e68:	f107 0108 	add.w	r1, r7, #8
 8007e6c:	4610      	mov	r0, r2
 8007e6e:	4798      	blx	r3
 8007e70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e72:	e091      	b.n	8007f98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e74:	6839      	ldr	r1, [r7, #0]
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f000 facb 	bl	8008412 <USBD_CtlError>
            err++;
 8007e7c:	7afb      	ldrb	r3, [r7, #11]
 8007e7e:	3301      	adds	r3, #1
 8007e80:	72fb      	strb	r3, [r7, #11]
          break;
 8007e82:	e089      	b.n	8007f98 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e8a:	689b      	ldr	r3, [r3, #8]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d00b      	beq.n	8007ea8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e96:	689b      	ldr	r3, [r3, #8]
 8007e98:	687a      	ldr	r2, [r7, #4]
 8007e9a:	7c12      	ldrb	r2, [r2, #16]
 8007e9c:	f107 0108 	add.w	r1, r7, #8
 8007ea0:	4610      	mov	r0, r2
 8007ea2:	4798      	blx	r3
 8007ea4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ea6:	e077      	b.n	8007f98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ea8:	6839      	ldr	r1, [r7, #0]
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f000 fab1 	bl	8008412 <USBD_CtlError>
            err++;
 8007eb0:	7afb      	ldrb	r3, [r7, #11]
 8007eb2:	3301      	adds	r3, #1
 8007eb4:	72fb      	strb	r3, [r7, #11]
          break;
 8007eb6:	e06f      	b.n	8007f98 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ebe:	68db      	ldr	r3, [r3, #12]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d00b      	beq.n	8007edc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007eca:	68db      	ldr	r3, [r3, #12]
 8007ecc:	687a      	ldr	r2, [r7, #4]
 8007ece:	7c12      	ldrb	r2, [r2, #16]
 8007ed0:	f107 0108 	add.w	r1, r7, #8
 8007ed4:	4610      	mov	r0, r2
 8007ed6:	4798      	blx	r3
 8007ed8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007eda:	e05d      	b.n	8007f98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007edc:	6839      	ldr	r1, [r7, #0]
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f000 fa97 	bl	8008412 <USBD_CtlError>
            err++;
 8007ee4:	7afb      	ldrb	r3, [r7, #11]
 8007ee6:	3301      	adds	r3, #1
 8007ee8:	72fb      	strb	r3, [r7, #11]
          break;
 8007eea:	e055      	b.n	8007f98 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ef2:	691b      	ldr	r3, [r3, #16]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d00b      	beq.n	8007f10 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007efe:	691b      	ldr	r3, [r3, #16]
 8007f00:	687a      	ldr	r2, [r7, #4]
 8007f02:	7c12      	ldrb	r2, [r2, #16]
 8007f04:	f107 0108 	add.w	r1, r7, #8
 8007f08:	4610      	mov	r0, r2
 8007f0a:	4798      	blx	r3
 8007f0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f0e:	e043      	b.n	8007f98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f10:	6839      	ldr	r1, [r7, #0]
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f000 fa7d 	bl	8008412 <USBD_CtlError>
            err++;
 8007f18:	7afb      	ldrb	r3, [r7, #11]
 8007f1a:	3301      	adds	r3, #1
 8007f1c:	72fb      	strb	r3, [r7, #11]
          break;
 8007f1e:	e03b      	b.n	8007f98 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f26:	695b      	ldr	r3, [r3, #20]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d00b      	beq.n	8007f44 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f32:	695b      	ldr	r3, [r3, #20]
 8007f34:	687a      	ldr	r2, [r7, #4]
 8007f36:	7c12      	ldrb	r2, [r2, #16]
 8007f38:	f107 0108 	add.w	r1, r7, #8
 8007f3c:	4610      	mov	r0, r2
 8007f3e:	4798      	blx	r3
 8007f40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f42:	e029      	b.n	8007f98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f44:	6839      	ldr	r1, [r7, #0]
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f000 fa63 	bl	8008412 <USBD_CtlError>
            err++;
 8007f4c:	7afb      	ldrb	r3, [r7, #11]
 8007f4e:	3301      	adds	r3, #1
 8007f50:	72fb      	strb	r3, [r7, #11]
          break;
 8007f52:	e021      	b.n	8007f98 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f5a:	699b      	ldr	r3, [r3, #24]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d00b      	beq.n	8007f78 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f66:	699b      	ldr	r3, [r3, #24]
 8007f68:	687a      	ldr	r2, [r7, #4]
 8007f6a:	7c12      	ldrb	r2, [r2, #16]
 8007f6c:	f107 0108 	add.w	r1, r7, #8
 8007f70:	4610      	mov	r0, r2
 8007f72:	4798      	blx	r3
 8007f74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f76:	e00f      	b.n	8007f98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f78:	6839      	ldr	r1, [r7, #0]
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f000 fa49 	bl	8008412 <USBD_CtlError>
            err++;
 8007f80:	7afb      	ldrb	r3, [r7, #11]
 8007f82:	3301      	adds	r3, #1
 8007f84:	72fb      	strb	r3, [r7, #11]
          break;
 8007f86:	e007      	b.n	8007f98 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007f88:	6839      	ldr	r1, [r7, #0]
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f000 fa41 	bl	8008412 <USBD_CtlError>
          err++;
 8007f90:	7afb      	ldrb	r3, [r7, #11]
 8007f92:	3301      	adds	r3, #1
 8007f94:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007f96:	bf00      	nop
      }
      break;
 8007f98:	e037      	b.n	800800a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	7c1b      	ldrb	r3, [r3, #16]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d109      	bne.n	8007fb6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007faa:	f107 0208 	add.w	r2, r7, #8
 8007fae:	4610      	mov	r0, r2
 8007fb0:	4798      	blx	r3
 8007fb2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007fb4:	e029      	b.n	800800a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007fb6:	6839      	ldr	r1, [r7, #0]
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f000 fa2a 	bl	8008412 <USBD_CtlError>
        err++;
 8007fbe:	7afb      	ldrb	r3, [r7, #11]
 8007fc0:	3301      	adds	r3, #1
 8007fc2:	72fb      	strb	r3, [r7, #11]
      break;
 8007fc4:	e021      	b.n	800800a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	7c1b      	ldrb	r3, [r3, #16]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d10d      	bne.n	8007fea <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fd6:	f107 0208 	add.w	r2, r7, #8
 8007fda:	4610      	mov	r0, r2
 8007fdc:	4798      	blx	r3
 8007fde:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	3301      	adds	r3, #1
 8007fe4:	2207      	movs	r2, #7
 8007fe6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007fe8:	e00f      	b.n	800800a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007fea:	6839      	ldr	r1, [r7, #0]
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f000 fa10 	bl	8008412 <USBD_CtlError>
        err++;
 8007ff2:	7afb      	ldrb	r3, [r7, #11]
 8007ff4:	3301      	adds	r3, #1
 8007ff6:	72fb      	strb	r3, [r7, #11]
      break;
 8007ff8:	e007      	b.n	800800a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007ffa:	6839      	ldr	r1, [r7, #0]
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f000 fa08 	bl	8008412 <USBD_CtlError>
      err++;
 8008002:	7afb      	ldrb	r3, [r7, #11]
 8008004:	3301      	adds	r3, #1
 8008006:	72fb      	strb	r3, [r7, #11]
      break;
 8008008:	bf00      	nop
  }

  if (err != 0U)
 800800a:	7afb      	ldrb	r3, [r7, #11]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d11e      	bne.n	800804e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	88db      	ldrh	r3, [r3, #6]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d016      	beq.n	8008046 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008018:	893b      	ldrh	r3, [r7, #8]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d00e      	beq.n	800803c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	88da      	ldrh	r2, [r3, #6]
 8008022:	893b      	ldrh	r3, [r7, #8]
 8008024:	4293      	cmp	r3, r2
 8008026:	bf28      	it	cs
 8008028:	4613      	movcs	r3, r2
 800802a:	b29b      	uxth	r3, r3
 800802c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800802e:	893b      	ldrh	r3, [r7, #8]
 8008030:	461a      	mov	r2, r3
 8008032:	68f9      	ldr	r1, [r7, #12]
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f000 fa5d 	bl	80084f4 <USBD_CtlSendData>
 800803a:	e009      	b.n	8008050 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800803c:	6839      	ldr	r1, [r7, #0]
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f000 f9e7 	bl	8008412 <USBD_CtlError>
 8008044:	e004      	b.n	8008050 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f000 faae 	bl	80085a8 <USBD_CtlSendStatus>
 800804c:	e000      	b.n	8008050 <USBD_GetDescriptor+0x2cc>
    return;
 800804e:	bf00      	nop
  }
}
 8008050:	3710      	adds	r7, #16
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}
 8008056:	bf00      	nop

08008058 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b084      	sub	sp, #16
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
 8008060:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	889b      	ldrh	r3, [r3, #4]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d131      	bne.n	80080ce <USBD_SetAddress+0x76>
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	88db      	ldrh	r3, [r3, #6]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d12d      	bne.n	80080ce <USBD_SetAddress+0x76>
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	885b      	ldrh	r3, [r3, #2]
 8008076:	2b7f      	cmp	r3, #127	; 0x7f
 8008078:	d829      	bhi.n	80080ce <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	885b      	ldrh	r3, [r3, #2]
 800807e:	b2db      	uxtb	r3, r3
 8008080:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008084:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800808c:	b2db      	uxtb	r3, r3
 800808e:	2b03      	cmp	r3, #3
 8008090:	d104      	bne.n	800809c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008092:	6839      	ldr	r1, [r7, #0]
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f000 f9bc 	bl	8008412 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800809a:	e01d      	b.n	80080d8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	7bfa      	ldrb	r2, [r7, #15]
 80080a0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80080a4:	7bfb      	ldrb	r3, [r7, #15]
 80080a6:	4619      	mov	r1, r3
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f001 f98d 	bl	80093c8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f000 fa7a 	bl	80085a8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80080b4:	7bfb      	ldrb	r3, [r7, #15]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d004      	beq.n	80080c4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2202      	movs	r2, #2
 80080be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080c2:	e009      	b.n	80080d8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2201      	movs	r2, #1
 80080c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080cc:	e004      	b.n	80080d8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80080ce:	6839      	ldr	r1, [r7, #0]
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f000 f99e 	bl	8008412 <USBD_CtlError>
  }
}
 80080d6:	bf00      	nop
 80080d8:	bf00      	nop
 80080da:	3710      	adds	r7, #16
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}

080080e0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b084      	sub	sp, #16
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
 80080e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80080ea:	2300      	movs	r3, #0
 80080ec:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	885b      	ldrh	r3, [r3, #2]
 80080f2:	b2da      	uxtb	r2, r3
 80080f4:	4b4e      	ldr	r3, [pc, #312]	; (8008230 <USBD_SetConfig+0x150>)
 80080f6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80080f8:	4b4d      	ldr	r3, [pc, #308]	; (8008230 <USBD_SetConfig+0x150>)
 80080fa:	781b      	ldrb	r3, [r3, #0]
 80080fc:	2b01      	cmp	r3, #1
 80080fe:	d905      	bls.n	800810c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008100:	6839      	ldr	r1, [r7, #0]
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f000 f985 	bl	8008412 <USBD_CtlError>
    return USBD_FAIL;
 8008108:	2303      	movs	r3, #3
 800810a:	e08c      	b.n	8008226 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008112:	b2db      	uxtb	r3, r3
 8008114:	2b02      	cmp	r3, #2
 8008116:	d002      	beq.n	800811e <USBD_SetConfig+0x3e>
 8008118:	2b03      	cmp	r3, #3
 800811a:	d029      	beq.n	8008170 <USBD_SetConfig+0x90>
 800811c:	e075      	b.n	800820a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800811e:	4b44      	ldr	r3, [pc, #272]	; (8008230 <USBD_SetConfig+0x150>)
 8008120:	781b      	ldrb	r3, [r3, #0]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d020      	beq.n	8008168 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008126:	4b42      	ldr	r3, [pc, #264]	; (8008230 <USBD_SetConfig+0x150>)
 8008128:	781b      	ldrb	r3, [r3, #0]
 800812a:	461a      	mov	r2, r3
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008130:	4b3f      	ldr	r3, [pc, #252]	; (8008230 <USBD_SetConfig+0x150>)
 8008132:	781b      	ldrb	r3, [r3, #0]
 8008134:	4619      	mov	r1, r3
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f7fe ffe7 	bl	800710a <USBD_SetClassConfig>
 800813c:	4603      	mov	r3, r0
 800813e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008140:	7bfb      	ldrb	r3, [r7, #15]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d008      	beq.n	8008158 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008146:	6839      	ldr	r1, [r7, #0]
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f000 f962 	bl	8008412 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2202      	movs	r2, #2
 8008152:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008156:	e065      	b.n	8008224 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f000 fa25 	bl	80085a8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2203      	movs	r2, #3
 8008162:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008166:	e05d      	b.n	8008224 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f000 fa1d 	bl	80085a8 <USBD_CtlSendStatus>
      break;
 800816e:	e059      	b.n	8008224 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008170:	4b2f      	ldr	r3, [pc, #188]	; (8008230 <USBD_SetConfig+0x150>)
 8008172:	781b      	ldrb	r3, [r3, #0]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d112      	bne.n	800819e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2202      	movs	r2, #2
 800817c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008180:	4b2b      	ldr	r3, [pc, #172]	; (8008230 <USBD_SetConfig+0x150>)
 8008182:	781b      	ldrb	r3, [r3, #0]
 8008184:	461a      	mov	r2, r3
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800818a:	4b29      	ldr	r3, [pc, #164]	; (8008230 <USBD_SetConfig+0x150>)
 800818c:	781b      	ldrb	r3, [r3, #0]
 800818e:	4619      	mov	r1, r3
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f7fe ffd6 	bl	8007142 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f000 fa06 	bl	80085a8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800819c:	e042      	b.n	8008224 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800819e:	4b24      	ldr	r3, [pc, #144]	; (8008230 <USBD_SetConfig+0x150>)
 80081a0:	781b      	ldrb	r3, [r3, #0]
 80081a2:	461a      	mov	r2, r3
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	685b      	ldr	r3, [r3, #4]
 80081a8:	429a      	cmp	r2, r3
 80081aa:	d02a      	beq.n	8008202 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	685b      	ldr	r3, [r3, #4]
 80081b0:	b2db      	uxtb	r3, r3
 80081b2:	4619      	mov	r1, r3
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f7fe ffc4 	bl	8007142 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80081ba:	4b1d      	ldr	r3, [pc, #116]	; (8008230 <USBD_SetConfig+0x150>)
 80081bc:	781b      	ldrb	r3, [r3, #0]
 80081be:	461a      	mov	r2, r3
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80081c4:	4b1a      	ldr	r3, [pc, #104]	; (8008230 <USBD_SetConfig+0x150>)
 80081c6:	781b      	ldrb	r3, [r3, #0]
 80081c8:	4619      	mov	r1, r3
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f7fe ff9d 	bl	800710a <USBD_SetClassConfig>
 80081d0:	4603      	mov	r3, r0
 80081d2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80081d4:	7bfb      	ldrb	r3, [r7, #15]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d00f      	beq.n	80081fa <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80081da:	6839      	ldr	r1, [r7, #0]
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f000 f918 	bl	8008412 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	685b      	ldr	r3, [r3, #4]
 80081e6:	b2db      	uxtb	r3, r3
 80081e8:	4619      	mov	r1, r3
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f7fe ffa9 	bl	8007142 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2202      	movs	r2, #2
 80081f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80081f8:	e014      	b.n	8008224 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	f000 f9d4 	bl	80085a8 <USBD_CtlSendStatus>
      break;
 8008200:	e010      	b.n	8008224 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f000 f9d0 	bl	80085a8 <USBD_CtlSendStatus>
      break;
 8008208:	e00c      	b.n	8008224 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800820a:	6839      	ldr	r1, [r7, #0]
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f000 f900 	bl	8008412 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008212:	4b07      	ldr	r3, [pc, #28]	; (8008230 <USBD_SetConfig+0x150>)
 8008214:	781b      	ldrb	r3, [r3, #0]
 8008216:	4619      	mov	r1, r3
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f7fe ff92 	bl	8007142 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800821e:	2303      	movs	r3, #3
 8008220:	73fb      	strb	r3, [r7, #15]
      break;
 8008222:	bf00      	nop
  }

  return ret;
 8008224:	7bfb      	ldrb	r3, [r7, #15]
}
 8008226:	4618      	mov	r0, r3
 8008228:	3710      	adds	r7, #16
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}
 800822e:	bf00      	nop
 8008230:	20000bc4 	.word	0x20000bc4

08008234 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b082      	sub	sp, #8
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
 800823c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	88db      	ldrh	r3, [r3, #6]
 8008242:	2b01      	cmp	r3, #1
 8008244:	d004      	beq.n	8008250 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008246:	6839      	ldr	r1, [r7, #0]
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f000 f8e2 	bl	8008412 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800824e:	e023      	b.n	8008298 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008256:	b2db      	uxtb	r3, r3
 8008258:	2b02      	cmp	r3, #2
 800825a:	dc02      	bgt.n	8008262 <USBD_GetConfig+0x2e>
 800825c:	2b00      	cmp	r3, #0
 800825e:	dc03      	bgt.n	8008268 <USBD_GetConfig+0x34>
 8008260:	e015      	b.n	800828e <USBD_GetConfig+0x5a>
 8008262:	2b03      	cmp	r3, #3
 8008264:	d00b      	beq.n	800827e <USBD_GetConfig+0x4a>
 8008266:	e012      	b.n	800828e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2200      	movs	r2, #0
 800826c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	3308      	adds	r3, #8
 8008272:	2201      	movs	r2, #1
 8008274:	4619      	mov	r1, r3
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f000 f93c 	bl	80084f4 <USBD_CtlSendData>
        break;
 800827c:	e00c      	b.n	8008298 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	3304      	adds	r3, #4
 8008282:	2201      	movs	r2, #1
 8008284:	4619      	mov	r1, r3
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f000 f934 	bl	80084f4 <USBD_CtlSendData>
        break;
 800828c:	e004      	b.n	8008298 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800828e:	6839      	ldr	r1, [r7, #0]
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f000 f8be 	bl	8008412 <USBD_CtlError>
        break;
 8008296:	bf00      	nop
}
 8008298:	bf00      	nop
 800829a:	3708      	adds	r7, #8
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}

080082a0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b082      	sub	sp, #8
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
 80082a8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082b0:	b2db      	uxtb	r3, r3
 80082b2:	3b01      	subs	r3, #1
 80082b4:	2b02      	cmp	r3, #2
 80082b6:	d81e      	bhi.n	80082f6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	88db      	ldrh	r3, [r3, #6]
 80082bc:	2b02      	cmp	r3, #2
 80082be:	d004      	beq.n	80082ca <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80082c0:	6839      	ldr	r1, [r7, #0]
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f000 f8a5 	bl	8008412 <USBD_CtlError>
        break;
 80082c8:	e01a      	b.n	8008300 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2201      	movs	r2, #1
 80082ce:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d005      	beq.n	80082e6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	68db      	ldr	r3, [r3, #12]
 80082de:	f043 0202 	orr.w	r2, r3, #2
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	330c      	adds	r3, #12
 80082ea:	2202      	movs	r2, #2
 80082ec:	4619      	mov	r1, r3
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f000 f900 	bl	80084f4 <USBD_CtlSendData>
      break;
 80082f4:	e004      	b.n	8008300 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80082f6:	6839      	ldr	r1, [r7, #0]
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f000 f88a 	bl	8008412 <USBD_CtlError>
      break;
 80082fe:	bf00      	nop
  }
}
 8008300:	bf00      	nop
 8008302:	3708      	adds	r7, #8
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}

08008308 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b082      	sub	sp, #8
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
 8008310:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	885b      	ldrh	r3, [r3, #2]
 8008316:	2b01      	cmp	r3, #1
 8008318:	d107      	bne.n	800832a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2201      	movs	r2, #1
 800831e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f000 f940 	bl	80085a8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008328:	e013      	b.n	8008352 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	885b      	ldrh	r3, [r3, #2]
 800832e:	2b02      	cmp	r3, #2
 8008330:	d10b      	bne.n	800834a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	889b      	ldrh	r3, [r3, #4]
 8008336:	0a1b      	lsrs	r3, r3, #8
 8008338:	b29b      	uxth	r3, r3
 800833a:	b2da      	uxtb	r2, r3
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f000 f930 	bl	80085a8 <USBD_CtlSendStatus>
}
 8008348:	e003      	b.n	8008352 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800834a:	6839      	ldr	r1, [r7, #0]
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f000 f860 	bl	8008412 <USBD_CtlError>
}
 8008352:	bf00      	nop
 8008354:	3708      	adds	r7, #8
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}

0800835a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800835a:	b580      	push	{r7, lr}
 800835c:	b082      	sub	sp, #8
 800835e:	af00      	add	r7, sp, #0
 8008360:	6078      	str	r0, [r7, #4]
 8008362:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800836a:	b2db      	uxtb	r3, r3
 800836c:	3b01      	subs	r3, #1
 800836e:	2b02      	cmp	r3, #2
 8008370:	d80b      	bhi.n	800838a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	885b      	ldrh	r3, [r3, #2]
 8008376:	2b01      	cmp	r3, #1
 8008378:	d10c      	bne.n	8008394 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2200      	movs	r2, #0
 800837e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f000 f910 	bl	80085a8 <USBD_CtlSendStatus>
      }
      break;
 8008388:	e004      	b.n	8008394 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800838a:	6839      	ldr	r1, [r7, #0]
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f000 f840 	bl	8008412 <USBD_CtlError>
      break;
 8008392:	e000      	b.n	8008396 <USBD_ClrFeature+0x3c>
      break;
 8008394:	bf00      	nop
  }
}
 8008396:	bf00      	nop
 8008398:	3708      	adds	r7, #8
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}

0800839e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800839e:	b580      	push	{r7, lr}
 80083a0:	b084      	sub	sp, #16
 80083a2:	af00      	add	r7, sp, #0
 80083a4:	6078      	str	r0, [r7, #4]
 80083a6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	781a      	ldrb	r2, [r3, #0]
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	3301      	adds	r3, #1
 80083b8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	781a      	ldrb	r2, [r3, #0]
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	3301      	adds	r3, #1
 80083c6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80083c8:	68f8      	ldr	r0, [r7, #12]
 80083ca:	f7ff fa41 	bl	8007850 <SWAPBYTE>
 80083ce:	4603      	mov	r3, r0
 80083d0:	461a      	mov	r2, r3
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	3301      	adds	r3, #1
 80083da:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	3301      	adds	r3, #1
 80083e0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80083e2:	68f8      	ldr	r0, [r7, #12]
 80083e4:	f7ff fa34 	bl	8007850 <SWAPBYTE>
 80083e8:	4603      	mov	r3, r0
 80083ea:	461a      	mov	r2, r3
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	3301      	adds	r3, #1
 80083f4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	3301      	adds	r3, #1
 80083fa:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80083fc:	68f8      	ldr	r0, [r7, #12]
 80083fe:	f7ff fa27 	bl	8007850 <SWAPBYTE>
 8008402:	4603      	mov	r3, r0
 8008404:	461a      	mov	r2, r3
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	80da      	strh	r2, [r3, #6]
}
 800840a:	bf00      	nop
 800840c:	3710      	adds	r7, #16
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}

08008412 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008412:	b580      	push	{r7, lr}
 8008414:	b082      	sub	sp, #8
 8008416:	af00      	add	r7, sp, #0
 8008418:	6078      	str	r0, [r7, #4]
 800841a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800841c:	2180      	movs	r1, #128	; 0x80
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f000 ff68 	bl	80092f4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008424:	2100      	movs	r1, #0
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f000 ff64 	bl	80092f4 <USBD_LL_StallEP>
}
 800842c:	bf00      	nop
 800842e:	3708      	adds	r7, #8
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}

08008434 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b086      	sub	sp, #24
 8008438:	af00      	add	r7, sp, #0
 800843a:	60f8      	str	r0, [r7, #12]
 800843c:	60b9      	str	r1, [r7, #8]
 800843e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008440:	2300      	movs	r3, #0
 8008442:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d036      	beq.n	80084b8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800844e:	6938      	ldr	r0, [r7, #16]
 8008450:	f000 f836 	bl	80084c0 <USBD_GetLen>
 8008454:	4603      	mov	r3, r0
 8008456:	3301      	adds	r3, #1
 8008458:	b29b      	uxth	r3, r3
 800845a:	005b      	lsls	r3, r3, #1
 800845c:	b29a      	uxth	r2, r3
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008462:	7dfb      	ldrb	r3, [r7, #23]
 8008464:	68ba      	ldr	r2, [r7, #8]
 8008466:	4413      	add	r3, r2
 8008468:	687a      	ldr	r2, [r7, #4]
 800846a:	7812      	ldrb	r2, [r2, #0]
 800846c:	701a      	strb	r2, [r3, #0]
  idx++;
 800846e:	7dfb      	ldrb	r3, [r7, #23]
 8008470:	3301      	adds	r3, #1
 8008472:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008474:	7dfb      	ldrb	r3, [r7, #23]
 8008476:	68ba      	ldr	r2, [r7, #8]
 8008478:	4413      	add	r3, r2
 800847a:	2203      	movs	r2, #3
 800847c:	701a      	strb	r2, [r3, #0]
  idx++;
 800847e:	7dfb      	ldrb	r3, [r7, #23]
 8008480:	3301      	adds	r3, #1
 8008482:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008484:	e013      	b.n	80084ae <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008486:	7dfb      	ldrb	r3, [r7, #23]
 8008488:	68ba      	ldr	r2, [r7, #8]
 800848a:	4413      	add	r3, r2
 800848c:	693a      	ldr	r2, [r7, #16]
 800848e:	7812      	ldrb	r2, [r2, #0]
 8008490:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008492:	693b      	ldr	r3, [r7, #16]
 8008494:	3301      	adds	r3, #1
 8008496:	613b      	str	r3, [r7, #16]
    idx++;
 8008498:	7dfb      	ldrb	r3, [r7, #23]
 800849a:	3301      	adds	r3, #1
 800849c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800849e:	7dfb      	ldrb	r3, [r7, #23]
 80084a0:	68ba      	ldr	r2, [r7, #8]
 80084a2:	4413      	add	r3, r2
 80084a4:	2200      	movs	r2, #0
 80084a6:	701a      	strb	r2, [r3, #0]
    idx++;
 80084a8:	7dfb      	ldrb	r3, [r7, #23]
 80084aa:	3301      	adds	r3, #1
 80084ac:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	781b      	ldrb	r3, [r3, #0]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d1e7      	bne.n	8008486 <USBD_GetString+0x52>
 80084b6:	e000      	b.n	80084ba <USBD_GetString+0x86>
    return;
 80084b8:	bf00      	nop
  }
}
 80084ba:	3718      	adds	r7, #24
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}

080084c0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80084c0:	b480      	push	{r7}
 80084c2:	b085      	sub	sp, #20
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80084c8:	2300      	movs	r3, #0
 80084ca:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80084d0:	e005      	b.n	80084de <USBD_GetLen+0x1e>
  {
    len++;
 80084d2:	7bfb      	ldrb	r3, [r7, #15]
 80084d4:	3301      	adds	r3, #1
 80084d6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	3301      	adds	r3, #1
 80084dc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	781b      	ldrb	r3, [r3, #0]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d1f5      	bne.n	80084d2 <USBD_GetLen+0x12>
  }

  return len;
 80084e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80084e8:	4618      	mov	r0, r3
 80084ea:	3714      	adds	r7, #20
 80084ec:	46bd      	mov	sp, r7
 80084ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f2:	4770      	bx	lr

080084f4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b084      	sub	sp, #16
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	60f8      	str	r0, [r7, #12]
 80084fc:	60b9      	str	r1, [r7, #8]
 80084fe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	2202      	movs	r2, #2
 8008504:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	687a      	ldr	r2, [r7, #4]
 800850c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	687a      	ldr	r2, [r7, #4]
 8008512:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	68ba      	ldr	r2, [r7, #8]
 8008518:	2100      	movs	r1, #0
 800851a:	68f8      	ldr	r0, [r7, #12]
 800851c:	f000 ff73 	bl	8009406 <USBD_LL_Transmit>

  return USBD_OK;
 8008520:	2300      	movs	r3, #0
}
 8008522:	4618      	mov	r0, r3
 8008524:	3710      	adds	r7, #16
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}

0800852a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800852a:	b580      	push	{r7, lr}
 800852c:	b084      	sub	sp, #16
 800852e:	af00      	add	r7, sp, #0
 8008530:	60f8      	str	r0, [r7, #12]
 8008532:	60b9      	str	r1, [r7, #8]
 8008534:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	68ba      	ldr	r2, [r7, #8]
 800853a:	2100      	movs	r1, #0
 800853c:	68f8      	ldr	r0, [r7, #12]
 800853e:	f000 ff62 	bl	8009406 <USBD_LL_Transmit>

  return USBD_OK;
 8008542:	2300      	movs	r3, #0
}
 8008544:	4618      	mov	r0, r3
 8008546:	3710      	adds	r7, #16
 8008548:	46bd      	mov	sp, r7
 800854a:	bd80      	pop	{r7, pc}

0800854c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b084      	sub	sp, #16
 8008550:	af00      	add	r7, sp, #0
 8008552:	60f8      	str	r0, [r7, #12]
 8008554:	60b9      	str	r1, [r7, #8]
 8008556:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	2203      	movs	r2, #3
 800855c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	687a      	ldr	r2, [r7, #4]
 8008564:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	687a      	ldr	r2, [r7, #4]
 800856c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	68ba      	ldr	r2, [r7, #8]
 8008574:	2100      	movs	r1, #0
 8008576:	68f8      	ldr	r0, [r7, #12]
 8008578:	f000 ff66 	bl	8009448 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800857c:	2300      	movs	r3, #0
}
 800857e:	4618      	mov	r0, r3
 8008580:	3710      	adds	r7, #16
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}

08008586 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008586:	b580      	push	{r7, lr}
 8008588:	b084      	sub	sp, #16
 800858a:	af00      	add	r7, sp, #0
 800858c:	60f8      	str	r0, [r7, #12]
 800858e:	60b9      	str	r1, [r7, #8]
 8008590:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	68ba      	ldr	r2, [r7, #8]
 8008596:	2100      	movs	r1, #0
 8008598:	68f8      	ldr	r0, [r7, #12]
 800859a:	f000 ff55 	bl	8009448 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800859e:	2300      	movs	r3, #0
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	3710      	adds	r7, #16
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}

080085a8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b082      	sub	sp, #8
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2204      	movs	r2, #4
 80085b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80085b8:	2300      	movs	r3, #0
 80085ba:	2200      	movs	r2, #0
 80085bc:	2100      	movs	r1, #0
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f000 ff21 	bl	8009406 <USBD_LL_Transmit>

  return USBD_OK;
 80085c4:	2300      	movs	r3, #0
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3708      	adds	r7, #8
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}

080085ce <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80085ce:	b580      	push	{r7, lr}
 80085d0:	b082      	sub	sp, #8
 80085d2:	af00      	add	r7, sp, #0
 80085d4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2205      	movs	r2, #5
 80085da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80085de:	2300      	movs	r3, #0
 80085e0:	2200      	movs	r2, #0
 80085e2:	2100      	movs	r1, #0
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f000 ff2f 	bl	8009448 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80085ea:	2300      	movs	r3, #0
}
 80085ec:	4618      	mov	r0, r3
 80085ee:	3708      	adds	r7, #8
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd80      	pop	{r7, pc}

080085f4 <decamutexon>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
decaIrqStatus_t decamutexon(void)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b082      	sub	sp, #8
 80085f8:	af00      	add	r7, sp, #0
    decaIrqStatus_t s = port_GetEXT_IRQStatus();
 80085fa:	f000 fa3d 	bl	8008a78 <port_GetEXT_IRQStatus>
 80085fe:	4603      	mov	r3, r0
 8008600:	607b      	str	r3, [r7, #4]

    if (s)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d001      	beq.n	800860c <decamutexon+0x18>
    {
    	port_DisableEXT_IRQ(); // disable the external interrupt line
 8008608:	f000 fa28 	bl	8008a5c <port_DisableEXT_IRQ>
    }
    return s; // return state before disable, value is used to re-enable in decamutexoff call
 800860c:	687b      	ldr	r3, [r7, #4]
}
 800860e:	4618      	mov	r0, r3
 8008610:	3708      	adds	r7, #8
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}

08008616 <decamutexoff>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
void decamutexoff(decaIrqStatus_t s) // put a function here that re-enables the interrupt at the end of the critical section
{
 8008616:	b580      	push	{r7, lr}
 8008618:	b082      	sub	sp, #8
 800861a:	af00      	add	r7, sp, #0
 800861c:	6078      	str	r0, [r7, #4]
    if (s)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d001      	beq.n	8008628 <decamutexoff+0x12>
    { // need to check the port state as we can't use level sensitive interrupt on the STM ARM
    	port_EnableEXT_IRQ();
 8008624:	f000 fa21 	bl	8008a6a <port_EnableEXT_IRQ>
    }
}
 8008628:	bf00      	nop
 800862a:	3708      	adds	r7, #8
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}

08008630 <writetospiwithcrc>:
 * Low level abstract function to write to the SPI when SPI CRC mode is used
 * Takes two separate byte buffers for write header and write data, and a CRC8 byte which is written last
 * returns 0 for success, or -1 for error
 */
int writetospiwithcrc(uint16_t headerLength, const uint8_t *headerBuffer, uint16_t bodyLength, const uint8_t *bodyBuffer, uint8_t crc8)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b086      	sub	sp, #24
 8008634:	af00      	add	r7, sp, #0
 8008636:	60b9      	str	r1, [r7, #8]
 8008638:	607b      	str	r3, [r7, #4]
 800863a:	4603      	mov	r3, r0
 800863c:	81fb      	strh	r3, [r7, #14]
 800863e:	4613      	mov	r3, r2
 8008640:	81bb      	strh	r3, [r7, #12]
#ifdef DWT_ENABLE_CRC
    decaIrqStatus_t stat;
    stat = decamutexon();
 8008642:	f7ff ffd7 	bl	80085f4 <decamutexon>
 8008646:	6178      	str	r0, [r7, #20]
    while (HAL_SPI_GetState(hcurrent_active_spi) != HAL_SPI_STATE_READY);
 8008648:	bf00      	nop
 800864a:	4b1e      	ldr	r3, [pc, #120]	; (80086c4 <writetospiwithcrc+0x94>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	4618      	mov	r0, r3
 8008650:	f7fb fc9f 	bl	8003f92 <HAL_SPI_GetState>
 8008654:	4603      	mov	r3, r0
 8008656:	2b01      	cmp	r3, #1
 8008658:	d1f7      	bne.n	800864a <writetospiwithcrc+0x1a>

    HAL_GPIO_WritePin(pin_port_active_spi, pin_io_active_spi, SPI_CS_state); /**< Put chip select line low */
 800865a:	4b1b      	ldr	r3, [pc, #108]	; (80086c8 <writetospiwithcrc+0x98>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	4a1b      	ldr	r2, [pc, #108]	; (80086cc <writetospiwithcrc+0x9c>)
 8008660:	8811      	ldrh	r1, [r2, #0]
 8008662:	4a1b      	ldr	r2, [pc, #108]	; (80086d0 <writetospiwithcrc+0xa0>)
 8008664:	7812      	ldrb	r2, [r2, #0]
 8008666:	4618      	mov	r0, r3
 8008668:	f7f9 fb56 	bl	8001d18 <HAL_GPIO_WritePin>


    HAL_SPI_Transmit(hcurrent_active_spi, (uint8_t *)headerBuffer, headerLength, 10);    /* Send header in polling mode */
 800866c:	4b15      	ldr	r3, [pc, #84]	; (80086c4 <writetospiwithcrc+0x94>)
 800866e:	6818      	ldr	r0, [r3, #0]
 8008670:	89fa      	ldrh	r2, [r7, #14]
 8008672:	230a      	movs	r3, #10
 8008674:	68b9      	ldr	r1, [r7, #8]
 8008676:	f7fb fb50 	bl	8003d1a <HAL_SPI_Transmit>
    HAL_SPI_Transmit(hcurrent_active_spi, (uint8_t *)bodyBuffer, bodyLength, 10);        /* Send data in polling mode */
 800867a:	4b12      	ldr	r3, [pc, #72]	; (80086c4 <writetospiwithcrc+0x94>)
 800867c:	6818      	ldr	r0, [r3, #0]
 800867e:	89ba      	ldrh	r2, [r7, #12]
 8008680:	230a      	movs	r3, #10
 8008682:	6879      	ldr	r1, [r7, #4]
 8008684:	f7fb fb49 	bl	8003d1a <HAL_SPI_Transmit>
    HAL_SPI_Transmit(hcurrent_active_spi, (uint8_t *)&crc8, 1, 10);      /* Send data in polling mode */
 8008688:	4b0e      	ldr	r3, [pc, #56]	; (80086c4 <writetospiwithcrc+0x94>)
 800868a:	6818      	ldr	r0, [r3, #0]
 800868c:	230a      	movs	r3, #10
 800868e:	2201      	movs	r2, #1
 8008690:	f107 0120 	add.w	r1, r7, #32
 8008694:	f7fb fb41 	bl	8003d1a <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(pin_port_active_spi, pin_io_active_spi,(GPIO_PinState)(!((uint8_t)SPI_CS_state))); /**< Put chip select line high */
 8008698:	4b0b      	ldr	r3, [pc, #44]	; (80086c8 <writetospiwithcrc+0x98>)
 800869a:	6818      	ldr	r0, [r3, #0]
 800869c:	4b0b      	ldr	r3, [pc, #44]	; (80086cc <writetospiwithcrc+0x9c>)
 800869e:	8819      	ldrh	r1, [r3, #0]
 80086a0:	4b0b      	ldr	r3, [pc, #44]	; (80086d0 <writetospiwithcrc+0xa0>)
 80086a2:	781b      	ldrb	r3, [r3, #0]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	bf0c      	ite	eq
 80086a8:	2301      	moveq	r3, #1
 80086aa:	2300      	movne	r3, #0
 80086ac:	b2db      	uxtb	r3, r3
 80086ae:	461a      	mov	r2, r3
 80086b0:	f7f9 fb32 	bl	8001d18 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 80086b4:	6978      	ldr	r0, [r7, #20]
 80086b6:	f7ff ffae 	bl	8008616 <decamutexoff>
#endif //DWT_ENABLE_CRC
    return 0;
 80086ba:	2300      	movs	r3, #0
} // end writetospiwithcrc()
 80086bc:	4618      	mov	r0, r3
 80086be:	3718      	adds	r7, #24
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}
 80086c4:	20000098 	.word	0x20000098
 80086c8:	2000009c 	.word	0x2000009c
 80086cc:	200000a0 	.word	0x200000a0
 80086d0:	20000bc8 	.word	0x20000bc8

080086d4 <writetospi>:
 * Low level abstract function to write to the SPI
 * Takes two separate byte buffers for write header and write data
 * returns 0 for success, or -1 for error
 */
int writetospi(uint16_t headerLength, const uint8_t *headerBuffer, uint16_t bodyLength, const uint8_t *bodyBuffer)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b086      	sub	sp, #24
 80086d8:	af00      	add	r7, sp, #0
 80086da:	60b9      	str	r1, [r7, #8]
 80086dc:	607b      	str	r3, [r7, #4]
 80086de:	4603      	mov	r3, r0
 80086e0:	81fb      	strh	r3, [r7, #14]
 80086e2:	4613      	mov	r3, r2
 80086e4:	81bb      	strh	r3, [r7, #12]
    decaIrqStatus_t stat;
    stat = decamutexon();
 80086e6:	f7ff ff85 	bl	80085f4 <decamutexon>
 80086ea:	6178      	str	r0, [r7, #20]

    while (HAL_SPI_GetState(hcurrent_active_spi) != HAL_SPI_STATE_READY);
 80086ec:	bf00      	nop
 80086ee:	4b1d      	ldr	r3, [pc, #116]	; (8008764 <writetospi+0x90>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	4618      	mov	r0, r3
 80086f4:	f7fb fc4d 	bl	8003f92 <HAL_SPI_GetState>
 80086f8:	4603      	mov	r3, r0
 80086fa:	2b01      	cmp	r3, #1
 80086fc:	d1f7      	bne.n	80086ee <writetospi+0x1a>

    HAL_GPIO_WritePin(pin_port_active_spi, pin_io_active_spi, SPI_CS_state); /**< Put chip select line low */
 80086fe:	4b1a      	ldr	r3, [pc, #104]	; (8008768 <writetospi+0x94>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	4a1a      	ldr	r2, [pc, #104]	; (800876c <writetospi+0x98>)
 8008704:	8811      	ldrh	r1, [r2, #0]
 8008706:	4a1a      	ldr	r2, [pc, #104]	; (8008770 <writetospi+0x9c>)
 8008708:	7812      	ldrb	r2, [r2, #0]
 800870a:	4618      	mov	r0, r3
 800870c:	f7f9 fb04 	bl	8001d18 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(hcurrent_active_spi, (uint8_t *)headerBuffer, headerLength, HAL_MAX_DELAY); /* Send header in polling mode */
 8008710:	4b14      	ldr	r3, [pc, #80]	; (8008764 <writetospi+0x90>)
 8008712:	6818      	ldr	r0, [r3, #0]
 8008714:	89fa      	ldrh	r2, [r7, #14]
 8008716:	f04f 33ff 	mov.w	r3, #4294967295
 800871a:	68b9      	ldr	r1, [r7, #8]
 800871c:	f7fb fafd 	bl	8003d1a <HAL_SPI_Transmit>

    if(bodyLength != 0)
 8008720:	89bb      	ldrh	r3, [r7, #12]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d007      	beq.n	8008736 <writetospi+0x62>
    {
        HAL_SPI_Transmit(hcurrent_active_spi, (uint8_t *)bodyBuffer,   bodyLength, HAL_MAX_DELAY);     /* Send data in polling mode */
 8008726:	4b0f      	ldr	r3, [pc, #60]	; (8008764 <writetospi+0x90>)
 8008728:	6818      	ldr	r0, [r3, #0]
 800872a:	89ba      	ldrh	r2, [r7, #12]
 800872c:	f04f 33ff 	mov.w	r3, #4294967295
 8008730:	6879      	ldr	r1, [r7, #4]
 8008732:	f7fb faf2 	bl	8003d1a <HAL_SPI_Transmit>
    }

    HAL_GPIO_WritePin(pin_port_active_spi, pin_io_active_spi, (GPIO_PinState)(!((uint8_t)SPI_CS_state))); /**< Put chip select line high */
 8008736:	4b0c      	ldr	r3, [pc, #48]	; (8008768 <writetospi+0x94>)
 8008738:	6818      	ldr	r0, [r3, #0]
 800873a:	4b0c      	ldr	r3, [pc, #48]	; (800876c <writetospi+0x98>)
 800873c:	8819      	ldrh	r1, [r3, #0]
 800873e:	4b0c      	ldr	r3, [pc, #48]	; (8008770 <writetospi+0x9c>)
 8008740:	781b      	ldrb	r3, [r3, #0]
 8008742:	2b00      	cmp	r3, #0
 8008744:	bf0c      	ite	eq
 8008746:	2301      	moveq	r3, #1
 8008748:	2300      	movne	r3, #0
 800874a:	b2db      	uxtb	r3, r3
 800874c:	461a      	mov	r2, r3
 800874e:	f7f9 fae3 	bl	8001d18 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 8008752:	6978      	ldr	r0, [r7, #20]
 8008754:	f7ff ff5f 	bl	8008616 <decamutexoff>

    return 0;
 8008758:	2300      	movs	r3, #0
} // end writetospi()
 800875a:	4618      	mov	r0, r3
 800875c:	3718      	adds	r7, #24
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}
 8008762:	bf00      	nop
 8008764:	20000098 	.word	0x20000098
 8008768:	2000009c 	.word	0x2000009c
 800876c:	200000a0 	.word	0x200000a0
 8008770:	20000bc8 	.word	0x20000bc8

08008774 <readfromspi>:
 * returns the offset into read buffer where first byte of read data may be found,
 * or returns -1 if there was an error
 */
//#pragma GCC optimize ("O3")
int readfromspi(uint16_t headerLength, uint8_t *headerBuffer, uint16_t readlength, uint8_t *readBuffer)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b086      	sub	sp, #24
 8008778:	af00      	add	r7, sp, #0
 800877a:	60b9      	str	r1, [r7, #8]
 800877c:	607b      	str	r3, [r7, #4]
 800877e:	4603      	mov	r3, r0
 8008780:	81fb      	strh	r3, [r7, #14]
 8008782:	4613      	mov	r3, r2
 8008784:	81bb      	strh	r3, [r7, #12]

    decaIrqStatus_t stat;
    stat = decamutexon();
 8008786:	f7ff ff35 	bl	80085f4 <decamutexon>
 800878a:	6178      	str	r0, [r7, #20]

    /* Blocking: Check whether previous transfer has been finished */
    while (HAL_SPI_GetState(hcurrent_active_spi) != HAL_SPI_STATE_READY);
 800878c:	bf00      	nop
 800878e:	4b2f      	ldr	r3, [pc, #188]	; (800884c <readfromspi+0xd8>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	4618      	mov	r0, r3
 8008794:	f7fb fbfd 	bl	8003f92 <HAL_SPI_GetState>
 8008798:	4603      	mov	r3, r0
 800879a:	2b01      	cmp	r3, #1
 800879c:	d1f7      	bne.n	800878e <readfromspi+0x1a>

    HAL_GPIO_WritePin(pin_port_active_spi, pin_io_active_spi, SPI_CS_state); /**< Put chip select line low */
 800879e:	4b2c      	ldr	r3, [pc, #176]	; (8008850 <readfromspi+0xdc>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	4a2c      	ldr	r2, [pc, #176]	; (8008854 <readfromspi+0xe0>)
 80087a4:	8811      	ldrh	r1, [r2, #0]
 80087a6:	4a2c      	ldr	r2, [pc, #176]	; (8008858 <readfromspi+0xe4>)
 80087a8:	7812      	ldrb	r2, [r2, #0]
 80087aa:	4618      	mov	r0, r3
 80087ac:	f7f9 fab4 	bl	8001d18 <HAL_GPIO_WritePin>

    /* Send header */
    HAL_SPI_Transmit(hcurrent_active_spi, (uint8_t*)headerBuffer, headerLength, HAL_MAX_DELAY); //No timeout
 80087b0:	4b26      	ldr	r3, [pc, #152]	; (800884c <readfromspi+0xd8>)
 80087b2:	6818      	ldr	r0, [r3, #0]
 80087b4:	89fa      	ldrh	r2, [r7, #14]
 80087b6:	f04f 33ff 	mov.w	r3, #4294967295
 80087ba:	68b9      	ldr	r1, [r7, #8]
 80087bc:	f7fb faad 	bl	8003d1a <HAL_SPI_Transmit>

    while(__HAL_SPI_GET_FLAG(hcurrent_active_spi, SPI_FLAG_TXE) == RESET)//Verify that the transmit was ended
 80087c0:	bf00      	nop
 80087c2:	4b22      	ldr	r3, [pc, #136]	; (800884c <readfromspi+0xd8>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	689b      	ldr	r3, [r3, #8]
 80087ca:	f003 0302 	and.w	r3, r3, #2
 80087ce:	2b02      	cmp	r3, #2
 80087d0:	d1f7      	bne.n	80087c2 <readfromspi+0x4e>
    {
    }

    /* for the data buffer use LL functions directly as the HAL SPI read function
     * has issue reading single bytes */
    while (readlength-- > 0)
 80087d2:	e01f      	b.n	8008814 <readfromspi+0xa0>
    {
        /* Wait until TXE flag is set to send data */
        while(__HAL_SPI_GET_FLAG(hcurrent_active_spi, SPI_FLAG_TXE) == RESET)
 80087d4:	bf00      	nop
 80087d6:	4b1d      	ldr	r3, [pc, #116]	; (800884c <readfromspi+0xd8>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	689b      	ldr	r3, [r3, #8]
 80087de:	f003 0302 	and.w	r3, r3, #2
 80087e2:	2b02      	cmp	r3, #2
 80087e4:	d1f7      	bne.n	80087d6 <readfromspi+0x62>
        {
        }

        hcurrent_active_spi->Instance->DR=0;
 80087e6:	4b19      	ldr	r3, [pc, #100]	; (800884c <readfromspi+0xd8>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	2200      	movs	r2, #0
 80087ee:	60da      	str	r2, [r3, #12]
        /* set output to 0 (MOSI), this is necessary for
        e.g. when waking up DW3000 from DEEPSLEEP via dwt_spicswakeup() function.
        */

        /* Wait until RXNE flag is set to read data */
        while(__HAL_SPI_GET_FLAG(hcurrent_active_spi, SPI_FLAG_RXNE) == RESET)
 80087f0:	bf00      	nop
 80087f2:	4b16      	ldr	r3, [pc, #88]	; (800884c <readfromspi+0xd8>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	689b      	ldr	r3, [r3, #8]
 80087fa:	f003 0301 	and.w	r3, r3, #1
 80087fe:	2b01      	cmp	r3, #1
 8008800:	d1f7      	bne.n	80087f2 <readfromspi+0x7e>
        {
        }

        (*readBuffer++) = hcurrent_active_spi->Instance->DR;  //copy data read form (MISO)
 8008802:	4b12      	ldr	r3, [pc, #72]	; (800884c <readfromspi+0xd8>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	68d9      	ldr	r1, [r3, #12]
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	1c5a      	adds	r2, r3, #1
 800880e:	607a      	str	r2, [r7, #4]
 8008810:	b2ca      	uxtb	r2, r1
 8008812:	701a      	strb	r2, [r3, #0]
    while (readlength-- > 0)
 8008814:	89bb      	ldrh	r3, [r7, #12]
 8008816:	1e5a      	subs	r2, r3, #1
 8008818:	81ba      	strh	r2, [r7, #12]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d1da      	bne.n	80087d4 <readfromspi+0x60>
    }


    HAL_GPIO_WritePin(pin_port_active_spi, pin_io_active_spi, (GPIO_PinState)(!((uint8_t)SPI_CS_state))); /**< Put chip select line high */
 800881e:	4b0c      	ldr	r3, [pc, #48]	; (8008850 <readfromspi+0xdc>)
 8008820:	6818      	ldr	r0, [r3, #0]
 8008822:	4b0c      	ldr	r3, [pc, #48]	; (8008854 <readfromspi+0xe0>)
 8008824:	8819      	ldrh	r1, [r3, #0]
 8008826:	4b0c      	ldr	r3, [pc, #48]	; (8008858 <readfromspi+0xe4>)
 8008828:	781b      	ldrb	r3, [r3, #0]
 800882a:	2b00      	cmp	r3, #0
 800882c:	bf0c      	ite	eq
 800882e:	2301      	moveq	r3, #1
 8008830:	2300      	movne	r3, #0
 8008832:	b2db      	uxtb	r3, r3
 8008834:	461a      	mov	r2, r3
 8008836:	f7f9 fa6f 	bl	8001d18 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 800883a:	6978      	ldr	r0, [r7, #20]
 800883c:	f7ff feeb 	bl	8008616 <decamutexoff>

    return 0;
 8008840:	2300      	movs	r3, #0
} // end readfromspi()
 8008842:	4618      	mov	r0, r3
 8008844:	3718      	adds	r7, #24
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}
 800884a:	bf00      	nop
 800884c:	20000098 	.word	0x20000098
 8008850:	2000009c 	.word	0x2000009c
 8008854:	200000a0 	.word	0x200000a0
 8008858:	20000bc8 	.word	0x20000bc8

0800885c <__NVIC_EnableIRQ>:
{
 800885c:	b480      	push	{r7}
 800885e:	b083      	sub	sp, #12
 8008860:	af00      	add	r7, sp, #0
 8008862:	4603      	mov	r3, r0
 8008864:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800886a:	2b00      	cmp	r3, #0
 800886c:	db0b      	blt.n	8008886 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800886e:	79fb      	ldrb	r3, [r7, #7]
 8008870:	f003 021f 	and.w	r2, r3, #31
 8008874:	4907      	ldr	r1, [pc, #28]	; (8008894 <__NVIC_EnableIRQ+0x38>)
 8008876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800887a:	095b      	lsrs	r3, r3, #5
 800887c:	2001      	movs	r0, #1
 800887e:	fa00 f202 	lsl.w	r2, r0, r2
 8008882:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008886:	bf00      	nop
 8008888:	370c      	adds	r7, #12
 800888a:	46bd      	mov	sp, r7
 800888c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008890:	4770      	bx	lr
 8008892:	bf00      	nop
 8008894:	e000e100 	.word	0xe000e100

08008898 <__NVIC_DisableIRQ>:
{
 8008898:	b480      	push	{r7}
 800889a:	b083      	sub	sp, #12
 800889c:	af00      	add	r7, sp, #0
 800889e:	4603      	mov	r3, r0
 80088a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80088a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	db12      	blt.n	80088d0 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80088aa:	79fb      	ldrb	r3, [r7, #7]
 80088ac:	f003 021f 	and.w	r2, r3, #31
 80088b0:	490a      	ldr	r1, [pc, #40]	; (80088dc <__NVIC_DisableIRQ+0x44>)
 80088b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80088b6:	095b      	lsrs	r3, r3, #5
 80088b8:	2001      	movs	r0, #1
 80088ba:	fa00 f202 	lsl.w	r2, r0, r2
 80088be:	3320      	adds	r3, #32
 80088c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80088c4:	f3bf 8f4f 	dsb	sy
}
 80088c8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80088ca:	f3bf 8f6f 	isb	sy
}
 80088ce:	bf00      	nop
}
 80088d0:	bf00      	nop
 80088d2:	370c      	adds	r7, #12
 80088d4:	46bd      	mov	sp, r7
 80088d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088da:	4770      	bx	lr
 80088dc:	e000e100 	.word	0xe000e100

080088e0 <usleep>:
/* @fn    usleep
 * @brief precise usleep() delay
 * */
#pragma GCC optimize("O0")
int usleep(useconds_t usec)
{
 80088e0:	b480      	push	{r7}
 80088e2:	b085      	sub	sp, #20
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
    unsigned int i;

    usec *= 12;
 80088e8:	687a      	ldr	r2, [r7, #4]
 80088ea:	4613      	mov	r3, r2
 80088ec:	005b      	lsls	r3, r3, #1
 80088ee:	4413      	add	r3, r2
 80088f0:	009b      	lsls	r3, r3, #2
 80088f2:	607b      	str	r3, [r7, #4]
    for (i = 0; i < usec; i++)
 80088f4:	2300      	movs	r3, #0
 80088f6:	60fb      	str	r3, [r7, #12]
 80088f8:	e003      	b.n	8008902 <usleep+0x22>
    {
        __NOP();
 80088fa:	bf00      	nop
    for (i = 0; i < usec; i++)
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	3301      	adds	r3, #1
 8008900:	60fb      	str	r3, [r7, #12]
 8008902:	68fa      	ldr	r2, [r7, #12]
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	429a      	cmp	r2, r3
 8008908:	d3f7      	bcc.n	80088fa <usleep+0x1a>
    }
    return 0;
 800890a:	2300      	movs	r3, #0
}
 800890c:	4618      	mov	r0, r3
 800890e:	3714      	adds	r7, #20
 8008910:	46bd      	mov	sp, r7
 8008912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008916:	4770      	bx	lr

08008918 <Sleep>:

/* @fn    Sleep
 * @brief Sleep delay in ms using SysTick timer
 * */
__INLINE void Sleep(uint32_t x)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b082      	sub	sp, #8
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
    HAL_Delay(x);
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f7f8 ff57 	bl	80017d4 <HAL_Delay>
}
 8008926:	bf00      	nop
 8008928:	3708      	adds	r7, #8
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}
	...

08008930 <EXTI_GetITEnStatus>:
 * @brief  Checks whether the specified IRQn line is enabled or not.
 * @param  IRQn: specifies the IRQn line to check.
 * @return "0" when IRQn is "not enabled" and !0 otherwise
 */
ITStatus EXTI_GetITEnStatus(IRQn_Type IRQn)
{
 8008930:	b480      	push	{r7}
 8008932:	b083      	sub	sp, #12
 8008934:	af00      	add	r7, sp, #0
 8008936:	4603      	mov	r3, r0
 8008938:	71fb      	strb	r3, [r7, #7]
    return ((NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) == (uint32_t)RESET) ? (RESET) : (SET);
 800893a:	4a0c      	ldr	r2, [pc, #48]	; (800896c <EXTI_GetITEnStatus+0x3c>)
 800893c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008940:	095b      	lsrs	r3, r3, #5
 8008942:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008946:	79fb      	ldrb	r3, [r7, #7]
 8008948:	f003 031f 	and.w	r3, r3, #31
 800894c:	fa22 f303 	lsr.w	r3, r2, r3
 8008950:	f003 0301 	and.w	r3, r3, #1
 8008954:	2b00      	cmp	r3, #0
 8008956:	bf14      	ite	ne
 8008958:	2301      	movne	r3, #1
 800895a:	2300      	moveq	r3, #0
 800895c:	b2db      	uxtb	r3, r3
}
 800895e:	4618      	mov	r0, r3
 8008960:	370c      	adds	r7, #12
 8008962:	46bd      	mov	sp, r7
 8008964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008968:	4770      	bx	lr
 800896a:	bf00      	nop
 800896c:	e000e100 	.word	0xe000e100

08008970 <reset_DWIC>:
 *          In general it is output, but it also can be used to reset the digital
 *          part of DW IC by driving this pin low.
 *          Note, the DW_RESET pin should not be driven high externally.
 * */
void reset_DWIC(void)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	af00      	add	r7, sp, #0
    // drive the RSTn pin low
    HAL_GPIO_WritePin(DW_RSTn_GPIO_Port, DW_RSTn_Pin, GPIO_PIN_RESET);
 8008974:	2200      	movs	r2, #0
 8008976:	2110      	movs	r1, #16
 8008978:	4807      	ldr	r0, [pc, #28]	; (8008998 <reset_DWIC+0x28>)
 800897a:	f7f9 f9cd 	bl	8001d18 <HAL_GPIO_WritePin>

    usleep(1);
 800897e:	2001      	movs	r0, #1
 8008980:	f7ff ffae 	bl	80088e0 <usleep>

    // drive the RSTn pin high
    HAL_GPIO_WritePin(DW_RSTn_GPIO_Port, DW_RSTn_Pin, GPIO_PIN_SET);
 8008984:	2201      	movs	r2, #1
 8008986:	2110      	movs	r1, #16
 8008988:	4803      	ldr	r0, [pc, #12]	; (8008998 <reset_DWIC+0x28>)
 800898a:	f7f9 f9c5 	bl	8001d18 <HAL_GPIO_WritePin>

    Sleep(2);
 800898e:	2002      	movs	r0, #2
 8008990:	f7ff ffc2 	bl	8008918 <Sleep>
}
 8008994:	bf00      	nop
 8008996:	bd80      	pop	{r7, pc}
 8008998:	40020400 	.word	0x40020400

0800899c <wakeup_device_with_io>:
 *
 * output -None
 *
 */
void wakeup_device_with_io(void)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(UWB_WAKEUP_GPIO_Port, UWB_WAKEUP_Pin, GPIO_PIN_SET);
 80089a0:	2201      	movs	r2, #1
 80089a2:	2108      	movs	r1, #8
 80089a4:	4806      	ldr	r0, [pc, #24]	; (80089c0 <wakeup_device_with_io+0x24>)
 80089a6:	f7f9 f9b7 	bl	8001d18 <HAL_GPIO_WritePin>
	WAIT_200uSEC;
 80089aa:	2001      	movs	r0, #1
 80089ac:	f7ff ffb4 	bl	8008918 <Sleep>
	HAL_GPIO_WritePin(UWB_WAKEUP_GPIO_Port, UWB_WAKEUP_Pin, GPIO_PIN_RESET);
 80089b0:	2200      	movs	r2, #0
 80089b2:	2108      	movs	r1, #8
 80089b4:	4802      	ldr	r0, [pc, #8]	; (80089c0 <wakeup_device_with_io+0x24>)
 80089b6:	f7f9 f9af 	bl	8001d18 <HAL_GPIO_WritePin>
}
 80089ba:	bf00      	nop
 80089bc:	bd80      	pop	{r7, pc}
 80089be:	bf00      	nop
 80089c0:	40020400 	.word	0x40020400

080089c4 <port_set_dw_ic_spi_slowrate>:
/* @fn      port_set_dw_ic_spi_slowrate
 * @brief   set 4.5MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw_ic_spi_slowrate(void)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	af00      	add	r7, sp, #0
    hcurrent_active_spi->Init.BaudRatePrescaler=SPI_BAUDRATEPRESCALER_16;
 80089c8:	4b05      	ldr	r3, [pc, #20]	; (80089e0 <port_set_dw_ic_spi_slowrate+0x1c>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	2218      	movs	r2, #24
 80089ce:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(hcurrent_active_spi);
 80089d0:	4b03      	ldr	r3, [pc, #12]	; (80089e0 <port_set_dw_ic_spi_slowrate+0x1c>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	4618      	mov	r0, r3
 80089d6:	f7fb f917 	bl	8003c08 <HAL_SPI_Init>
}
 80089da:	bf00      	nop
 80089dc:	bd80      	pop	{r7, pc}
 80089de:	bf00      	nop
 80089e0:	20000098 	.word	0x20000098

080089e4 <port_set_dw_ic_spi_fastrate>:
/* @fn      port_set_dw_ic_spi_fastrate
 * @brief   set 18MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw_ic_spi_fastrate(void)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	af00      	add	r7, sp, #0
    hcurrent_active_spi->Init.BaudRatePrescaler=SPI_BAUDRATEPRESCALER_2;
 80089e8:	4b05      	ldr	r3, [pc, #20]	; (8008a00 <port_set_dw_ic_spi_fastrate+0x1c>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	2200      	movs	r2, #0
 80089ee:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(hcurrent_active_spi);
 80089f0:	4b03      	ldr	r3, [pc, #12]	; (8008a00 <port_set_dw_ic_spi_fastrate+0x1c>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	4618      	mov	r0, r3
 80089f6:	f7fb f907 	bl	8003c08 <HAL_SPI_Init>
}
 80089fa:	bf00      	nop
 80089fc:	bd80      	pop	{r7, pc}
 80089fe:	bf00      	nop
 8008a00:	20000098 	.word	0x20000098

08008a04 <HAL_GPIO_EXTI_Callback>:
 * @brief      EXTI line detection callback from HAL layer
 * @param      GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
 *             i.e. DW_RESET_Pin and DW_IRQn_Pin
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b082      	sub	sp, #8
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	80fb      	strh	r3, [r7, #6]
    switch (GPIO_Pin)
 8008a0e:	88fb      	ldrh	r3, [r7, #6]
 8008a10:	2b01      	cmp	r3, #1
 8008a12:	d005      	beq.n	8008a20 <HAL_GPIO_EXTI_Callback+0x1c>
 8008a14:	2b10      	cmp	r3, #16
 8008a16:	d106      	bne.n	8008a26 <HAL_GPIO_EXTI_Callback+0x22>
    {
    case DW_RSTn_Pin:
        signalResetDone = 1;
 8008a18:	4b05      	ldr	r3, [pc, #20]	; (8008a30 <HAL_GPIO_EXTI_Callback+0x2c>)
 8008a1a:	2201      	movs	r2, #1
 8008a1c:	601a      	str	r2, [r3, #0]
        break;
 8008a1e:	e003      	b.n	8008a28 <HAL_GPIO_EXTI_Callback+0x24>

    case DECA_IRQ_Pin :
//    case DW_IRQ2_Pin :
        {
            {
                process_deca_irq();
 8008a20:	f000 f808 	bl	8008a34 <process_deca_irq>
            }

        break;
 8008a24:	e000      	b.n	8008a28 <HAL_GPIO_EXTI_Callback+0x24>
    }

    default:
        break;
 8008a26:	bf00      	nop
    }
}
 8008a28:	bf00      	nop
 8008a2a:	3708      	adds	r7, #8
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}
 8008a30:	20000bcc 	.word	0x20000bcc

08008a34 <process_deca_irq>:
 * @brief   main call-back for processing of DW3000 IRQ
 *          it re-enters the IRQ routing and processes all events.
 *          After processing of all events, DW3000 will clear the IRQ line.
 * */
__INLINE void process_deca_irq(void)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	af00      	add	r7, sp, #0
    while (port_CheckEXT_IRQ() != 0)
 8008a38:	e006      	b.n	8008a48 <process_deca_irq+0x14>
    {
        if (port_dwic_isr)
 8008a3a:	4b07      	ldr	r3, [pc, #28]	; (8008a58 <process_deca_irq+0x24>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d002      	beq.n	8008a48 <process_deca_irq+0x14>
        {
            port_dwic_isr();
 8008a42:	4b05      	ldr	r3, [pc, #20]	; (8008a58 <process_deca_irq+0x24>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	4798      	blx	r3
    while (port_CheckEXT_IRQ() != 0)
 8008a48:	f000 f824 	bl	8008a94 <port_CheckEXT_IRQ>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d1f3      	bne.n	8008a3a <process_deca_irq+0x6>
        }
    } // while DW3000 IRQ line active
}
 8008a52:	bf00      	nop
 8008a54:	bf00      	nop
 8008a56:	bd80      	pop	{r7, pc}
 8008a58:	20000bd0 	.word	0x20000bd0

08008a5c <port_DisableEXT_IRQ>:
/* @fn      port_DisableEXT_IRQ
 * @brief   wrapper to disable DW_IRQ pin IRQ
 *          in current implementation it disables all IRQ from lines 5:9
 * */
__INLINE void port_DisableEXT_IRQ(void)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	af00      	add	r7, sp, #0
//    if(SPI_1 == host_spi)
//    {
        NVIC_DisableIRQ(EXTI0_IRQn);
 8008a60:	2006      	movs	r0, #6
 8008a62:	f7ff ff19 	bl	8008898 <__NVIC_DisableIRQ>
//    else
//    {
//        NVIC_DisableIRQ(DECAIRQ_EXTI_IRQn2);
//    }

}
 8008a66:	bf00      	nop
 8008a68:	bd80      	pop	{r7, pc}

08008a6a <port_EnableEXT_IRQ>:
/* @fn      port_EnableEXT_IRQ
 * @brief   wrapper to enable DW_IRQ pin IRQ
 *          in current implementation it enables all IRQ from lines 5:9
 * */
__INLINE void port_EnableEXT_IRQ(void)
{
 8008a6a:	b580      	push	{r7, lr}
 8008a6c:	af00      	add	r7, sp, #0
//    if(SPI_1 == host_spi)
//    {
        NVIC_EnableIRQ(EXTI0_IRQn);
 8008a6e:	2006      	movs	r0, #6
 8008a70:	f7ff fef4 	bl	800885c <__NVIC_EnableIRQ>
//    }
//    else
//    {
//        NVIC_EnableIRQ(DECAIRQ_EXTI_IRQn2);
//    }
}
 8008a74:	bf00      	nop
 8008a76:	bd80      	pop	{r7, pc}

08008a78 <port_GetEXT_IRQStatus>:

/* @fn      port_GetEXT_IRQStatus
 * @brief   wrapper to read a DW_IRQ pin IRQ status
 * */
__INLINE uint32_t port_GetEXT_IRQStatus(void)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b082      	sub	sp, #8
 8008a7c:	af00      	add	r7, sp, #0
    uint32_t status;

//    if(SPI_1 == host_spi)
//    {
        status = EXTI_GetITEnStatus(EXTI0_IRQn);
 8008a7e:	2006      	movs	r0, #6
 8008a80:	f7ff ff56 	bl	8008930 <EXTI_GetITEnStatus>
 8008a84:	4603      	mov	r3, r0
 8008a86:	607b      	str	r3, [r7, #4]
//    }
//    else
//    {
//        status = EXTI_GetITEnStatus(DECAIRQ_EXTI_IRQn2);
//    }
    return status;
 8008a88:	687b      	ldr	r3, [r7, #4]
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	3708      	adds	r7, #8
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}
	...

08008a94 <port_CheckEXT_IRQ>:

/* @fn      port_CheckEXT_IRQ
 * @brief   wrapper to read DW_IRQ input pin state
 * */
__INLINE uint32_t port_CheckEXT_IRQ(void)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b082      	sub	sp, #8
 8008a98:	af00      	add	r7, sp, #0
    uint32_t status;

//    if(SPI_1 == host_spi)
//    {
        status = HAL_GPIO_ReadPin(DECA_IRQ_GPIO_Port, DECA_IRQ_Pin);;
 8008a9a:	2101      	movs	r1, #1
 8008a9c:	4804      	ldr	r0, [pc, #16]	; (8008ab0 <port_CheckEXT_IRQ+0x1c>)
 8008a9e:	f7f9 f923 	bl	8001ce8 <HAL_GPIO_ReadPin>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	607b      	str	r3, [r7, #4]
//    }
//    else
//    {
//        status = HAL_GPIO_ReadPin(DECAIRQ2_GPIO, DW_IRQ2_Pin);
//    }
    return status;
 8008aa6:	687b      	ldr	r3, [r7, #4]
}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	3708      	adds	r7, #8
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}
 8008ab0:	40020400 	.word	0x40020400

08008ab4 <__io_putchar>:
#include "usart.h"
#include "usbd_cdc_if.h"
extern uint8_t UserTxBufferFS[APP_TX_DATA_SIZE];

PUTCHAR_PROTOTYPE
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b082      	sub	sp, #8
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
    /* Place your implementation of fputc here */
    /* e.g. write a character to the USART2 and Loop until the end of transmission */
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8008abc:	1d39      	adds	r1, r7, #4
 8008abe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008ac2:	2201      	movs	r2, #1
 8008ac4:	4803      	ldr	r0, [pc, #12]	; (8008ad4 <__io_putchar+0x20>)
 8008ac6:	f7fb fe0a 	bl	80046de <HAL_UART_Transmit>

    return ch;
 8008aca:	687b      	ldr	r3, [r7, #4]
}
 8008acc:	4618      	mov	r0, r3
 8008ace:	3708      	adds	r7, #8
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}
 8008ad4:	20000b78 	.word	0x20000b78

08008ad8 <usb_printf>:
void usb_printf(const char *format, ...)
{
 8008ad8:	b40f      	push	{r0, r1, r2, r3}
 8008ada:	b580      	push	{r7, lr}
 8008adc:	b082      	sub	sp, #8
 8008ade:	af00      	add	r7, sp, #0
    va_list args;
    uint32_t length;

    va_start(args, format);
 8008ae0:	f107 0314 	add.w	r3, r7, #20
 8008ae4:	603b      	str	r3, [r7, #0]
    length = vsnprintf((char *)UserTxBufferFS, APP_TX_DATA_SIZE, (char *)format, args);
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	693a      	ldr	r2, [r7, #16]
 8008aea:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008aee:	4809      	ldr	r0, [pc, #36]	; (8008b14 <usb_printf+0x3c>)
 8008af0:	f001 fb24 	bl	800a13c <vsnprintf>
 8008af4:	4603      	mov	r3, r0
 8008af6:	607b      	str	r3, [r7, #4]
    va_end(args);
    CDC_Transmit_FS(UserTxBufferFS, length);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	b29b      	uxth	r3, r3
 8008afc:	4619      	mov	r1, r3
 8008afe:	4805      	ldr	r0, [pc, #20]	; (8008b14 <usb_printf+0x3c>)
 8008b00:	f000 f8c8 	bl	8008c94 <CDC_Transmit_FS>

}
 8008b04:	bf00      	nop
 8008b06:	3708      	adds	r7, #8
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008b0e:	b004      	add	sp, #16
 8008b10:	4770      	bx	lr
 8008b12:	bf00      	nop
 8008b14:	20001298 	.word	0x20001298

08008b18 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	4912      	ldr	r1, [pc, #72]	; (8008b68 <MX_USB_DEVICE_Init+0x50>)
 8008b20:	4812      	ldr	r0, [pc, #72]	; (8008b6c <MX_USB_DEVICE_Init+0x54>)
 8008b22:	f7fe fa75 	bl	8007010 <USBD_Init>
 8008b26:	4603      	mov	r3, r0
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d001      	beq.n	8008b30 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008b2c:	f7f8 faf0 	bl	8001110 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008b30:	490f      	ldr	r1, [pc, #60]	; (8008b70 <MX_USB_DEVICE_Init+0x58>)
 8008b32:	480e      	ldr	r0, [pc, #56]	; (8008b6c <MX_USB_DEVICE_Init+0x54>)
 8008b34:	f7fe fa9c 	bl	8007070 <USBD_RegisterClass>
 8008b38:	4603      	mov	r3, r0
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d001      	beq.n	8008b42 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008b3e:	f7f8 fae7 	bl	8001110 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008b42:	490c      	ldr	r1, [pc, #48]	; (8008b74 <MX_USB_DEVICE_Init+0x5c>)
 8008b44:	4809      	ldr	r0, [pc, #36]	; (8008b6c <MX_USB_DEVICE_Init+0x54>)
 8008b46:	f7fe f98d 	bl	8006e64 <USBD_CDC_RegisterInterface>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d001      	beq.n	8008b54 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008b50:	f7f8 fade 	bl	8001110 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008b54:	4805      	ldr	r0, [pc, #20]	; (8008b6c <MX_USB_DEVICE_Init+0x54>)
 8008b56:	f7fe fac1 	bl	80070dc <USBD_Start>
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d001      	beq.n	8008b64 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008b60:	f7f8 fad6 	bl	8001110 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008b64:	bf00      	nop
 8008b66:	bd80      	pop	{r7, pc}
 8008b68:	200000b8 	.word	0x200000b8
 8008b6c:	20000bd4 	.word	0x20000bd4
 8008b70:	20000018 	.word	0x20000018
 8008b74:	200000a4 	.word	0x200000a4

08008b78 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	4905      	ldr	r1, [pc, #20]	; (8008b94 <CDC_Init_FS+0x1c>)
 8008b80:	4805      	ldr	r0, [pc, #20]	; (8008b98 <CDC_Init_FS+0x20>)
 8008b82:	f7fe f989 	bl	8006e98 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008b86:	4905      	ldr	r1, [pc, #20]	; (8008b9c <CDC_Init_FS+0x24>)
 8008b88:	4803      	ldr	r0, [pc, #12]	; (8008b98 <CDC_Init_FS+0x20>)
 8008b8a:	f7fe f9a7 	bl	8006edc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008b8e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	bd80      	pop	{r7, pc}
 8008b94:	20001298 	.word	0x20001298
 8008b98:	20000bd4 	.word	0x20000bd4
 8008b9c:	20000eb0 	.word	0x20000eb0

08008ba0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008ba4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bae:	4770      	bx	lr

08008bb0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b083      	sub	sp, #12
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	6039      	str	r1, [r7, #0]
 8008bba:	71fb      	strb	r3, [r7, #7]
 8008bbc:	4613      	mov	r3, r2
 8008bbe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008bc0:	79fb      	ldrb	r3, [r7, #7]
 8008bc2:	2b23      	cmp	r3, #35	; 0x23
 8008bc4:	d84a      	bhi.n	8008c5c <CDC_Control_FS+0xac>
 8008bc6:	a201      	add	r2, pc, #4	; (adr r2, 8008bcc <CDC_Control_FS+0x1c>)
 8008bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bcc:	08008c5d 	.word	0x08008c5d
 8008bd0:	08008c5d 	.word	0x08008c5d
 8008bd4:	08008c5d 	.word	0x08008c5d
 8008bd8:	08008c5d 	.word	0x08008c5d
 8008bdc:	08008c5d 	.word	0x08008c5d
 8008be0:	08008c5d 	.word	0x08008c5d
 8008be4:	08008c5d 	.word	0x08008c5d
 8008be8:	08008c5d 	.word	0x08008c5d
 8008bec:	08008c5d 	.word	0x08008c5d
 8008bf0:	08008c5d 	.word	0x08008c5d
 8008bf4:	08008c5d 	.word	0x08008c5d
 8008bf8:	08008c5d 	.word	0x08008c5d
 8008bfc:	08008c5d 	.word	0x08008c5d
 8008c00:	08008c5d 	.word	0x08008c5d
 8008c04:	08008c5d 	.word	0x08008c5d
 8008c08:	08008c5d 	.word	0x08008c5d
 8008c0c:	08008c5d 	.word	0x08008c5d
 8008c10:	08008c5d 	.word	0x08008c5d
 8008c14:	08008c5d 	.word	0x08008c5d
 8008c18:	08008c5d 	.word	0x08008c5d
 8008c1c:	08008c5d 	.word	0x08008c5d
 8008c20:	08008c5d 	.word	0x08008c5d
 8008c24:	08008c5d 	.word	0x08008c5d
 8008c28:	08008c5d 	.word	0x08008c5d
 8008c2c:	08008c5d 	.word	0x08008c5d
 8008c30:	08008c5d 	.word	0x08008c5d
 8008c34:	08008c5d 	.word	0x08008c5d
 8008c38:	08008c5d 	.word	0x08008c5d
 8008c3c:	08008c5d 	.word	0x08008c5d
 8008c40:	08008c5d 	.word	0x08008c5d
 8008c44:	08008c5d 	.word	0x08008c5d
 8008c48:	08008c5d 	.word	0x08008c5d
 8008c4c:	08008c5d 	.word	0x08008c5d
 8008c50:	08008c5d 	.word	0x08008c5d
 8008c54:	08008c5d 	.word	0x08008c5d
 8008c58:	08008c5d 	.word	0x08008c5d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008c5c:	bf00      	nop
  }

  return (USBD_OK);
 8008c5e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	370c      	adds	r7, #12
 8008c64:	46bd      	mov	sp, r7
 8008c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6a:	4770      	bx	lr

08008c6c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b082      	sub	sp, #8
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
 8008c74:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008c76:	6879      	ldr	r1, [r7, #4]
 8008c78:	4805      	ldr	r0, [pc, #20]	; (8008c90 <CDC_Receive_FS+0x24>)
 8008c7a:	f7fe f92f 	bl	8006edc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008c7e:	4804      	ldr	r0, [pc, #16]	; (8008c90 <CDC_Receive_FS+0x24>)
 8008c80:	f7fe f990 	bl	8006fa4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008c84:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3708      	adds	r7, #8
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}
 8008c8e:	bf00      	nop
 8008c90:	20000bd4 	.word	0x20000bd4

08008c94 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b084      	sub	sp, #16
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
 8008c9c:	460b      	mov	r3, r1
 8008c9e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008ca4:	4b0d      	ldr	r3, [pc, #52]	; (8008cdc <CDC_Transmit_FS+0x48>)
 8008ca6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008caa:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d001      	beq.n	8008cba <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	e00b      	b.n	8008cd2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008cba:	887b      	ldrh	r3, [r7, #2]
 8008cbc:	461a      	mov	r2, r3
 8008cbe:	6879      	ldr	r1, [r7, #4]
 8008cc0:	4806      	ldr	r0, [pc, #24]	; (8008cdc <CDC_Transmit_FS+0x48>)
 8008cc2:	f7fe f8e9 	bl	8006e98 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008cc6:	4805      	ldr	r0, [pc, #20]	; (8008cdc <CDC_Transmit_FS+0x48>)
 8008cc8:	f7fe f926 	bl	8006f18 <USBD_CDC_TransmitPacket>
 8008ccc:	4603      	mov	r3, r0
 8008cce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	3710      	adds	r7, #16
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd80      	pop	{r7, pc}
 8008cda:	bf00      	nop
 8008cdc:	20000bd4 	.word	0x20000bd4

08008ce0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	b087      	sub	sp, #28
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	60f8      	str	r0, [r7, #12]
 8008ce8:	60b9      	str	r1, [r7, #8]
 8008cea:	4613      	mov	r3, r2
 8008cec:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008cee:	2300      	movs	r3, #0
 8008cf0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008cf2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	371c      	adds	r7, #28
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d00:	4770      	bx	lr
	...

08008d04 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d04:	b480      	push	{r7}
 8008d06:	b083      	sub	sp, #12
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	6039      	str	r1, [r7, #0]
 8008d0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	2212      	movs	r2, #18
 8008d14:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008d16:	4b03      	ldr	r3, [pc, #12]	; (8008d24 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008d18:	4618      	mov	r0, r3
 8008d1a:	370c      	adds	r7, #12
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d22:	4770      	bx	lr
 8008d24:	200000d4 	.word	0x200000d4

08008d28 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b083      	sub	sp, #12
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	4603      	mov	r3, r0
 8008d30:	6039      	str	r1, [r7, #0]
 8008d32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	2204      	movs	r2, #4
 8008d38:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008d3a:	4b03      	ldr	r3, [pc, #12]	; (8008d48 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	370c      	adds	r7, #12
 8008d40:	46bd      	mov	sp, r7
 8008d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d46:	4770      	bx	lr
 8008d48:	200000e8 	.word	0x200000e8

08008d4c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b082      	sub	sp, #8
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	4603      	mov	r3, r0
 8008d54:	6039      	str	r1, [r7, #0]
 8008d56:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008d58:	79fb      	ldrb	r3, [r7, #7]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d105      	bne.n	8008d6a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008d5e:	683a      	ldr	r2, [r7, #0]
 8008d60:	4907      	ldr	r1, [pc, #28]	; (8008d80 <USBD_FS_ProductStrDescriptor+0x34>)
 8008d62:	4808      	ldr	r0, [pc, #32]	; (8008d84 <USBD_FS_ProductStrDescriptor+0x38>)
 8008d64:	f7ff fb66 	bl	8008434 <USBD_GetString>
 8008d68:	e004      	b.n	8008d74 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008d6a:	683a      	ldr	r2, [r7, #0]
 8008d6c:	4904      	ldr	r1, [pc, #16]	; (8008d80 <USBD_FS_ProductStrDescriptor+0x34>)
 8008d6e:	4805      	ldr	r0, [pc, #20]	; (8008d84 <USBD_FS_ProductStrDescriptor+0x38>)
 8008d70:	f7ff fb60 	bl	8008434 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008d74:	4b02      	ldr	r3, [pc, #8]	; (8008d80 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	3708      	adds	r7, #8
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}
 8008d7e:	bf00      	nop
 8008d80:	20001680 	.word	0x20001680
 8008d84:	0800e184 	.word	0x0800e184

08008d88 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b082      	sub	sp, #8
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	4603      	mov	r3, r0
 8008d90:	6039      	str	r1, [r7, #0]
 8008d92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008d94:	683a      	ldr	r2, [r7, #0]
 8008d96:	4904      	ldr	r1, [pc, #16]	; (8008da8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008d98:	4804      	ldr	r0, [pc, #16]	; (8008dac <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008d9a:	f7ff fb4b 	bl	8008434 <USBD_GetString>
  return USBD_StrDesc;
 8008d9e:	4b02      	ldr	r3, [pc, #8]	; (8008da8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008da0:	4618      	mov	r0, r3
 8008da2:	3708      	adds	r7, #8
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}
 8008da8:	20001680 	.word	0x20001680
 8008dac:	0800e19c 	.word	0x0800e19c

08008db0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b082      	sub	sp, #8
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	4603      	mov	r3, r0
 8008db8:	6039      	str	r1, [r7, #0]
 8008dba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	221a      	movs	r2, #26
 8008dc0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008dc2:	f000 f843 	bl	8008e4c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008dc6:	4b02      	ldr	r3, [pc, #8]	; (8008dd0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3708      	adds	r7, #8
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}
 8008dd0:	200000ec 	.word	0x200000ec

08008dd4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b082      	sub	sp, #8
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	4603      	mov	r3, r0
 8008ddc:	6039      	str	r1, [r7, #0]
 8008dde:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008de0:	79fb      	ldrb	r3, [r7, #7]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d105      	bne.n	8008df2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008de6:	683a      	ldr	r2, [r7, #0]
 8008de8:	4907      	ldr	r1, [pc, #28]	; (8008e08 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008dea:	4808      	ldr	r0, [pc, #32]	; (8008e0c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008dec:	f7ff fb22 	bl	8008434 <USBD_GetString>
 8008df0:	e004      	b.n	8008dfc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008df2:	683a      	ldr	r2, [r7, #0]
 8008df4:	4904      	ldr	r1, [pc, #16]	; (8008e08 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008df6:	4805      	ldr	r0, [pc, #20]	; (8008e0c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008df8:	f7ff fb1c 	bl	8008434 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008dfc:	4b02      	ldr	r3, [pc, #8]	; (8008e08 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	3708      	adds	r7, #8
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}
 8008e06:	bf00      	nop
 8008e08:	20001680 	.word	0x20001680
 8008e0c:	0800e1b0 	.word	0x0800e1b0

08008e10 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b082      	sub	sp, #8
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	4603      	mov	r3, r0
 8008e18:	6039      	str	r1, [r7, #0]
 8008e1a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008e1c:	79fb      	ldrb	r3, [r7, #7]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d105      	bne.n	8008e2e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008e22:	683a      	ldr	r2, [r7, #0]
 8008e24:	4907      	ldr	r1, [pc, #28]	; (8008e44 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008e26:	4808      	ldr	r0, [pc, #32]	; (8008e48 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008e28:	f7ff fb04 	bl	8008434 <USBD_GetString>
 8008e2c:	e004      	b.n	8008e38 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008e2e:	683a      	ldr	r2, [r7, #0]
 8008e30:	4904      	ldr	r1, [pc, #16]	; (8008e44 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008e32:	4805      	ldr	r0, [pc, #20]	; (8008e48 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008e34:	f7ff fafe 	bl	8008434 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008e38:	4b02      	ldr	r3, [pc, #8]	; (8008e44 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	3708      	adds	r7, #8
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}
 8008e42:	bf00      	nop
 8008e44:	20001680 	.word	0x20001680
 8008e48:	0800e1bc 	.word	0x0800e1bc

08008e4c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b084      	sub	sp, #16
 8008e50:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008e52:	4b0f      	ldr	r3, [pc, #60]	; (8008e90 <Get_SerialNum+0x44>)
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008e58:	4b0e      	ldr	r3, [pc, #56]	; (8008e94 <Get_SerialNum+0x48>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008e5e:	4b0e      	ldr	r3, [pc, #56]	; (8008e98 <Get_SerialNum+0x4c>)
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008e64:	68fa      	ldr	r2, [r7, #12]
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	4413      	add	r3, r2
 8008e6a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d009      	beq.n	8008e86 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008e72:	2208      	movs	r2, #8
 8008e74:	4909      	ldr	r1, [pc, #36]	; (8008e9c <Get_SerialNum+0x50>)
 8008e76:	68f8      	ldr	r0, [r7, #12]
 8008e78:	f000 f814 	bl	8008ea4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008e7c:	2204      	movs	r2, #4
 8008e7e:	4908      	ldr	r1, [pc, #32]	; (8008ea0 <Get_SerialNum+0x54>)
 8008e80:	68b8      	ldr	r0, [r7, #8]
 8008e82:	f000 f80f 	bl	8008ea4 <IntToUnicode>
  }
}
 8008e86:	bf00      	nop
 8008e88:	3710      	adds	r7, #16
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bd80      	pop	{r7, pc}
 8008e8e:	bf00      	nop
 8008e90:	1fff7a10 	.word	0x1fff7a10
 8008e94:	1fff7a14 	.word	0x1fff7a14
 8008e98:	1fff7a18 	.word	0x1fff7a18
 8008e9c:	200000ee 	.word	0x200000ee
 8008ea0:	200000fe 	.word	0x200000fe

08008ea4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b087      	sub	sp, #28
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	60f8      	str	r0, [r7, #12]
 8008eac:	60b9      	str	r1, [r7, #8]
 8008eae:	4613      	mov	r3, r2
 8008eb0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	75fb      	strb	r3, [r7, #23]
 8008eba:	e027      	b.n	8008f0c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	0f1b      	lsrs	r3, r3, #28
 8008ec0:	2b09      	cmp	r3, #9
 8008ec2:	d80b      	bhi.n	8008edc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	0f1b      	lsrs	r3, r3, #28
 8008ec8:	b2da      	uxtb	r2, r3
 8008eca:	7dfb      	ldrb	r3, [r7, #23]
 8008ecc:	005b      	lsls	r3, r3, #1
 8008ece:	4619      	mov	r1, r3
 8008ed0:	68bb      	ldr	r3, [r7, #8]
 8008ed2:	440b      	add	r3, r1
 8008ed4:	3230      	adds	r2, #48	; 0x30
 8008ed6:	b2d2      	uxtb	r2, r2
 8008ed8:	701a      	strb	r2, [r3, #0]
 8008eda:	e00a      	b.n	8008ef2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	0f1b      	lsrs	r3, r3, #28
 8008ee0:	b2da      	uxtb	r2, r3
 8008ee2:	7dfb      	ldrb	r3, [r7, #23]
 8008ee4:	005b      	lsls	r3, r3, #1
 8008ee6:	4619      	mov	r1, r3
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	440b      	add	r3, r1
 8008eec:	3237      	adds	r2, #55	; 0x37
 8008eee:	b2d2      	uxtb	r2, r2
 8008ef0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	011b      	lsls	r3, r3, #4
 8008ef6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008ef8:	7dfb      	ldrb	r3, [r7, #23]
 8008efa:	005b      	lsls	r3, r3, #1
 8008efc:	3301      	adds	r3, #1
 8008efe:	68ba      	ldr	r2, [r7, #8]
 8008f00:	4413      	add	r3, r2
 8008f02:	2200      	movs	r2, #0
 8008f04:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008f06:	7dfb      	ldrb	r3, [r7, #23]
 8008f08:	3301      	adds	r3, #1
 8008f0a:	75fb      	strb	r3, [r7, #23]
 8008f0c:	7dfa      	ldrb	r2, [r7, #23]
 8008f0e:	79fb      	ldrb	r3, [r7, #7]
 8008f10:	429a      	cmp	r2, r3
 8008f12:	d3d3      	bcc.n	8008ebc <IntToUnicode+0x18>
  }
}
 8008f14:	bf00      	nop
 8008f16:	bf00      	nop
 8008f18:	371c      	adds	r7, #28
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f20:	4770      	bx	lr
	...

08008f24 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b08a      	sub	sp, #40	; 0x28
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008f2c:	f107 0314 	add.w	r3, r7, #20
 8008f30:	2200      	movs	r2, #0
 8008f32:	601a      	str	r2, [r3, #0]
 8008f34:	605a      	str	r2, [r3, #4]
 8008f36:	609a      	str	r2, [r3, #8]
 8008f38:	60da      	str	r2, [r3, #12]
 8008f3a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008f44:	d13a      	bne.n	8008fbc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008f46:	2300      	movs	r3, #0
 8008f48:	613b      	str	r3, [r7, #16]
 8008f4a:	4b1e      	ldr	r3, [pc, #120]	; (8008fc4 <HAL_PCD_MspInit+0xa0>)
 8008f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f4e:	4a1d      	ldr	r2, [pc, #116]	; (8008fc4 <HAL_PCD_MspInit+0xa0>)
 8008f50:	f043 0301 	orr.w	r3, r3, #1
 8008f54:	6313      	str	r3, [r2, #48]	; 0x30
 8008f56:	4b1b      	ldr	r3, [pc, #108]	; (8008fc4 <HAL_PCD_MspInit+0xa0>)
 8008f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f5a:	f003 0301 	and.w	r3, r3, #1
 8008f5e:	613b      	str	r3, [r7, #16]
 8008f60:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008f62:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008f66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f68:	2302      	movs	r3, #2
 8008f6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008f70:	2303      	movs	r3, #3
 8008f72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008f74:	230a      	movs	r3, #10
 8008f76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008f78:	f107 0314 	add.w	r3, r7, #20
 8008f7c:	4619      	mov	r1, r3
 8008f7e:	4812      	ldr	r0, [pc, #72]	; (8008fc8 <HAL_PCD_MspInit+0xa4>)
 8008f80:	f7f8 fd2e 	bl	80019e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008f84:	4b0f      	ldr	r3, [pc, #60]	; (8008fc4 <HAL_PCD_MspInit+0xa0>)
 8008f86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f88:	4a0e      	ldr	r2, [pc, #56]	; (8008fc4 <HAL_PCD_MspInit+0xa0>)
 8008f8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f8e:	6353      	str	r3, [r2, #52]	; 0x34
 8008f90:	2300      	movs	r3, #0
 8008f92:	60fb      	str	r3, [r7, #12]
 8008f94:	4b0b      	ldr	r3, [pc, #44]	; (8008fc4 <HAL_PCD_MspInit+0xa0>)
 8008f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f98:	4a0a      	ldr	r2, [pc, #40]	; (8008fc4 <HAL_PCD_MspInit+0xa0>)
 8008f9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008f9e:	6453      	str	r3, [r2, #68]	; 0x44
 8008fa0:	4b08      	ldr	r3, [pc, #32]	; (8008fc4 <HAL_PCD_MspInit+0xa0>)
 8008fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fa4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008fa8:	60fb      	str	r3, [r7, #12]
 8008faa:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8008fac:	2200      	movs	r2, #0
 8008fae:	2105      	movs	r1, #5
 8008fb0:	2043      	movs	r0, #67	; 0x43
 8008fb2:	f7f8 fceb 	bl	800198c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008fb6:	2043      	movs	r0, #67	; 0x43
 8008fb8:	f7f8 fd04 	bl	80019c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008fbc:	bf00      	nop
 8008fbe:	3728      	adds	r7, #40	; 0x28
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bd80      	pop	{r7, pc}
 8008fc4:	40023800 	.word	0x40023800
 8008fc8:	40020000 	.word	0x40020000

08008fcc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b082      	sub	sp, #8
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008fe0:	4619      	mov	r1, r3
 8008fe2:	4610      	mov	r0, r2
 8008fe4:	f7fe f8c7 	bl	8007176 <USBD_LL_SetupStage>
}
 8008fe8:	bf00      	nop
 8008fea:	3708      	adds	r7, #8
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}

08008ff0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b082      	sub	sp, #8
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
 8008ff8:	460b      	mov	r3, r1
 8008ffa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009002:	78fa      	ldrb	r2, [r7, #3]
 8009004:	6879      	ldr	r1, [r7, #4]
 8009006:	4613      	mov	r3, r2
 8009008:	00db      	lsls	r3, r3, #3
 800900a:	4413      	add	r3, r2
 800900c:	009b      	lsls	r3, r3, #2
 800900e:	440b      	add	r3, r1
 8009010:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009014:	681a      	ldr	r2, [r3, #0]
 8009016:	78fb      	ldrb	r3, [r7, #3]
 8009018:	4619      	mov	r1, r3
 800901a:	f7fe f901 	bl	8007220 <USBD_LL_DataOutStage>
}
 800901e:	bf00      	nop
 8009020:	3708      	adds	r7, #8
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}

08009026 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009026:	b580      	push	{r7, lr}
 8009028:	b082      	sub	sp, #8
 800902a:	af00      	add	r7, sp, #0
 800902c:	6078      	str	r0, [r7, #4]
 800902e:	460b      	mov	r3, r1
 8009030:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009038:	78fa      	ldrb	r2, [r7, #3]
 800903a:	6879      	ldr	r1, [r7, #4]
 800903c:	4613      	mov	r3, r2
 800903e:	00db      	lsls	r3, r3, #3
 8009040:	4413      	add	r3, r2
 8009042:	009b      	lsls	r3, r3, #2
 8009044:	440b      	add	r3, r1
 8009046:	334c      	adds	r3, #76	; 0x4c
 8009048:	681a      	ldr	r2, [r3, #0]
 800904a:	78fb      	ldrb	r3, [r7, #3]
 800904c:	4619      	mov	r1, r3
 800904e:	f7fe f99a 	bl	8007386 <USBD_LL_DataInStage>
}
 8009052:	bf00      	nop
 8009054:	3708      	adds	r7, #8
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}

0800905a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800905a:	b580      	push	{r7, lr}
 800905c:	b082      	sub	sp, #8
 800905e:	af00      	add	r7, sp, #0
 8009060:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009068:	4618      	mov	r0, r3
 800906a:	f7fe face 	bl	800760a <USBD_LL_SOF>
}
 800906e:	bf00      	nop
 8009070:	3708      	adds	r7, #8
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}

08009076 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009076:	b580      	push	{r7, lr}
 8009078:	b084      	sub	sp, #16
 800907a:	af00      	add	r7, sp, #0
 800907c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800907e:	2301      	movs	r3, #1
 8009080:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	68db      	ldr	r3, [r3, #12]
 8009086:	2b02      	cmp	r3, #2
 8009088:	d001      	beq.n	800908e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800908a:	f7f8 f841 	bl	8001110 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009094:	7bfa      	ldrb	r2, [r7, #15]
 8009096:	4611      	mov	r1, r2
 8009098:	4618      	mov	r0, r3
 800909a:	f7fe fa78 	bl	800758e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80090a4:	4618      	mov	r0, r3
 80090a6:	f7fe fa20 	bl	80074ea <USBD_LL_Reset>
}
 80090aa:	bf00      	nop
 80090ac:	3710      	adds	r7, #16
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}
	...

080090b4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b082      	sub	sp, #8
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80090c2:	4618      	mov	r0, r3
 80090c4:	f7fe fa73 	bl	80075ae <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	687a      	ldr	r2, [r7, #4]
 80090d4:	6812      	ldr	r2, [r2, #0]
 80090d6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80090da:	f043 0301 	orr.w	r3, r3, #1
 80090de:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6a1b      	ldr	r3, [r3, #32]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d005      	beq.n	80090f4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80090e8:	4b04      	ldr	r3, [pc, #16]	; (80090fc <HAL_PCD_SuspendCallback+0x48>)
 80090ea:	691b      	ldr	r3, [r3, #16]
 80090ec:	4a03      	ldr	r2, [pc, #12]	; (80090fc <HAL_PCD_SuspendCallback+0x48>)
 80090ee:	f043 0306 	orr.w	r3, r3, #6
 80090f2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80090f4:	bf00      	nop
 80090f6:	3708      	adds	r7, #8
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}
 80090fc:	e000ed00 	.word	0xe000ed00

08009100 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b082      	sub	sp, #8
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800910e:	4618      	mov	r0, r3
 8009110:	f7fe fa63 	bl	80075da <USBD_LL_Resume>
}
 8009114:	bf00      	nop
 8009116:	3708      	adds	r7, #8
 8009118:	46bd      	mov	sp, r7
 800911a:	bd80      	pop	{r7, pc}

0800911c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b082      	sub	sp, #8
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
 8009124:	460b      	mov	r3, r1
 8009126:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800912e:	78fa      	ldrb	r2, [r7, #3]
 8009130:	4611      	mov	r1, r2
 8009132:	4618      	mov	r0, r3
 8009134:	f7fe fabb 	bl	80076ae <USBD_LL_IsoOUTIncomplete>
}
 8009138:	bf00      	nop
 800913a:	3708      	adds	r7, #8
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}

08009140 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b082      	sub	sp, #8
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
 8009148:	460b      	mov	r3, r1
 800914a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009152:	78fa      	ldrb	r2, [r7, #3]
 8009154:	4611      	mov	r1, r2
 8009156:	4618      	mov	r0, r3
 8009158:	f7fe fa77 	bl	800764a <USBD_LL_IsoINIncomplete>
}
 800915c:	bf00      	nop
 800915e:	3708      	adds	r7, #8
 8009160:	46bd      	mov	sp, r7
 8009162:	bd80      	pop	{r7, pc}

08009164 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b082      	sub	sp, #8
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009172:	4618      	mov	r0, r3
 8009174:	f7fe facd 	bl	8007712 <USBD_LL_DevConnected>
}
 8009178:	bf00      	nop
 800917a:	3708      	adds	r7, #8
 800917c:	46bd      	mov	sp, r7
 800917e:	bd80      	pop	{r7, pc}

08009180 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b082      	sub	sp, #8
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800918e:	4618      	mov	r0, r3
 8009190:	f7fe faca 	bl	8007728 <USBD_LL_DevDisconnected>
}
 8009194:	bf00      	nop
 8009196:	3708      	adds	r7, #8
 8009198:	46bd      	mov	sp, r7
 800919a:	bd80      	pop	{r7, pc}

0800919c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b082      	sub	sp, #8
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	781b      	ldrb	r3, [r3, #0]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d13c      	bne.n	8009226 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80091ac:	4a20      	ldr	r2, [pc, #128]	; (8009230 <USBD_LL_Init+0x94>)
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	4a1e      	ldr	r2, [pc, #120]	; (8009230 <USBD_LL_Init+0x94>)
 80091b8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80091bc:	4b1c      	ldr	r3, [pc, #112]	; (8009230 <USBD_LL_Init+0x94>)
 80091be:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80091c2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80091c4:	4b1a      	ldr	r3, [pc, #104]	; (8009230 <USBD_LL_Init+0x94>)
 80091c6:	2204      	movs	r2, #4
 80091c8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80091ca:	4b19      	ldr	r3, [pc, #100]	; (8009230 <USBD_LL_Init+0x94>)
 80091cc:	2202      	movs	r2, #2
 80091ce:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80091d0:	4b17      	ldr	r3, [pc, #92]	; (8009230 <USBD_LL_Init+0x94>)
 80091d2:	2200      	movs	r2, #0
 80091d4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80091d6:	4b16      	ldr	r3, [pc, #88]	; (8009230 <USBD_LL_Init+0x94>)
 80091d8:	2202      	movs	r2, #2
 80091da:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80091dc:	4b14      	ldr	r3, [pc, #80]	; (8009230 <USBD_LL_Init+0x94>)
 80091de:	2200      	movs	r2, #0
 80091e0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80091e2:	4b13      	ldr	r3, [pc, #76]	; (8009230 <USBD_LL_Init+0x94>)
 80091e4:	2200      	movs	r2, #0
 80091e6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80091e8:	4b11      	ldr	r3, [pc, #68]	; (8009230 <USBD_LL_Init+0x94>)
 80091ea:	2200      	movs	r2, #0
 80091ec:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80091ee:	4b10      	ldr	r3, [pc, #64]	; (8009230 <USBD_LL_Init+0x94>)
 80091f0:	2200      	movs	r2, #0
 80091f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80091f4:	4b0e      	ldr	r3, [pc, #56]	; (8009230 <USBD_LL_Init+0x94>)
 80091f6:	2200      	movs	r2, #0
 80091f8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80091fa:	480d      	ldr	r0, [pc, #52]	; (8009230 <USBD_LL_Init+0x94>)
 80091fc:	f7f8 fdbe 	bl	8001d7c <HAL_PCD_Init>
 8009200:	4603      	mov	r3, r0
 8009202:	2b00      	cmp	r3, #0
 8009204:	d001      	beq.n	800920a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009206:	f7f7 ff83 	bl	8001110 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800920a:	2180      	movs	r1, #128	; 0x80
 800920c:	4808      	ldr	r0, [pc, #32]	; (8009230 <USBD_LL_Init+0x94>)
 800920e:	f7fa f816 	bl	800323e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009212:	2240      	movs	r2, #64	; 0x40
 8009214:	2100      	movs	r1, #0
 8009216:	4806      	ldr	r0, [pc, #24]	; (8009230 <USBD_LL_Init+0x94>)
 8009218:	f7f9 ffca 	bl	80031b0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800921c:	2280      	movs	r2, #128	; 0x80
 800921e:	2101      	movs	r1, #1
 8009220:	4803      	ldr	r0, [pc, #12]	; (8009230 <USBD_LL_Init+0x94>)
 8009222:	f7f9 ffc5 	bl	80031b0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009226:	2300      	movs	r3, #0
}
 8009228:	4618      	mov	r0, r3
 800922a:	3708      	adds	r7, #8
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}
 8009230:	20001880 	.word	0x20001880

08009234 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b084      	sub	sp, #16
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800923c:	2300      	movs	r3, #0
 800923e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009240:	2300      	movs	r3, #0
 8009242:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800924a:	4618      	mov	r0, r3
 800924c:	f7f8 feb3 	bl	8001fb6 <HAL_PCD_Start>
 8009250:	4603      	mov	r3, r0
 8009252:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009254:	7bfb      	ldrb	r3, [r7, #15]
 8009256:	4618      	mov	r0, r3
 8009258:	f000 f942 	bl	80094e0 <USBD_Get_USB_Status>
 800925c:	4603      	mov	r3, r0
 800925e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009260:	7bbb      	ldrb	r3, [r7, #14]
}
 8009262:	4618      	mov	r0, r3
 8009264:	3710      	adds	r7, #16
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}

0800926a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800926a:	b580      	push	{r7, lr}
 800926c:	b084      	sub	sp, #16
 800926e:	af00      	add	r7, sp, #0
 8009270:	6078      	str	r0, [r7, #4]
 8009272:	4608      	mov	r0, r1
 8009274:	4611      	mov	r1, r2
 8009276:	461a      	mov	r2, r3
 8009278:	4603      	mov	r3, r0
 800927a:	70fb      	strb	r3, [r7, #3]
 800927c:	460b      	mov	r3, r1
 800927e:	70bb      	strb	r3, [r7, #2]
 8009280:	4613      	mov	r3, r2
 8009282:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009284:	2300      	movs	r3, #0
 8009286:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009288:	2300      	movs	r3, #0
 800928a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009292:	78bb      	ldrb	r3, [r7, #2]
 8009294:	883a      	ldrh	r2, [r7, #0]
 8009296:	78f9      	ldrb	r1, [r7, #3]
 8009298:	f7f9 fb84 	bl	80029a4 <HAL_PCD_EP_Open>
 800929c:	4603      	mov	r3, r0
 800929e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092a0:	7bfb      	ldrb	r3, [r7, #15]
 80092a2:	4618      	mov	r0, r3
 80092a4:	f000 f91c 	bl	80094e0 <USBD_Get_USB_Status>
 80092a8:	4603      	mov	r3, r0
 80092aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	3710      	adds	r7, #16
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}

080092b6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80092b6:	b580      	push	{r7, lr}
 80092b8:	b084      	sub	sp, #16
 80092ba:	af00      	add	r7, sp, #0
 80092bc:	6078      	str	r0, [r7, #4]
 80092be:	460b      	mov	r3, r1
 80092c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092c2:	2300      	movs	r3, #0
 80092c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092c6:	2300      	movs	r3, #0
 80092c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80092d0:	78fa      	ldrb	r2, [r7, #3]
 80092d2:	4611      	mov	r1, r2
 80092d4:	4618      	mov	r0, r3
 80092d6:	f7f9 fbcd 	bl	8002a74 <HAL_PCD_EP_Close>
 80092da:	4603      	mov	r3, r0
 80092dc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092de:	7bfb      	ldrb	r3, [r7, #15]
 80092e0:	4618      	mov	r0, r3
 80092e2:	f000 f8fd 	bl	80094e0 <USBD_Get_USB_Status>
 80092e6:	4603      	mov	r3, r0
 80092e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	3710      	adds	r7, #16
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bd80      	pop	{r7, pc}

080092f4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b084      	sub	sp, #16
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
 80092fc:	460b      	mov	r3, r1
 80092fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009300:	2300      	movs	r3, #0
 8009302:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009304:	2300      	movs	r3, #0
 8009306:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800930e:	78fa      	ldrb	r2, [r7, #3]
 8009310:	4611      	mov	r1, r2
 8009312:	4618      	mov	r0, r3
 8009314:	f7f9 fca5 	bl	8002c62 <HAL_PCD_EP_SetStall>
 8009318:	4603      	mov	r3, r0
 800931a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800931c:	7bfb      	ldrb	r3, [r7, #15]
 800931e:	4618      	mov	r0, r3
 8009320:	f000 f8de 	bl	80094e0 <USBD_Get_USB_Status>
 8009324:	4603      	mov	r3, r0
 8009326:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009328:	7bbb      	ldrb	r3, [r7, #14]
}
 800932a:	4618      	mov	r0, r3
 800932c:	3710      	adds	r7, #16
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}

08009332 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009332:	b580      	push	{r7, lr}
 8009334:	b084      	sub	sp, #16
 8009336:	af00      	add	r7, sp, #0
 8009338:	6078      	str	r0, [r7, #4]
 800933a:	460b      	mov	r3, r1
 800933c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800933e:	2300      	movs	r3, #0
 8009340:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009342:	2300      	movs	r3, #0
 8009344:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800934c:	78fa      	ldrb	r2, [r7, #3]
 800934e:	4611      	mov	r1, r2
 8009350:	4618      	mov	r0, r3
 8009352:	f7f9 fcea 	bl	8002d2a <HAL_PCD_EP_ClrStall>
 8009356:	4603      	mov	r3, r0
 8009358:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800935a:	7bfb      	ldrb	r3, [r7, #15]
 800935c:	4618      	mov	r0, r3
 800935e:	f000 f8bf 	bl	80094e0 <USBD_Get_USB_Status>
 8009362:	4603      	mov	r3, r0
 8009364:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009366:	7bbb      	ldrb	r3, [r7, #14]
}
 8009368:	4618      	mov	r0, r3
 800936a:	3710      	adds	r7, #16
 800936c:	46bd      	mov	sp, r7
 800936e:	bd80      	pop	{r7, pc}

08009370 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009370:	b480      	push	{r7}
 8009372:	b085      	sub	sp, #20
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
 8009378:	460b      	mov	r3, r1
 800937a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009382:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009384:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009388:	2b00      	cmp	r3, #0
 800938a:	da0b      	bge.n	80093a4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800938c:	78fb      	ldrb	r3, [r7, #3]
 800938e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009392:	68f9      	ldr	r1, [r7, #12]
 8009394:	4613      	mov	r3, r2
 8009396:	00db      	lsls	r3, r3, #3
 8009398:	4413      	add	r3, r2
 800939a:	009b      	lsls	r3, r3, #2
 800939c:	440b      	add	r3, r1
 800939e:	333e      	adds	r3, #62	; 0x3e
 80093a0:	781b      	ldrb	r3, [r3, #0]
 80093a2:	e00b      	b.n	80093bc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80093a4:	78fb      	ldrb	r3, [r7, #3]
 80093a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80093aa:	68f9      	ldr	r1, [r7, #12]
 80093ac:	4613      	mov	r3, r2
 80093ae:	00db      	lsls	r3, r3, #3
 80093b0:	4413      	add	r3, r2
 80093b2:	009b      	lsls	r3, r3, #2
 80093b4:	440b      	add	r3, r1
 80093b6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80093ba:	781b      	ldrb	r3, [r3, #0]
  }
}
 80093bc:	4618      	mov	r0, r3
 80093be:	3714      	adds	r7, #20
 80093c0:	46bd      	mov	sp, r7
 80093c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c6:	4770      	bx	lr

080093c8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b084      	sub	sp, #16
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
 80093d0:	460b      	mov	r3, r1
 80093d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093d4:	2300      	movs	r3, #0
 80093d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093d8:	2300      	movs	r3, #0
 80093da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80093e2:	78fa      	ldrb	r2, [r7, #3]
 80093e4:	4611      	mov	r1, r2
 80093e6:	4618      	mov	r0, r3
 80093e8:	f7f9 fab7 	bl	800295a <HAL_PCD_SetAddress>
 80093ec:	4603      	mov	r3, r0
 80093ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093f0:	7bfb      	ldrb	r3, [r7, #15]
 80093f2:	4618      	mov	r0, r3
 80093f4:	f000 f874 	bl	80094e0 <USBD_Get_USB_Status>
 80093f8:	4603      	mov	r3, r0
 80093fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80093fe:	4618      	mov	r0, r3
 8009400:	3710      	adds	r7, #16
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}

08009406 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009406:	b580      	push	{r7, lr}
 8009408:	b086      	sub	sp, #24
 800940a:	af00      	add	r7, sp, #0
 800940c:	60f8      	str	r0, [r7, #12]
 800940e:	607a      	str	r2, [r7, #4]
 8009410:	603b      	str	r3, [r7, #0]
 8009412:	460b      	mov	r3, r1
 8009414:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009416:	2300      	movs	r3, #0
 8009418:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800941a:	2300      	movs	r3, #0
 800941c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009424:	7af9      	ldrb	r1, [r7, #11]
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	687a      	ldr	r2, [r7, #4]
 800942a:	f7f9 fbd0 	bl	8002bce <HAL_PCD_EP_Transmit>
 800942e:	4603      	mov	r3, r0
 8009430:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009432:	7dfb      	ldrb	r3, [r7, #23]
 8009434:	4618      	mov	r0, r3
 8009436:	f000 f853 	bl	80094e0 <USBD_Get_USB_Status>
 800943a:	4603      	mov	r3, r0
 800943c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800943e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009440:	4618      	mov	r0, r3
 8009442:	3718      	adds	r7, #24
 8009444:	46bd      	mov	sp, r7
 8009446:	bd80      	pop	{r7, pc}

08009448 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b086      	sub	sp, #24
 800944c:	af00      	add	r7, sp, #0
 800944e:	60f8      	str	r0, [r7, #12]
 8009450:	607a      	str	r2, [r7, #4]
 8009452:	603b      	str	r3, [r7, #0]
 8009454:	460b      	mov	r3, r1
 8009456:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009458:	2300      	movs	r3, #0
 800945a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800945c:	2300      	movs	r3, #0
 800945e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009466:	7af9      	ldrb	r1, [r7, #11]
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	687a      	ldr	r2, [r7, #4]
 800946c:	f7f9 fb4c 	bl	8002b08 <HAL_PCD_EP_Receive>
 8009470:	4603      	mov	r3, r0
 8009472:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009474:	7dfb      	ldrb	r3, [r7, #23]
 8009476:	4618      	mov	r0, r3
 8009478:	f000 f832 	bl	80094e0 <USBD_Get_USB_Status>
 800947c:	4603      	mov	r3, r0
 800947e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009480:	7dbb      	ldrb	r3, [r7, #22]
}
 8009482:	4618      	mov	r0, r3
 8009484:	3718      	adds	r7, #24
 8009486:	46bd      	mov	sp, r7
 8009488:	bd80      	pop	{r7, pc}

0800948a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800948a:	b580      	push	{r7, lr}
 800948c:	b082      	sub	sp, #8
 800948e:	af00      	add	r7, sp, #0
 8009490:	6078      	str	r0, [r7, #4]
 8009492:	460b      	mov	r3, r1
 8009494:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800949c:	78fa      	ldrb	r2, [r7, #3]
 800949e:	4611      	mov	r1, r2
 80094a0:	4618      	mov	r0, r3
 80094a2:	f7f9 fb7c 	bl	8002b9e <HAL_PCD_EP_GetRxCount>
 80094a6:	4603      	mov	r3, r0
}
 80094a8:	4618      	mov	r0, r3
 80094aa:	3708      	adds	r7, #8
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd80      	pop	{r7, pc}

080094b0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80094b0:	b480      	push	{r7}
 80094b2:	b083      	sub	sp, #12
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80094b8:	4b03      	ldr	r3, [pc, #12]	; (80094c8 <USBD_static_malloc+0x18>)
}
 80094ba:	4618      	mov	r0, r3
 80094bc:	370c      	adds	r7, #12
 80094be:	46bd      	mov	sp, r7
 80094c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c4:	4770      	bx	lr
 80094c6:	bf00      	nop
 80094c8:	20001d8c 	.word	0x20001d8c

080094cc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80094cc:	b480      	push	{r7}
 80094ce:	b083      	sub	sp, #12
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]

}
 80094d4:	bf00      	nop
 80094d6:	370c      	adds	r7, #12
 80094d8:	46bd      	mov	sp, r7
 80094da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094de:	4770      	bx	lr

080094e0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b085      	sub	sp, #20
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	4603      	mov	r3, r0
 80094e8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094ea:	2300      	movs	r3, #0
 80094ec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80094ee:	79fb      	ldrb	r3, [r7, #7]
 80094f0:	2b03      	cmp	r3, #3
 80094f2:	d817      	bhi.n	8009524 <USBD_Get_USB_Status+0x44>
 80094f4:	a201      	add	r2, pc, #4	; (adr r2, 80094fc <USBD_Get_USB_Status+0x1c>)
 80094f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094fa:	bf00      	nop
 80094fc:	0800950d 	.word	0x0800950d
 8009500:	08009513 	.word	0x08009513
 8009504:	08009519 	.word	0x08009519
 8009508:	0800951f 	.word	0x0800951f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800950c:	2300      	movs	r3, #0
 800950e:	73fb      	strb	r3, [r7, #15]
    break;
 8009510:	e00b      	b.n	800952a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009512:	2303      	movs	r3, #3
 8009514:	73fb      	strb	r3, [r7, #15]
    break;
 8009516:	e008      	b.n	800952a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009518:	2301      	movs	r3, #1
 800951a:	73fb      	strb	r3, [r7, #15]
    break;
 800951c:	e005      	b.n	800952a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800951e:	2303      	movs	r3, #3
 8009520:	73fb      	strb	r3, [r7, #15]
    break;
 8009522:	e002      	b.n	800952a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009524:	2303      	movs	r3, #3
 8009526:	73fb      	strb	r3, [r7, #15]
    break;
 8009528:	bf00      	nop
  }
  return usb_status;
 800952a:	7bfb      	ldrb	r3, [r7, #15]
}
 800952c:	4618      	mov	r0, r3
 800952e:	3714      	adds	r7, #20
 8009530:	46bd      	mov	sp, r7
 8009532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009536:	4770      	bx	lr

08009538 <dwt_probe>:
 8009538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800953a:	b083      	sub	sp, #12
 800953c:	6803      	ldr	r3, [r0, #0]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d037      	beq.n	80095b2 <dwt_probe+0x7a>
 8009542:	4a1f      	ldr	r2, [pc, #124]	; (80095c0 <dwt_probe+0x88>)
 8009544:	6013      	str	r3, [r2, #0]
 8009546:	4b1e      	ldr	r3, [pc, #120]	; (80095c0 <dwt_probe+0x88>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	6842      	ldr	r2, [r0, #4]
 800954c:	601a      	str	r2, [r3, #0]
 800954e:	6882      	ldr	r2, [r0, #8]
 8009550:	605a      	str	r2, [r3, #4]
 8009552:	2200      	movs	r2, #0
 8009554:	f88d 2003 	strb.w	r2, [sp, #3]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	681c      	ldr	r4, [r3, #0]
 800955c:	ab01      	add	r3, sp, #4
 800955e:	2204      	movs	r2, #4
 8009560:	f10d 0103 	add.w	r1, sp, #3
 8009564:	2001      	movs	r0, #1
 8009566:	47a0      	blx	r4
 8009568:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800956c:	f89d 1006 	ldrb.w	r1, [sp, #6]
 8009570:	0409      	lsls	r1, r1, #16
 8009572:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
 8009576:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800957a:	4319      	orrs	r1, r3
 800957c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8009580:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
 8009584:	4a0f      	ldr	r2, [pc, #60]	; (80095c4 <dwt_probe+0x8c>)
 8009586:	4b10      	ldr	r3, [pc, #64]	; (80095c8 <dwt_probe+0x90>)
 8009588:	429a      	cmp	r2, r3
 800958a:	d216      	bcs.n	80095ba <dwt_probe+0x82>
 800958c:	4b0c      	ldr	r3, [pc, #48]	; (80095c0 <dwt_probe+0x88>)
 800958e:	681f      	ldr	r7, [r3, #0]
 8009590:	4613      	mov	r3, r2
 8009592:	f04f 30ff 	mov.w	r0, #4294967295
 8009596:	2600      	movs	r6, #0
 8009598:	4d0b      	ldr	r5, [pc, #44]	; (80095c8 <dwt_probe+0x90>)
 800959a:	681a      	ldr	r2, [r3, #0]
 800959c:	404a      	eors	r2, r1
 800959e:	685c      	ldr	r4, [r3, #4]
 80095a0:	4222      	tst	r2, r4
 80095a2:	bf04      	itt	eq
 80095a4:	60bb      	streq	r3, [r7, #8]
 80095a6:	4630      	moveq	r0, r6
 80095a8:	331c      	adds	r3, #28
 80095aa:	42ab      	cmp	r3, r5
 80095ac:	d3f5      	bcc.n	800959a <dwt_probe+0x62>
 80095ae:	b003      	add	sp, #12
 80095b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095b2:	4b03      	ldr	r3, [pc, #12]	; (80095c0 <dwt_probe+0x88>)
 80095b4:	4a05      	ldr	r2, [pc, #20]	; (80095cc <dwt_probe+0x94>)
 80095b6:	601a      	str	r2, [r3, #0]
 80095b8:	e7c5      	b.n	8009546 <dwt_probe+0xe>
 80095ba:	f04f 30ff 	mov.w	r0, #4294967295
 80095be:	e7f6      	b.n	80095ae <dwt_probe+0x76>
 80095c0:	20001fac 	.word	0x20001fac
 80095c4:	080001a0 	.word	0x080001a0
 80095c8:	080001a0 	.word	0x080001a0
 80095cc:	20001fb0 	.word	0x20001fb0

080095d0 <dwt_readdevid>:
 80095d0:	b510      	push	{r4, lr}
 80095d2:	b082      	sub	sp, #8
 80095d4:	2100      	movs	r1, #0
 80095d6:	ab02      	add	r3, sp, #8
 80095d8:	f843 1d04 	str.w	r1, [r3, #-4]!
 80095dc:	4a04      	ldr	r2, [pc, #16]	; (80095f0 <dwt_readdevid+0x20>)
 80095de:	6810      	ldr	r0, [r2, #0]
 80095e0:	6882      	ldr	r2, [r0, #8]
 80095e2:	6912      	ldr	r2, [r2, #16]
 80095e4:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 80095e6:	460a      	mov	r2, r1
 80095e8:	47a0      	blx	r4
 80095ea:	9801      	ldr	r0, [sp, #4]
 80095ec:	b002      	add	sp, #8
 80095ee:	bd10      	pop	{r4, pc}
 80095f0:	20001fac 	.word	0x20001fac

080095f4 <__assert_func>:
 80095f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80095f6:	4614      	mov	r4, r2
 80095f8:	461a      	mov	r2, r3
 80095fa:	4b09      	ldr	r3, [pc, #36]	; (8009620 <__assert_func+0x2c>)
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	4605      	mov	r5, r0
 8009600:	68d8      	ldr	r0, [r3, #12]
 8009602:	b14c      	cbz	r4, 8009618 <__assert_func+0x24>
 8009604:	4b07      	ldr	r3, [pc, #28]	; (8009624 <__assert_func+0x30>)
 8009606:	9100      	str	r1, [sp, #0]
 8009608:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800960c:	4906      	ldr	r1, [pc, #24]	; (8009628 <__assert_func+0x34>)
 800960e:	462b      	mov	r3, r5
 8009610:	f000 f814 	bl	800963c <fiprintf>
 8009614:	f000 fe02 	bl	800a21c <abort>
 8009618:	4b04      	ldr	r3, [pc, #16]	; (800962c <__assert_func+0x38>)
 800961a:	461c      	mov	r4, r3
 800961c:	e7f3      	b.n	8009606 <__assert_func+0x12>
 800961e:	bf00      	nop
 8009620:	20000108 	.word	0x20000108
 8009624:	0800e1ca 	.word	0x0800e1ca
 8009628:	0800e1d7 	.word	0x0800e1d7
 800962c:	0800e205 	.word	0x0800e205

08009630 <__errno>:
 8009630:	4b01      	ldr	r3, [pc, #4]	; (8009638 <__errno+0x8>)
 8009632:	6818      	ldr	r0, [r3, #0]
 8009634:	4770      	bx	lr
 8009636:	bf00      	nop
 8009638:	20000108 	.word	0x20000108

0800963c <fiprintf>:
 800963c:	b40e      	push	{r1, r2, r3}
 800963e:	b503      	push	{r0, r1, lr}
 8009640:	4601      	mov	r1, r0
 8009642:	ab03      	add	r3, sp, #12
 8009644:	4805      	ldr	r0, [pc, #20]	; (800965c <fiprintf+0x20>)
 8009646:	f853 2b04 	ldr.w	r2, [r3], #4
 800964a:	6800      	ldr	r0, [r0, #0]
 800964c:	9301      	str	r3, [sp, #4]
 800964e:	f000 f873 	bl	8009738 <_vfiprintf_r>
 8009652:	b002      	add	sp, #8
 8009654:	f85d eb04 	ldr.w	lr, [sp], #4
 8009658:	b003      	add	sp, #12
 800965a:	4770      	bx	lr
 800965c:	20000108 	.word	0x20000108

08009660 <__libc_init_array>:
 8009660:	b570      	push	{r4, r5, r6, lr}
 8009662:	4d0d      	ldr	r5, [pc, #52]	; (8009698 <__libc_init_array+0x38>)
 8009664:	4c0d      	ldr	r4, [pc, #52]	; (800969c <__libc_init_array+0x3c>)
 8009666:	1b64      	subs	r4, r4, r5
 8009668:	10a4      	asrs	r4, r4, #2
 800966a:	2600      	movs	r6, #0
 800966c:	42a6      	cmp	r6, r4
 800966e:	d109      	bne.n	8009684 <__libc_init_array+0x24>
 8009670:	4d0b      	ldr	r5, [pc, #44]	; (80096a0 <__libc_init_array+0x40>)
 8009672:	4c0c      	ldr	r4, [pc, #48]	; (80096a4 <__libc_init_array+0x44>)
 8009674:	f004 fd22 	bl	800e0bc <_init>
 8009678:	1b64      	subs	r4, r4, r5
 800967a:	10a4      	asrs	r4, r4, #2
 800967c:	2600      	movs	r6, #0
 800967e:	42a6      	cmp	r6, r4
 8009680:	d105      	bne.n	800968e <__libc_init_array+0x2e>
 8009682:	bd70      	pop	{r4, r5, r6, pc}
 8009684:	f855 3b04 	ldr.w	r3, [r5], #4
 8009688:	4798      	blx	r3
 800968a:	3601      	adds	r6, #1
 800968c:	e7ee      	b.n	800966c <__libc_init_array+0xc>
 800968e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009692:	4798      	blx	r3
 8009694:	3601      	adds	r6, #1
 8009696:	e7f2      	b.n	800967e <__libc_init_array+0x1e>
 8009698:	0800e564 	.word	0x0800e564
 800969c:	0800e564 	.word	0x0800e564
 80096a0:	0800e564 	.word	0x0800e564
 80096a4:	0800e56c 	.word	0x0800e56c

080096a8 <memcpy>:
 80096a8:	440a      	add	r2, r1
 80096aa:	4291      	cmp	r1, r2
 80096ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80096b0:	d100      	bne.n	80096b4 <memcpy+0xc>
 80096b2:	4770      	bx	lr
 80096b4:	b510      	push	{r4, lr}
 80096b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80096ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80096be:	4291      	cmp	r1, r2
 80096c0:	d1f9      	bne.n	80096b6 <memcpy+0xe>
 80096c2:	bd10      	pop	{r4, pc}

080096c4 <memset>:
 80096c4:	4402      	add	r2, r0
 80096c6:	4603      	mov	r3, r0
 80096c8:	4293      	cmp	r3, r2
 80096ca:	d100      	bne.n	80096ce <memset+0xa>
 80096cc:	4770      	bx	lr
 80096ce:	f803 1b01 	strb.w	r1, [r3], #1
 80096d2:	e7f9      	b.n	80096c8 <memset+0x4>

080096d4 <__sprint_r>:
 80096d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096d8:	6893      	ldr	r3, [r2, #8]
 80096da:	4680      	mov	r8, r0
 80096dc:	460f      	mov	r7, r1
 80096de:	4614      	mov	r4, r2
 80096e0:	b91b      	cbnz	r3, 80096ea <__sprint_r+0x16>
 80096e2:	6053      	str	r3, [r2, #4]
 80096e4:	4618      	mov	r0, r3
 80096e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096ea:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80096ec:	049d      	lsls	r5, r3, #18
 80096ee:	d520      	bpl.n	8009732 <__sprint_r+0x5e>
 80096f0:	6815      	ldr	r5, [r2, #0]
 80096f2:	3508      	adds	r5, #8
 80096f4:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 80096f8:	f04f 0900 	mov.w	r9, #0
 80096fc:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 8009700:	45ca      	cmp	sl, r9
 8009702:	dc0b      	bgt.n	800971c <__sprint_r+0x48>
 8009704:	68a3      	ldr	r3, [r4, #8]
 8009706:	f026 0003 	bic.w	r0, r6, #3
 800970a:	1a18      	subs	r0, r3, r0
 800970c:	60a0      	str	r0, [r4, #8]
 800970e:	3508      	adds	r5, #8
 8009710:	2800      	cmp	r0, #0
 8009712:	d1ef      	bne.n	80096f4 <__sprint_r+0x20>
 8009714:	2300      	movs	r3, #0
 8009716:	e9c4 3301 	strd	r3, r3, [r4, #4]
 800971a:	e7e4      	b.n	80096e6 <__sprint_r+0x12>
 800971c:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 8009720:	463a      	mov	r2, r7
 8009722:	4640      	mov	r0, r8
 8009724:	f000 feff 	bl	800a526 <_fputwc_r>
 8009728:	1c43      	adds	r3, r0, #1
 800972a:	d0f3      	beq.n	8009714 <__sprint_r+0x40>
 800972c:	f109 0901 	add.w	r9, r9, #1
 8009730:	e7e6      	b.n	8009700 <__sprint_r+0x2c>
 8009732:	f001 f837 	bl	800a7a4 <__sfvwrite_r>
 8009736:	e7ed      	b.n	8009714 <__sprint_r+0x40>

08009738 <_vfiprintf_r>:
 8009738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800973c:	ed2d 8b02 	vpush	{d8}
 8009740:	b0b9      	sub	sp, #228	; 0xe4
 8009742:	460f      	mov	r7, r1
 8009744:	9201      	str	r2, [sp, #4]
 8009746:	461d      	mov	r5, r3
 8009748:	461c      	mov	r4, r3
 800974a:	4681      	mov	r9, r0
 800974c:	b118      	cbz	r0, 8009756 <_vfiprintf_r+0x1e>
 800974e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009750:	b90b      	cbnz	r3, 8009756 <_vfiprintf_r+0x1e>
 8009752:	f000 fe6b 	bl	800a42c <__sinit>
 8009756:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009758:	07d8      	lsls	r0, r3, #31
 800975a:	d405      	bmi.n	8009768 <_vfiprintf_r+0x30>
 800975c:	89bb      	ldrh	r3, [r7, #12]
 800975e:	0599      	lsls	r1, r3, #22
 8009760:	d402      	bmi.n	8009768 <_vfiprintf_r+0x30>
 8009762:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8009764:	f001 f994 	bl	800aa90 <__retarget_lock_acquire_recursive>
 8009768:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800976c:	049a      	lsls	r2, r3, #18
 800976e:	d406      	bmi.n	800977e <_vfiprintf_r+0x46>
 8009770:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009774:	81bb      	strh	r3, [r7, #12]
 8009776:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009778:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800977c:	667b      	str	r3, [r7, #100]	; 0x64
 800977e:	89bb      	ldrh	r3, [r7, #12]
 8009780:	071e      	lsls	r6, r3, #28
 8009782:	d501      	bpl.n	8009788 <_vfiprintf_r+0x50>
 8009784:	693b      	ldr	r3, [r7, #16]
 8009786:	b9bb      	cbnz	r3, 80097b8 <_vfiprintf_r+0x80>
 8009788:	4639      	mov	r1, r7
 800978a:	4648      	mov	r0, r9
 800978c:	f000 fce4 	bl	800a158 <__swsetup_r>
 8009790:	b190      	cbz	r0, 80097b8 <_vfiprintf_r+0x80>
 8009792:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009794:	07d8      	lsls	r0, r3, #31
 8009796:	d508      	bpl.n	80097aa <_vfiprintf_r+0x72>
 8009798:	f04f 33ff 	mov.w	r3, #4294967295
 800979c:	9302      	str	r3, [sp, #8]
 800979e:	9802      	ldr	r0, [sp, #8]
 80097a0:	b039      	add	sp, #228	; 0xe4
 80097a2:	ecbd 8b02 	vpop	{d8}
 80097a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097aa:	89bb      	ldrh	r3, [r7, #12]
 80097ac:	0599      	lsls	r1, r3, #22
 80097ae:	d4f3      	bmi.n	8009798 <_vfiprintf_r+0x60>
 80097b0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80097b2:	f001 f96e 	bl	800aa92 <__retarget_lock_release_recursive>
 80097b6:	e7ef      	b.n	8009798 <_vfiprintf_r+0x60>
 80097b8:	89bb      	ldrh	r3, [r7, #12]
 80097ba:	f003 021a 	and.w	r2, r3, #26
 80097be:	2a0a      	cmp	r2, #10
 80097c0:	d116      	bne.n	80097f0 <_vfiprintf_r+0xb8>
 80097c2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80097c6:	2a00      	cmp	r2, #0
 80097c8:	db12      	blt.n	80097f0 <_vfiprintf_r+0xb8>
 80097ca:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80097cc:	07d2      	lsls	r2, r2, #31
 80097ce:	d404      	bmi.n	80097da <_vfiprintf_r+0xa2>
 80097d0:	059e      	lsls	r6, r3, #22
 80097d2:	d402      	bmi.n	80097da <_vfiprintf_r+0xa2>
 80097d4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80097d6:	f001 f95c 	bl	800aa92 <__retarget_lock_release_recursive>
 80097da:	9a01      	ldr	r2, [sp, #4]
 80097dc:	462b      	mov	r3, r5
 80097de:	4639      	mov	r1, r7
 80097e0:	4648      	mov	r0, r9
 80097e2:	b039      	add	sp, #228	; 0xe4
 80097e4:	ecbd 8b02 	vpop	{d8}
 80097e8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097ec:	f000 bc3a 	b.w	800a064 <__sbprintf>
 80097f0:	2300      	movs	r3, #0
 80097f2:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 80097f6:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80097fa:	ae0f      	add	r6, sp, #60	; 0x3c
 80097fc:	ee08 3a10 	vmov	s16, r3
 8009800:	960c      	str	r6, [sp, #48]	; 0x30
 8009802:	9307      	str	r3, [sp, #28]
 8009804:	9302      	str	r3, [sp, #8]
 8009806:	9b01      	ldr	r3, [sp, #4]
 8009808:	461d      	mov	r5, r3
 800980a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800980e:	b10a      	cbz	r2, 8009814 <_vfiprintf_r+0xdc>
 8009810:	2a25      	cmp	r2, #37	; 0x25
 8009812:	d1f9      	bne.n	8009808 <_vfiprintf_r+0xd0>
 8009814:	9b01      	ldr	r3, [sp, #4]
 8009816:	ebb5 0803 	subs.w	r8, r5, r3
 800981a:	d00d      	beq.n	8009838 <_vfiprintf_r+0x100>
 800981c:	e9c6 3800 	strd	r3, r8, [r6]
 8009820:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009822:	4443      	add	r3, r8
 8009824:	930e      	str	r3, [sp, #56]	; 0x38
 8009826:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009828:	3301      	adds	r3, #1
 800982a:	2b07      	cmp	r3, #7
 800982c:	930d      	str	r3, [sp, #52]	; 0x34
 800982e:	dc75      	bgt.n	800991c <_vfiprintf_r+0x1e4>
 8009830:	3608      	adds	r6, #8
 8009832:	9b02      	ldr	r3, [sp, #8]
 8009834:	4443      	add	r3, r8
 8009836:	9302      	str	r3, [sp, #8]
 8009838:	782b      	ldrb	r3, [r5, #0]
 800983a:	2b00      	cmp	r3, #0
 800983c:	f000 83d6 	beq.w	8009fec <_vfiprintf_r+0x8b4>
 8009840:	2300      	movs	r3, #0
 8009842:	f04f 31ff 	mov.w	r1, #4294967295
 8009846:	1c6a      	adds	r2, r5, #1
 8009848:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800984c:	9100      	str	r1, [sp, #0]
 800984e:	9303      	str	r3, [sp, #12]
 8009850:	469a      	mov	sl, r3
 8009852:	f812 3b01 	ldrb.w	r3, [r2], #1
 8009856:	9201      	str	r2, [sp, #4]
 8009858:	f1a3 0220 	sub.w	r2, r3, #32
 800985c:	2a5a      	cmp	r2, #90	; 0x5a
 800985e:	f200 831f 	bhi.w	8009ea0 <_vfiprintf_r+0x768>
 8009862:	e8df f012 	tbh	[pc, r2, lsl #1]
 8009866:	009b      	.short	0x009b
 8009868:	031d031d 	.word	0x031d031d
 800986c:	031d00a3 	.word	0x031d00a3
 8009870:	031d031d 	.word	0x031d031d
 8009874:	031d0082 	.word	0x031d0082
 8009878:	00a6031d 	.word	0x00a6031d
 800987c:	031d00b0 	.word	0x031d00b0
 8009880:	00b200ad 	.word	0x00b200ad
 8009884:	00cd031d 	.word	0x00cd031d
 8009888:	00d000d0 	.word	0x00d000d0
 800988c:	00d000d0 	.word	0x00d000d0
 8009890:	00d000d0 	.word	0x00d000d0
 8009894:	00d000d0 	.word	0x00d000d0
 8009898:	031d00d0 	.word	0x031d00d0
 800989c:	031d031d 	.word	0x031d031d
 80098a0:	031d031d 	.word	0x031d031d
 80098a4:	031d031d 	.word	0x031d031d
 80098a8:	031d031d 	.word	0x031d031d
 80098ac:	010800fa 	.word	0x010800fa
 80098b0:	031d031d 	.word	0x031d031d
 80098b4:	031d031d 	.word	0x031d031d
 80098b8:	031d031d 	.word	0x031d031d
 80098bc:	031d031d 	.word	0x031d031d
 80098c0:	031d031d 	.word	0x031d031d
 80098c4:	031d0158 	.word	0x031d0158
 80098c8:	031d031d 	.word	0x031d031d
 80098cc:	031d01a1 	.word	0x031d01a1
 80098d0:	031d027e 	.word	0x031d027e
 80098d4:	029e031d 	.word	0x029e031d
 80098d8:	031d031d 	.word	0x031d031d
 80098dc:	031d031d 	.word	0x031d031d
 80098e0:	031d031d 	.word	0x031d031d
 80098e4:	031d031d 	.word	0x031d031d
 80098e8:	031d031d 	.word	0x031d031d
 80098ec:	010a00fa 	.word	0x010a00fa
 80098f0:	031d031d 	.word	0x031d031d
 80098f4:	00e0031d 	.word	0x00e0031d
 80098f8:	00f4010a 	.word	0x00f4010a
 80098fc:	00ed031d 	.word	0x00ed031d
 8009900:	0136031d 	.word	0x0136031d
 8009904:	018f015a 	.word	0x018f015a
 8009908:	031d00f4 	.word	0x031d00f4
 800990c:	009901a1 	.word	0x009901a1
 8009910:	031d0280 	.word	0x031d0280
 8009914:	0065031d 	.word	0x0065031d
 8009918:	0099031d 	.word	0x0099031d
 800991c:	aa0c      	add	r2, sp, #48	; 0x30
 800991e:	4639      	mov	r1, r7
 8009920:	4648      	mov	r0, r9
 8009922:	f7ff fed7 	bl	80096d4 <__sprint_r>
 8009926:	2800      	cmp	r0, #0
 8009928:	f040 833f 	bne.w	8009faa <_vfiprintf_r+0x872>
 800992c:	ae0f      	add	r6, sp, #60	; 0x3c
 800992e:	e780      	b.n	8009832 <_vfiprintf_r+0xfa>
 8009930:	4a9c      	ldr	r2, [pc, #624]	; (8009ba4 <_vfiprintf_r+0x46c>)
 8009932:	9205      	str	r2, [sp, #20]
 8009934:	f01a 0220 	ands.w	r2, sl, #32
 8009938:	f000 8235 	beq.w	8009da6 <_vfiprintf_r+0x66e>
 800993c:	3407      	adds	r4, #7
 800993e:	f024 0207 	bic.w	r2, r4, #7
 8009942:	4693      	mov	fp, r2
 8009944:	6855      	ldr	r5, [r2, #4]
 8009946:	f85b 4b08 	ldr.w	r4, [fp], #8
 800994a:	f01a 0f01 	tst.w	sl, #1
 800994e:	d009      	beq.n	8009964 <_vfiprintf_r+0x22c>
 8009950:	ea54 0205 	orrs.w	r2, r4, r5
 8009954:	bf1f      	itttt	ne
 8009956:	2230      	movne	r2, #48	; 0x30
 8009958:	f88d 202c 	strbne.w	r2, [sp, #44]	; 0x2c
 800995c:	f88d 302d 	strbne.w	r3, [sp, #45]	; 0x2d
 8009960:	f04a 0a02 	orrne.w	sl, sl, #2
 8009964:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8009968:	e11a      	b.n	8009ba0 <_vfiprintf_r+0x468>
 800996a:	4648      	mov	r0, r9
 800996c:	f001 f88a 	bl	800aa84 <_localeconv_r>
 8009970:	6843      	ldr	r3, [r0, #4]
 8009972:	4618      	mov	r0, r3
 8009974:	ee08 3a10 	vmov	s16, r3
 8009978:	f7f6 fc82 	bl	8000280 <strlen>
 800997c:	9007      	str	r0, [sp, #28]
 800997e:	4648      	mov	r0, r9
 8009980:	f001 f880 	bl	800aa84 <_localeconv_r>
 8009984:	6883      	ldr	r3, [r0, #8]
 8009986:	9306      	str	r3, [sp, #24]
 8009988:	9b07      	ldr	r3, [sp, #28]
 800998a:	b12b      	cbz	r3, 8009998 <_vfiprintf_r+0x260>
 800998c:	9b06      	ldr	r3, [sp, #24]
 800998e:	b11b      	cbz	r3, 8009998 <_vfiprintf_r+0x260>
 8009990:	781b      	ldrb	r3, [r3, #0]
 8009992:	b10b      	cbz	r3, 8009998 <_vfiprintf_r+0x260>
 8009994:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 8009998:	9a01      	ldr	r2, [sp, #4]
 800999a:	e75a      	b.n	8009852 <_vfiprintf_r+0x11a>
 800999c:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d1f9      	bne.n	8009998 <_vfiprintf_r+0x260>
 80099a4:	2320      	movs	r3, #32
 80099a6:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 80099aa:	e7f5      	b.n	8009998 <_vfiprintf_r+0x260>
 80099ac:	f04a 0a01 	orr.w	sl, sl, #1
 80099b0:	e7f2      	b.n	8009998 <_vfiprintf_r+0x260>
 80099b2:	f854 3b04 	ldr.w	r3, [r4], #4
 80099b6:	9303      	str	r3, [sp, #12]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	daed      	bge.n	8009998 <_vfiprintf_r+0x260>
 80099bc:	425b      	negs	r3, r3
 80099be:	9303      	str	r3, [sp, #12]
 80099c0:	f04a 0a04 	orr.w	sl, sl, #4
 80099c4:	e7e8      	b.n	8009998 <_vfiprintf_r+0x260>
 80099c6:	232b      	movs	r3, #43	; 0x2b
 80099c8:	e7ed      	b.n	80099a6 <_vfiprintf_r+0x26e>
 80099ca:	9a01      	ldr	r2, [sp, #4]
 80099cc:	f812 3b01 	ldrb.w	r3, [r2], #1
 80099d0:	2b2a      	cmp	r3, #42	; 0x2a
 80099d2:	d112      	bne.n	80099fa <_vfiprintf_r+0x2c2>
 80099d4:	f854 0b04 	ldr.w	r0, [r4], #4
 80099d8:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 80099dc:	e9cd 3200 	strd	r3, r2, [sp]
 80099e0:	e7da      	b.n	8009998 <_vfiprintf_r+0x260>
 80099e2:	9b00      	ldr	r3, [sp, #0]
 80099e4:	200a      	movs	r0, #10
 80099e6:	fb00 1303 	mla	r3, r0, r3, r1
 80099ea:	9300      	str	r3, [sp, #0]
 80099ec:	f812 3b01 	ldrb.w	r3, [r2], #1
 80099f0:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80099f4:	2909      	cmp	r1, #9
 80099f6:	d9f4      	bls.n	80099e2 <_vfiprintf_r+0x2aa>
 80099f8:	e72d      	b.n	8009856 <_vfiprintf_r+0x11e>
 80099fa:	2100      	movs	r1, #0
 80099fc:	9100      	str	r1, [sp, #0]
 80099fe:	e7f7      	b.n	80099f0 <_vfiprintf_r+0x2b8>
 8009a00:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 8009a04:	e7c8      	b.n	8009998 <_vfiprintf_r+0x260>
 8009a06:	2100      	movs	r1, #0
 8009a08:	9a01      	ldr	r2, [sp, #4]
 8009a0a:	9103      	str	r1, [sp, #12]
 8009a0c:	9903      	ldr	r1, [sp, #12]
 8009a0e:	3b30      	subs	r3, #48	; 0x30
 8009a10:	200a      	movs	r0, #10
 8009a12:	fb00 3301 	mla	r3, r0, r1, r3
 8009a16:	9303      	str	r3, [sp, #12]
 8009a18:	f812 3b01 	ldrb.w	r3, [r2], #1
 8009a1c:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8009a20:	2909      	cmp	r1, #9
 8009a22:	d9f3      	bls.n	8009a0c <_vfiprintf_r+0x2d4>
 8009a24:	e717      	b.n	8009856 <_vfiprintf_r+0x11e>
 8009a26:	9b01      	ldr	r3, [sp, #4]
 8009a28:	781b      	ldrb	r3, [r3, #0]
 8009a2a:	2b68      	cmp	r3, #104	; 0x68
 8009a2c:	bf01      	itttt	eq
 8009a2e:	9b01      	ldreq	r3, [sp, #4]
 8009a30:	3301      	addeq	r3, #1
 8009a32:	9301      	streq	r3, [sp, #4]
 8009a34:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 8009a38:	bf18      	it	ne
 8009a3a:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 8009a3e:	e7ab      	b.n	8009998 <_vfiprintf_r+0x260>
 8009a40:	9b01      	ldr	r3, [sp, #4]
 8009a42:	781b      	ldrb	r3, [r3, #0]
 8009a44:	2b6c      	cmp	r3, #108	; 0x6c
 8009a46:	d105      	bne.n	8009a54 <_vfiprintf_r+0x31c>
 8009a48:	9b01      	ldr	r3, [sp, #4]
 8009a4a:	3301      	adds	r3, #1
 8009a4c:	9301      	str	r3, [sp, #4]
 8009a4e:	f04a 0a20 	orr.w	sl, sl, #32
 8009a52:	e7a1      	b.n	8009998 <_vfiprintf_r+0x260>
 8009a54:	f04a 0a10 	orr.w	sl, sl, #16
 8009a58:	e79e      	b.n	8009998 <_vfiprintf_r+0x260>
 8009a5a:	46a3      	mov	fp, r4
 8009a5c:	2100      	movs	r1, #0
 8009a5e:	f85b 3b04 	ldr.w	r3, [fp], #4
 8009a62:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 8009a66:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	9300      	str	r3, [sp, #0]
 8009a6e:	460d      	mov	r5, r1
 8009a70:	f10d 087c 	add.w	r8, sp, #124	; 0x7c
 8009a74:	e0ad      	b.n	8009bd2 <_vfiprintf_r+0x49a>
 8009a76:	f04a 0a10 	orr.w	sl, sl, #16
 8009a7a:	f01a 0f20 	tst.w	sl, #32
 8009a7e:	d011      	beq.n	8009aa4 <_vfiprintf_r+0x36c>
 8009a80:	3407      	adds	r4, #7
 8009a82:	f024 0307 	bic.w	r3, r4, #7
 8009a86:	469b      	mov	fp, r3
 8009a88:	685d      	ldr	r5, [r3, #4]
 8009a8a:	f85b 4b08 	ldr.w	r4, [fp], #8
 8009a8e:	2d00      	cmp	r5, #0
 8009a90:	da06      	bge.n	8009aa0 <_vfiprintf_r+0x368>
 8009a92:	4264      	negs	r4, r4
 8009a94:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8009a98:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8009a9c:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 8009aa0:	2301      	movs	r3, #1
 8009aa2:	e04a      	b.n	8009b3a <_vfiprintf_r+0x402>
 8009aa4:	46a3      	mov	fp, r4
 8009aa6:	f01a 0f10 	tst.w	sl, #16
 8009aaa:	f85b 5b04 	ldr.w	r5, [fp], #4
 8009aae:	d002      	beq.n	8009ab6 <_vfiprintf_r+0x37e>
 8009ab0:	462c      	mov	r4, r5
 8009ab2:	17ed      	asrs	r5, r5, #31
 8009ab4:	e7eb      	b.n	8009a8e <_vfiprintf_r+0x356>
 8009ab6:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8009aba:	d003      	beq.n	8009ac4 <_vfiprintf_r+0x38c>
 8009abc:	b22c      	sxth	r4, r5
 8009abe:	f345 35c0 	sbfx	r5, r5, #15, #1
 8009ac2:	e7e4      	b.n	8009a8e <_vfiprintf_r+0x356>
 8009ac4:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8009ac8:	d0f2      	beq.n	8009ab0 <_vfiprintf_r+0x378>
 8009aca:	b26c      	sxtb	r4, r5
 8009acc:	f345 15c0 	sbfx	r5, r5, #7, #1
 8009ad0:	e7dd      	b.n	8009a8e <_vfiprintf_r+0x356>
 8009ad2:	f01a 0f20 	tst.w	sl, #32
 8009ad6:	f104 0b04 	add.w	fp, r4, #4
 8009ada:	d007      	beq.n	8009aec <_vfiprintf_r+0x3b4>
 8009adc:	9a02      	ldr	r2, [sp, #8]
 8009ade:	6823      	ldr	r3, [r4, #0]
 8009ae0:	9902      	ldr	r1, [sp, #8]
 8009ae2:	17d2      	asrs	r2, r2, #31
 8009ae4:	e9c3 1200 	strd	r1, r2, [r3]
 8009ae8:	465c      	mov	r4, fp
 8009aea:	e68c      	b.n	8009806 <_vfiprintf_r+0xce>
 8009aec:	f01a 0f10 	tst.w	sl, #16
 8009af0:	d003      	beq.n	8009afa <_vfiprintf_r+0x3c2>
 8009af2:	6823      	ldr	r3, [r4, #0]
 8009af4:	9a02      	ldr	r2, [sp, #8]
 8009af6:	601a      	str	r2, [r3, #0]
 8009af8:	e7f6      	b.n	8009ae8 <_vfiprintf_r+0x3b0>
 8009afa:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8009afe:	d003      	beq.n	8009b08 <_vfiprintf_r+0x3d0>
 8009b00:	6823      	ldr	r3, [r4, #0]
 8009b02:	9a02      	ldr	r2, [sp, #8]
 8009b04:	801a      	strh	r2, [r3, #0]
 8009b06:	e7ef      	b.n	8009ae8 <_vfiprintf_r+0x3b0>
 8009b08:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8009b0c:	d0f1      	beq.n	8009af2 <_vfiprintf_r+0x3ba>
 8009b0e:	6823      	ldr	r3, [r4, #0]
 8009b10:	9a02      	ldr	r2, [sp, #8]
 8009b12:	701a      	strb	r2, [r3, #0]
 8009b14:	e7e8      	b.n	8009ae8 <_vfiprintf_r+0x3b0>
 8009b16:	f04a 0a10 	orr.w	sl, sl, #16
 8009b1a:	f01a 0320 	ands.w	r3, sl, #32
 8009b1e:	d01f      	beq.n	8009b60 <_vfiprintf_r+0x428>
 8009b20:	3407      	adds	r4, #7
 8009b22:	f024 0307 	bic.w	r3, r4, #7
 8009b26:	469b      	mov	fp, r3
 8009b28:	685d      	ldr	r5, [r3, #4]
 8009b2a:	f85b 4b08 	ldr.w	r4, [fp], #8
 8009b2e:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8009b32:	2300      	movs	r3, #0
 8009b34:	2200      	movs	r2, #0
 8009b36:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
 8009b3a:	9a00      	ldr	r2, [sp, #0]
 8009b3c:	3201      	adds	r2, #1
 8009b3e:	f000 8262 	beq.w	800a006 <_vfiprintf_r+0x8ce>
 8009b42:	f02a 0280 	bic.w	r2, sl, #128	; 0x80
 8009b46:	9204      	str	r2, [sp, #16]
 8009b48:	ea54 0205 	orrs.w	r2, r4, r5
 8009b4c:	f040 8261 	bne.w	800a012 <_vfiprintf_r+0x8da>
 8009b50:	9a00      	ldr	r2, [sp, #0]
 8009b52:	2a00      	cmp	r2, #0
 8009b54:	f000 8199 	beq.w	8009e8a <_vfiprintf_r+0x752>
 8009b58:	2b01      	cmp	r3, #1
 8009b5a:	f040 825d 	bne.w	800a018 <_vfiprintf_r+0x8e0>
 8009b5e:	e139      	b.n	8009dd4 <_vfiprintf_r+0x69c>
 8009b60:	46a3      	mov	fp, r4
 8009b62:	f01a 0510 	ands.w	r5, sl, #16
 8009b66:	f85b 4b04 	ldr.w	r4, [fp], #4
 8009b6a:	d001      	beq.n	8009b70 <_vfiprintf_r+0x438>
 8009b6c:	461d      	mov	r5, r3
 8009b6e:	e7de      	b.n	8009b2e <_vfiprintf_r+0x3f6>
 8009b70:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 8009b74:	d001      	beq.n	8009b7a <_vfiprintf_r+0x442>
 8009b76:	b2a4      	uxth	r4, r4
 8009b78:	e7d9      	b.n	8009b2e <_vfiprintf_r+0x3f6>
 8009b7a:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 8009b7e:	d0d6      	beq.n	8009b2e <_vfiprintf_r+0x3f6>
 8009b80:	b2e4      	uxtb	r4, r4
 8009b82:	e7f3      	b.n	8009b6c <_vfiprintf_r+0x434>
 8009b84:	2330      	movs	r3, #48	; 0x30
 8009b86:	46a3      	mov	fp, r4
 8009b88:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8009b8c:	2378      	movs	r3, #120	; 0x78
 8009b8e:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 8009b92:	f85b 4b04 	ldr.w	r4, [fp], #4
 8009b96:	4b03      	ldr	r3, [pc, #12]	; (8009ba4 <_vfiprintf_r+0x46c>)
 8009b98:	9305      	str	r3, [sp, #20]
 8009b9a:	2500      	movs	r5, #0
 8009b9c:	f04a 0a02 	orr.w	sl, sl, #2
 8009ba0:	2302      	movs	r3, #2
 8009ba2:	e7c7      	b.n	8009b34 <_vfiprintf_r+0x3fc>
 8009ba4:	0800e21d 	.word	0x0800e21d
 8009ba8:	9b00      	ldr	r3, [sp, #0]
 8009baa:	46a3      	mov	fp, r4
 8009bac:	2500      	movs	r5, #0
 8009bae:	1c5c      	adds	r4, r3, #1
 8009bb0:	f85b 8b04 	ldr.w	r8, [fp], #4
 8009bb4:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8009bb8:	f000 80ce 	beq.w	8009d58 <_vfiprintf_r+0x620>
 8009bbc:	461a      	mov	r2, r3
 8009bbe:	4629      	mov	r1, r5
 8009bc0:	4640      	mov	r0, r8
 8009bc2:	f7f6 fb0d 	bl	80001e0 <memchr>
 8009bc6:	2800      	cmp	r0, #0
 8009bc8:	f000 8174 	beq.w	8009eb4 <_vfiprintf_r+0x77c>
 8009bcc:	eba0 0308 	sub.w	r3, r0, r8
 8009bd0:	9300      	str	r3, [sp, #0]
 8009bd2:	9b00      	ldr	r3, [sp, #0]
 8009bd4:	42ab      	cmp	r3, r5
 8009bd6:	bfb8      	it	lt
 8009bd8:	462b      	movlt	r3, r5
 8009bda:	9304      	str	r3, [sp, #16]
 8009bdc:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 8009be0:	b113      	cbz	r3, 8009be8 <_vfiprintf_r+0x4b0>
 8009be2:	9b04      	ldr	r3, [sp, #16]
 8009be4:	3301      	adds	r3, #1
 8009be6:	9304      	str	r3, [sp, #16]
 8009be8:	f01a 0302 	ands.w	r3, sl, #2
 8009bec:	9308      	str	r3, [sp, #32]
 8009bee:	bf1e      	ittt	ne
 8009bf0:	9b04      	ldrne	r3, [sp, #16]
 8009bf2:	3302      	addne	r3, #2
 8009bf4:	9304      	strne	r3, [sp, #16]
 8009bf6:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 8009bfa:	9309      	str	r3, [sp, #36]	; 0x24
 8009bfc:	d11f      	bne.n	8009c3e <_vfiprintf_r+0x506>
 8009bfe:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8009c02:	1a9c      	subs	r4, r3, r2
 8009c04:	2c00      	cmp	r4, #0
 8009c06:	dd1a      	ble.n	8009c3e <_vfiprintf_r+0x506>
 8009c08:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8009c0c:	48aa      	ldr	r0, [pc, #680]	; (8009eb8 <_vfiprintf_r+0x780>)
 8009c0e:	6030      	str	r0, [r6, #0]
 8009c10:	2c10      	cmp	r4, #16
 8009c12:	f103 0301 	add.w	r3, r3, #1
 8009c16:	f106 0108 	add.w	r1, r6, #8
 8009c1a:	f300 8153 	bgt.w	8009ec4 <_vfiprintf_r+0x78c>
 8009c1e:	6074      	str	r4, [r6, #4]
 8009c20:	2b07      	cmp	r3, #7
 8009c22:	4414      	add	r4, r2
 8009c24:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 8009c28:	f340 815e 	ble.w	8009ee8 <_vfiprintf_r+0x7b0>
 8009c2c:	aa0c      	add	r2, sp, #48	; 0x30
 8009c2e:	4639      	mov	r1, r7
 8009c30:	4648      	mov	r0, r9
 8009c32:	f7ff fd4f 	bl	80096d4 <__sprint_r>
 8009c36:	2800      	cmp	r0, #0
 8009c38:	f040 81b7 	bne.w	8009faa <_vfiprintf_r+0x872>
 8009c3c:	ae0f      	add	r6, sp, #60	; 0x3c
 8009c3e:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 8009c42:	b173      	cbz	r3, 8009c62 <_vfiprintf_r+0x52a>
 8009c44:	f10d 022b 	add.w	r2, sp, #43	; 0x2b
 8009c48:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c4a:	6032      	str	r2, [r6, #0]
 8009c4c:	2201      	movs	r2, #1
 8009c4e:	6072      	str	r2, [r6, #4]
 8009c50:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009c52:	3301      	adds	r3, #1
 8009c54:	3201      	adds	r2, #1
 8009c56:	2b07      	cmp	r3, #7
 8009c58:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 8009c5c:	f300 8146 	bgt.w	8009eec <_vfiprintf_r+0x7b4>
 8009c60:	3608      	adds	r6, #8
 8009c62:	9b08      	ldr	r3, [sp, #32]
 8009c64:	b16b      	cbz	r3, 8009c82 <_vfiprintf_r+0x54a>
 8009c66:	aa0b      	add	r2, sp, #44	; 0x2c
 8009c68:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c6a:	6032      	str	r2, [r6, #0]
 8009c6c:	2202      	movs	r2, #2
 8009c6e:	6072      	str	r2, [r6, #4]
 8009c70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009c72:	3301      	adds	r3, #1
 8009c74:	3202      	adds	r2, #2
 8009c76:	2b07      	cmp	r3, #7
 8009c78:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 8009c7c:	f300 813f 	bgt.w	8009efe <_vfiprintf_r+0x7c6>
 8009c80:	3608      	adds	r6, #8
 8009c82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c84:	2b80      	cmp	r3, #128	; 0x80
 8009c86:	d11f      	bne.n	8009cc8 <_vfiprintf_r+0x590>
 8009c88:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8009c8c:	1a9c      	subs	r4, r3, r2
 8009c8e:	2c00      	cmp	r4, #0
 8009c90:	dd1a      	ble.n	8009cc8 <_vfiprintf_r+0x590>
 8009c92:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8009c96:	4889      	ldr	r0, [pc, #548]	; (8009ebc <_vfiprintf_r+0x784>)
 8009c98:	6030      	str	r0, [r6, #0]
 8009c9a:	2c10      	cmp	r4, #16
 8009c9c:	f103 0301 	add.w	r3, r3, #1
 8009ca0:	f106 0108 	add.w	r1, r6, #8
 8009ca4:	f300 8134 	bgt.w	8009f10 <_vfiprintf_r+0x7d8>
 8009ca8:	6074      	str	r4, [r6, #4]
 8009caa:	2b07      	cmp	r3, #7
 8009cac:	4414      	add	r4, r2
 8009cae:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 8009cb2:	f340 813f 	ble.w	8009f34 <_vfiprintf_r+0x7fc>
 8009cb6:	aa0c      	add	r2, sp, #48	; 0x30
 8009cb8:	4639      	mov	r1, r7
 8009cba:	4648      	mov	r0, r9
 8009cbc:	f7ff fd0a 	bl	80096d4 <__sprint_r>
 8009cc0:	2800      	cmp	r0, #0
 8009cc2:	f040 8172 	bne.w	8009faa <_vfiprintf_r+0x872>
 8009cc6:	ae0f      	add	r6, sp, #60	; 0x3c
 8009cc8:	9b00      	ldr	r3, [sp, #0]
 8009cca:	1aec      	subs	r4, r5, r3
 8009ccc:	2c00      	cmp	r4, #0
 8009cce:	dd1a      	ble.n	8009d06 <_vfiprintf_r+0x5ce>
 8009cd0:	4d7a      	ldr	r5, [pc, #488]	; (8009ebc <_vfiprintf_r+0x784>)
 8009cd2:	6035      	str	r5, [r6, #0]
 8009cd4:	e9dd 310d 	ldrd	r3, r1, [sp, #52]	; 0x34
 8009cd8:	2c10      	cmp	r4, #16
 8009cda:	f103 0301 	add.w	r3, r3, #1
 8009cde:	f106 0208 	add.w	r2, r6, #8
 8009ce2:	f300 8129 	bgt.w	8009f38 <_vfiprintf_r+0x800>
 8009ce6:	6074      	str	r4, [r6, #4]
 8009ce8:	2b07      	cmp	r3, #7
 8009cea:	440c      	add	r4, r1
 8009cec:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 8009cf0:	f340 8133 	ble.w	8009f5a <_vfiprintf_r+0x822>
 8009cf4:	aa0c      	add	r2, sp, #48	; 0x30
 8009cf6:	4639      	mov	r1, r7
 8009cf8:	4648      	mov	r0, r9
 8009cfa:	f7ff fceb 	bl	80096d4 <__sprint_r>
 8009cfe:	2800      	cmp	r0, #0
 8009d00:	f040 8153 	bne.w	8009faa <_vfiprintf_r+0x872>
 8009d04:	ae0f      	add	r6, sp, #60	; 0x3c
 8009d06:	9b00      	ldr	r3, [sp, #0]
 8009d08:	980e      	ldr	r0, [sp, #56]	; 0x38
 8009d0a:	6073      	str	r3, [r6, #4]
 8009d0c:	4418      	add	r0, r3
 8009d0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d10:	f8c6 8000 	str.w	r8, [r6]
 8009d14:	3301      	adds	r3, #1
 8009d16:	2b07      	cmp	r3, #7
 8009d18:	900e      	str	r0, [sp, #56]	; 0x38
 8009d1a:	930d      	str	r3, [sp, #52]	; 0x34
 8009d1c:	f300 811f 	bgt.w	8009f5e <_vfiprintf_r+0x826>
 8009d20:	f106 0308 	add.w	r3, r6, #8
 8009d24:	f01a 0f04 	tst.w	sl, #4
 8009d28:	f040 8121 	bne.w	8009f6e <_vfiprintf_r+0x836>
 8009d2c:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009d30:	9904      	ldr	r1, [sp, #16]
 8009d32:	428a      	cmp	r2, r1
 8009d34:	bfac      	ite	ge
 8009d36:	189b      	addge	r3, r3, r2
 8009d38:	185b      	addlt	r3, r3, r1
 8009d3a:	9302      	str	r3, [sp, #8]
 8009d3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d3e:	b13b      	cbz	r3, 8009d50 <_vfiprintf_r+0x618>
 8009d40:	aa0c      	add	r2, sp, #48	; 0x30
 8009d42:	4639      	mov	r1, r7
 8009d44:	4648      	mov	r0, r9
 8009d46:	f7ff fcc5 	bl	80096d4 <__sprint_r>
 8009d4a:	2800      	cmp	r0, #0
 8009d4c:	f040 812d 	bne.w	8009faa <_vfiprintf_r+0x872>
 8009d50:	2300      	movs	r3, #0
 8009d52:	930d      	str	r3, [sp, #52]	; 0x34
 8009d54:	ae0f      	add	r6, sp, #60	; 0x3c
 8009d56:	e6c7      	b.n	8009ae8 <_vfiprintf_r+0x3b0>
 8009d58:	4640      	mov	r0, r8
 8009d5a:	f7f6 fa91 	bl	8000280 <strlen>
 8009d5e:	9000      	str	r0, [sp, #0]
 8009d60:	e737      	b.n	8009bd2 <_vfiprintf_r+0x49a>
 8009d62:	f04a 0a10 	orr.w	sl, sl, #16
 8009d66:	f01a 0320 	ands.w	r3, sl, #32
 8009d6a:	d008      	beq.n	8009d7e <_vfiprintf_r+0x646>
 8009d6c:	3407      	adds	r4, #7
 8009d6e:	f024 0307 	bic.w	r3, r4, #7
 8009d72:	469b      	mov	fp, r3
 8009d74:	685d      	ldr	r5, [r3, #4]
 8009d76:	f85b 4b08 	ldr.w	r4, [fp], #8
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	e6da      	b.n	8009b34 <_vfiprintf_r+0x3fc>
 8009d7e:	46a3      	mov	fp, r4
 8009d80:	f01a 0510 	ands.w	r5, sl, #16
 8009d84:	f85b 4b04 	ldr.w	r4, [fp], #4
 8009d88:	d001      	beq.n	8009d8e <_vfiprintf_r+0x656>
 8009d8a:	461d      	mov	r5, r3
 8009d8c:	e7f5      	b.n	8009d7a <_vfiprintf_r+0x642>
 8009d8e:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 8009d92:	d001      	beq.n	8009d98 <_vfiprintf_r+0x660>
 8009d94:	b2a4      	uxth	r4, r4
 8009d96:	e7f0      	b.n	8009d7a <_vfiprintf_r+0x642>
 8009d98:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 8009d9c:	d0ed      	beq.n	8009d7a <_vfiprintf_r+0x642>
 8009d9e:	b2e4      	uxtb	r4, r4
 8009da0:	e7f3      	b.n	8009d8a <_vfiprintf_r+0x652>
 8009da2:	4a47      	ldr	r2, [pc, #284]	; (8009ec0 <_vfiprintf_r+0x788>)
 8009da4:	e5c5      	b.n	8009932 <_vfiprintf_r+0x1fa>
 8009da6:	46a3      	mov	fp, r4
 8009da8:	f01a 0510 	ands.w	r5, sl, #16
 8009dac:	f85b 4b04 	ldr.w	r4, [fp], #4
 8009db0:	d001      	beq.n	8009db6 <_vfiprintf_r+0x67e>
 8009db2:	4615      	mov	r5, r2
 8009db4:	e5c9      	b.n	800994a <_vfiprintf_r+0x212>
 8009db6:	f01a 0240 	ands.w	r2, sl, #64	; 0x40
 8009dba:	d001      	beq.n	8009dc0 <_vfiprintf_r+0x688>
 8009dbc:	b2a4      	uxth	r4, r4
 8009dbe:	e5c4      	b.n	800994a <_vfiprintf_r+0x212>
 8009dc0:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 8009dc4:	f43f adc1 	beq.w	800994a <_vfiprintf_r+0x212>
 8009dc8:	b2e4      	uxtb	r4, r4
 8009dca:	e7f2      	b.n	8009db2 <_vfiprintf_r+0x67a>
 8009dcc:	2c0a      	cmp	r4, #10
 8009dce:	f175 0300 	sbcs.w	r3, r5, #0
 8009dd2:	d205      	bcs.n	8009de0 <_vfiprintf_r+0x6a8>
 8009dd4:	3430      	adds	r4, #48	; 0x30
 8009dd6:	f88d 40df 	strb.w	r4, [sp, #223]	; 0xdf
 8009dda:	f10d 08df 	add.w	r8, sp, #223	; 0xdf
 8009dde:	e137      	b.n	800a050 <_vfiprintf_r+0x918>
 8009de0:	ab38      	add	r3, sp, #224	; 0xe0
 8009de2:	9308      	str	r3, [sp, #32]
 8009de4:	9b04      	ldr	r3, [sp, #16]
 8009de6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009dea:	f04f 0a00 	mov.w	sl, #0
 8009dee:	9309      	str	r3, [sp, #36]	; 0x24
 8009df0:	9b08      	ldr	r3, [sp, #32]
 8009df2:	220a      	movs	r2, #10
 8009df4:	f103 38ff 	add.w	r8, r3, #4294967295
 8009df8:	4620      	mov	r0, r4
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	4629      	mov	r1, r5
 8009dfe:	f7f6 fedb 	bl	8000bb8 <__aeabi_uldivmod>
 8009e02:	9b08      	ldr	r3, [sp, #32]
 8009e04:	3230      	adds	r2, #48	; 0x30
 8009e06:	f803 2c01 	strb.w	r2, [r3, #-1]
 8009e0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e0c:	f10a 0a01 	add.w	sl, sl, #1
 8009e10:	b1db      	cbz	r3, 8009e4a <_vfiprintf_r+0x712>
 8009e12:	9b06      	ldr	r3, [sp, #24]
 8009e14:	781b      	ldrb	r3, [r3, #0]
 8009e16:	4553      	cmp	r3, sl
 8009e18:	d117      	bne.n	8009e4a <_vfiprintf_r+0x712>
 8009e1a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8009e1e:	d014      	beq.n	8009e4a <_vfiprintf_r+0x712>
 8009e20:	2c0a      	cmp	r4, #10
 8009e22:	f175 0300 	sbcs.w	r3, r5, #0
 8009e26:	d310      	bcc.n	8009e4a <_vfiprintf_r+0x712>
 8009e28:	9b07      	ldr	r3, [sp, #28]
 8009e2a:	eba8 0803 	sub.w	r8, r8, r3
 8009e2e:	461a      	mov	r2, r3
 8009e30:	ee18 1a10 	vmov	r1, s16
 8009e34:	4640      	mov	r0, r8
 8009e36:	f001 fb4a 	bl	800b4ce <strncpy>
 8009e3a:	9b06      	ldr	r3, [sp, #24]
 8009e3c:	785b      	ldrb	r3, [r3, #1]
 8009e3e:	b1a3      	cbz	r3, 8009e6a <_vfiprintf_r+0x732>
 8009e40:	9b06      	ldr	r3, [sp, #24]
 8009e42:	3301      	adds	r3, #1
 8009e44:	9306      	str	r3, [sp, #24]
 8009e46:	f04f 0a00 	mov.w	sl, #0
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	220a      	movs	r2, #10
 8009e4e:	4620      	mov	r0, r4
 8009e50:	4629      	mov	r1, r5
 8009e52:	f7f6 feb1 	bl	8000bb8 <__aeabi_uldivmod>
 8009e56:	2c0a      	cmp	r4, #10
 8009e58:	f175 0300 	sbcs.w	r3, r5, #0
 8009e5c:	f0c0 80f8 	bcc.w	800a050 <_vfiprintf_r+0x918>
 8009e60:	4604      	mov	r4, r0
 8009e62:	460d      	mov	r5, r1
 8009e64:	f8cd 8020 	str.w	r8, [sp, #32]
 8009e68:	e7c2      	b.n	8009df0 <_vfiprintf_r+0x6b8>
 8009e6a:	469a      	mov	sl, r3
 8009e6c:	e7ed      	b.n	8009e4a <_vfiprintf_r+0x712>
 8009e6e:	f004 030f 	and.w	r3, r4, #15
 8009e72:	9a05      	ldr	r2, [sp, #20]
 8009e74:	0924      	lsrs	r4, r4, #4
 8009e76:	5cd3      	ldrb	r3, [r2, r3]
 8009e78:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8009e7c:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 8009e80:	092d      	lsrs	r5, r5, #4
 8009e82:	ea54 0305 	orrs.w	r3, r4, r5
 8009e86:	d1f2      	bne.n	8009e6e <_vfiprintf_r+0x736>
 8009e88:	e0e2      	b.n	800a050 <_vfiprintf_r+0x918>
 8009e8a:	b933      	cbnz	r3, 8009e9a <_vfiprintf_r+0x762>
 8009e8c:	f01a 0f01 	tst.w	sl, #1
 8009e90:	d003      	beq.n	8009e9a <_vfiprintf_r+0x762>
 8009e92:	2330      	movs	r3, #48	; 0x30
 8009e94:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
 8009e98:	e79f      	b.n	8009dda <_vfiprintf_r+0x6a2>
 8009e9a:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 8009e9e:	e0d7      	b.n	800a050 <_vfiprintf_r+0x918>
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	f000 80a3 	beq.w	8009fec <_vfiprintf_r+0x8b4>
 8009ea6:	2100      	movs	r1, #0
 8009ea8:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 8009eac:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 8009eb0:	46a3      	mov	fp, r4
 8009eb2:	e5da      	b.n	8009a6a <_vfiprintf_r+0x332>
 8009eb4:	4605      	mov	r5, r0
 8009eb6:	e68c      	b.n	8009bd2 <_vfiprintf_r+0x49a>
 8009eb8:	0800e22e 	.word	0x0800e22e
 8009ebc:	0800e23e 	.word	0x0800e23e
 8009ec0:	0800e20c 	.word	0x0800e20c
 8009ec4:	2010      	movs	r0, #16
 8009ec6:	4402      	add	r2, r0
 8009ec8:	2b07      	cmp	r3, #7
 8009eca:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 8009ece:	6070      	str	r0, [r6, #4]
 8009ed0:	dd07      	ble.n	8009ee2 <_vfiprintf_r+0x7aa>
 8009ed2:	aa0c      	add	r2, sp, #48	; 0x30
 8009ed4:	4639      	mov	r1, r7
 8009ed6:	4648      	mov	r0, r9
 8009ed8:	f7ff fbfc 	bl	80096d4 <__sprint_r>
 8009edc:	2800      	cmp	r0, #0
 8009ede:	d164      	bne.n	8009faa <_vfiprintf_r+0x872>
 8009ee0:	a90f      	add	r1, sp, #60	; 0x3c
 8009ee2:	3c10      	subs	r4, #16
 8009ee4:	460e      	mov	r6, r1
 8009ee6:	e68f      	b.n	8009c08 <_vfiprintf_r+0x4d0>
 8009ee8:	460e      	mov	r6, r1
 8009eea:	e6a8      	b.n	8009c3e <_vfiprintf_r+0x506>
 8009eec:	aa0c      	add	r2, sp, #48	; 0x30
 8009eee:	4639      	mov	r1, r7
 8009ef0:	4648      	mov	r0, r9
 8009ef2:	f7ff fbef 	bl	80096d4 <__sprint_r>
 8009ef6:	2800      	cmp	r0, #0
 8009ef8:	d157      	bne.n	8009faa <_vfiprintf_r+0x872>
 8009efa:	ae0f      	add	r6, sp, #60	; 0x3c
 8009efc:	e6b1      	b.n	8009c62 <_vfiprintf_r+0x52a>
 8009efe:	aa0c      	add	r2, sp, #48	; 0x30
 8009f00:	4639      	mov	r1, r7
 8009f02:	4648      	mov	r0, r9
 8009f04:	f7ff fbe6 	bl	80096d4 <__sprint_r>
 8009f08:	2800      	cmp	r0, #0
 8009f0a:	d14e      	bne.n	8009faa <_vfiprintf_r+0x872>
 8009f0c:	ae0f      	add	r6, sp, #60	; 0x3c
 8009f0e:	e6b8      	b.n	8009c82 <_vfiprintf_r+0x54a>
 8009f10:	2010      	movs	r0, #16
 8009f12:	4402      	add	r2, r0
 8009f14:	2b07      	cmp	r3, #7
 8009f16:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 8009f1a:	6070      	str	r0, [r6, #4]
 8009f1c:	dd07      	ble.n	8009f2e <_vfiprintf_r+0x7f6>
 8009f1e:	aa0c      	add	r2, sp, #48	; 0x30
 8009f20:	4639      	mov	r1, r7
 8009f22:	4648      	mov	r0, r9
 8009f24:	f7ff fbd6 	bl	80096d4 <__sprint_r>
 8009f28:	2800      	cmp	r0, #0
 8009f2a:	d13e      	bne.n	8009faa <_vfiprintf_r+0x872>
 8009f2c:	a90f      	add	r1, sp, #60	; 0x3c
 8009f2e:	3c10      	subs	r4, #16
 8009f30:	460e      	mov	r6, r1
 8009f32:	e6ae      	b.n	8009c92 <_vfiprintf_r+0x55a>
 8009f34:	460e      	mov	r6, r1
 8009f36:	e6c7      	b.n	8009cc8 <_vfiprintf_r+0x590>
 8009f38:	2010      	movs	r0, #16
 8009f3a:	4401      	add	r1, r0
 8009f3c:	2b07      	cmp	r3, #7
 8009f3e:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8009f42:	6070      	str	r0, [r6, #4]
 8009f44:	dd06      	ble.n	8009f54 <_vfiprintf_r+0x81c>
 8009f46:	aa0c      	add	r2, sp, #48	; 0x30
 8009f48:	4639      	mov	r1, r7
 8009f4a:	4648      	mov	r0, r9
 8009f4c:	f7ff fbc2 	bl	80096d4 <__sprint_r>
 8009f50:	bb58      	cbnz	r0, 8009faa <_vfiprintf_r+0x872>
 8009f52:	aa0f      	add	r2, sp, #60	; 0x3c
 8009f54:	3c10      	subs	r4, #16
 8009f56:	4616      	mov	r6, r2
 8009f58:	e6bb      	b.n	8009cd2 <_vfiprintf_r+0x59a>
 8009f5a:	4616      	mov	r6, r2
 8009f5c:	e6d3      	b.n	8009d06 <_vfiprintf_r+0x5ce>
 8009f5e:	aa0c      	add	r2, sp, #48	; 0x30
 8009f60:	4639      	mov	r1, r7
 8009f62:	4648      	mov	r0, r9
 8009f64:	f7ff fbb6 	bl	80096d4 <__sprint_r>
 8009f68:	b9f8      	cbnz	r0, 8009faa <_vfiprintf_r+0x872>
 8009f6a:	ab0f      	add	r3, sp, #60	; 0x3c
 8009f6c:	e6da      	b.n	8009d24 <_vfiprintf_r+0x5ec>
 8009f6e:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 8009f72:	1a54      	subs	r4, r2, r1
 8009f74:	2c00      	cmp	r4, #0
 8009f76:	f77f aed9 	ble.w	8009d2c <_vfiprintf_r+0x5f4>
 8009f7a:	4d39      	ldr	r5, [pc, #228]	; (800a060 <_vfiprintf_r+0x928>)
 8009f7c:	2610      	movs	r6, #16
 8009f7e:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 8009f82:	2c10      	cmp	r4, #16
 8009f84:	f102 0201 	add.w	r2, r2, #1
 8009f88:	601d      	str	r5, [r3, #0]
 8009f8a:	dc1d      	bgt.n	8009fc8 <_vfiprintf_r+0x890>
 8009f8c:	605c      	str	r4, [r3, #4]
 8009f8e:	2a07      	cmp	r2, #7
 8009f90:	440c      	add	r4, r1
 8009f92:	e9cd 240d 	strd	r2, r4, [sp, #52]	; 0x34
 8009f96:	f77f aec9 	ble.w	8009d2c <_vfiprintf_r+0x5f4>
 8009f9a:	aa0c      	add	r2, sp, #48	; 0x30
 8009f9c:	4639      	mov	r1, r7
 8009f9e:	4648      	mov	r0, r9
 8009fa0:	f7ff fb98 	bl	80096d4 <__sprint_r>
 8009fa4:	2800      	cmp	r0, #0
 8009fa6:	f43f aec1 	beq.w	8009d2c <_vfiprintf_r+0x5f4>
 8009faa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009fac:	07d9      	lsls	r1, r3, #31
 8009fae:	d405      	bmi.n	8009fbc <_vfiprintf_r+0x884>
 8009fb0:	89bb      	ldrh	r3, [r7, #12]
 8009fb2:	059a      	lsls	r2, r3, #22
 8009fb4:	d402      	bmi.n	8009fbc <_vfiprintf_r+0x884>
 8009fb6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8009fb8:	f000 fd6b 	bl	800aa92 <__retarget_lock_release_recursive>
 8009fbc:	89bb      	ldrh	r3, [r7, #12]
 8009fbe:	065b      	lsls	r3, r3, #25
 8009fc0:	f57f abed 	bpl.w	800979e <_vfiprintf_r+0x66>
 8009fc4:	f7ff bbe8 	b.w	8009798 <_vfiprintf_r+0x60>
 8009fc8:	3110      	adds	r1, #16
 8009fca:	2a07      	cmp	r2, #7
 8009fcc:	e9cd 210d 	strd	r2, r1, [sp, #52]	; 0x34
 8009fd0:	605e      	str	r6, [r3, #4]
 8009fd2:	dc02      	bgt.n	8009fda <_vfiprintf_r+0x8a2>
 8009fd4:	3308      	adds	r3, #8
 8009fd6:	3c10      	subs	r4, #16
 8009fd8:	e7d1      	b.n	8009f7e <_vfiprintf_r+0x846>
 8009fda:	aa0c      	add	r2, sp, #48	; 0x30
 8009fdc:	4639      	mov	r1, r7
 8009fde:	4648      	mov	r0, r9
 8009fe0:	f7ff fb78 	bl	80096d4 <__sprint_r>
 8009fe4:	2800      	cmp	r0, #0
 8009fe6:	d1e0      	bne.n	8009faa <_vfiprintf_r+0x872>
 8009fe8:	ab0f      	add	r3, sp, #60	; 0x3c
 8009fea:	e7f4      	b.n	8009fd6 <_vfiprintf_r+0x89e>
 8009fec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009fee:	b913      	cbnz	r3, 8009ff6 <_vfiprintf_r+0x8be>
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	930d      	str	r3, [sp, #52]	; 0x34
 8009ff4:	e7d9      	b.n	8009faa <_vfiprintf_r+0x872>
 8009ff6:	aa0c      	add	r2, sp, #48	; 0x30
 8009ff8:	4639      	mov	r1, r7
 8009ffa:	4648      	mov	r0, r9
 8009ffc:	f7ff fb6a 	bl	80096d4 <__sprint_r>
 800a000:	2800      	cmp	r0, #0
 800a002:	d0f5      	beq.n	8009ff0 <_vfiprintf_r+0x8b8>
 800a004:	e7d1      	b.n	8009faa <_vfiprintf_r+0x872>
 800a006:	ea54 0205 	orrs.w	r2, r4, r5
 800a00a:	f8cd a010 	str.w	sl, [sp, #16]
 800a00e:	f43f ada3 	beq.w	8009b58 <_vfiprintf_r+0x420>
 800a012:	2b01      	cmp	r3, #1
 800a014:	f43f aeda 	beq.w	8009dcc <_vfiprintf_r+0x694>
 800a018:	2b02      	cmp	r3, #2
 800a01a:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 800a01e:	f43f af26 	beq.w	8009e6e <_vfiprintf_r+0x736>
 800a022:	f004 0307 	and.w	r3, r4, #7
 800a026:	08e4      	lsrs	r4, r4, #3
 800a028:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 800a02c:	08ed      	lsrs	r5, r5, #3
 800a02e:	3330      	adds	r3, #48	; 0x30
 800a030:	ea54 0105 	orrs.w	r1, r4, r5
 800a034:	4642      	mov	r2, r8
 800a036:	f808 3d01 	strb.w	r3, [r8, #-1]!
 800a03a:	d1f2      	bne.n	800a022 <_vfiprintf_r+0x8ea>
 800a03c:	9904      	ldr	r1, [sp, #16]
 800a03e:	07c8      	lsls	r0, r1, #31
 800a040:	d506      	bpl.n	800a050 <_vfiprintf_r+0x918>
 800a042:	2b30      	cmp	r3, #48	; 0x30
 800a044:	d004      	beq.n	800a050 <_vfiprintf_r+0x918>
 800a046:	2330      	movs	r3, #48	; 0x30
 800a048:	f808 3c01 	strb.w	r3, [r8, #-1]
 800a04c:	f1a2 0802 	sub.w	r8, r2, #2
 800a050:	ab38      	add	r3, sp, #224	; 0xe0
 800a052:	eba3 0308 	sub.w	r3, r3, r8
 800a056:	9d00      	ldr	r5, [sp, #0]
 800a058:	f8dd a010 	ldr.w	sl, [sp, #16]
 800a05c:	9300      	str	r3, [sp, #0]
 800a05e:	e5b8      	b.n	8009bd2 <_vfiprintf_r+0x49a>
 800a060:	0800e22e 	.word	0x0800e22e

0800a064 <__sbprintf>:
 800a064:	b570      	push	{r4, r5, r6, lr}
 800a066:	460c      	mov	r4, r1
 800a068:	8989      	ldrh	r1, [r1, #12]
 800a06a:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 800a06e:	f021 0102 	bic.w	r1, r1, #2
 800a072:	f8ad 1014 	strh.w	r1, [sp, #20]
 800a076:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800a078:	911b      	str	r1, [sp, #108]	; 0x6c
 800a07a:	89e1      	ldrh	r1, [r4, #14]
 800a07c:	f8ad 1016 	strh.w	r1, [sp, #22]
 800a080:	69e1      	ldr	r1, [r4, #28]
 800a082:	9109      	str	r1, [sp, #36]	; 0x24
 800a084:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a086:	910b      	str	r1, [sp, #44]	; 0x2c
 800a088:	a91c      	add	r1, sp, #112	; 0x70
 800a08a:	9102      	str	r1, [sp, #8]
 800a08c:	9106      	str	r1, [sp, #24]
 800a08e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a092:	4606      	mov	r6, r0
 800a094:	9104      	str	r1, [sp, #16]
 800a096:	9107      	str	r1, [sp, #28]
 800a098:	a818      	add	r0, sp, #96	; 0x60
 800a09a:	2100      	movs	r1, #0
 800a09c:	e9cd 3200 	strd	r3, r2, [sp]
 800a0a0:	9108      	str	r1, [sp, #32]
 800a0a2:	f000 fcf3 	bl	800aa8c <__retarget_lock_init_recursive>
 800a0a6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a0aa:	a902      	add	r1, sp, #8
 800a0ac:	4630      	mov	r0, r6
 800a0ae:	f7ff fb43 	bl	8009738 <_vfiprintf_r>
 800a0b2:	1e05      	subs	r5, r0, #0
 800a0b4:	db07      	blt.n	800a0c6 <__sbprintf+0x62>
 800a0b6:	a902      	add	r1, sp, #8
 800a0b8:	4630      	mov	r0, r6
 800a0ba:	f000 f94b 	bl	800a354 <_fflush_r>
 800a0be:	2800      	cmp	r0, #0
 800a0c0:	bf18      	it	ne
 800a0c2:	f04f 35ff 	movne.w	r5, #4294967295
 800a0c6:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800a0ca:	9818      	ldr	r0, [sp, #96]	; 0x60
 800a0cc:	065b      	lsls	r3, r3, #25
 800a0ce:	bf42      	ittt	mi
 800a0d0:	89a3      	ldrhmi	r3, [r4, #12]
 800a0d2:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 800a0d6:	81a3      	strhmi	r3, [r4, #12]
 800a0d8:	f000 fcd9 	bl	800aa8e <__retarget_lock_close_recursive>
 800a0dc:	4628      	mov	r0, r5
 800a0de:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 800a0e2:	bd70      	pop	{r4, r5, r6, pc}

0800a0e4 <_vsnprintf_r>:
 800a0e4:	b530      	push	{r4, r5, lr}
 800a0e6:	4614      	mov	r4, r2
 800a0e8:	2c00      	cmp	r4, #0
 800a0ea:	b09b      	sub	sp, #108	; 0x6c
 800a0ec:	4605      	mov	r5, r0
 800a0ee:	461a      	mov	r2, r3
 800a0f0:	da05      	bge.n	800a0fe <_vsnprintf_r+0x1a>
 800a0f2:	238b      	movs	r3, #139	; 0x8b
 800a0f4:	6003      	str	r3, [r0, #0]
 800a0f6:	f04f 30ff 	mov.w	r0, #4294967295
 800a0fa:	b01b      	add	sp, #108	; 0x6c
 800a0fc:	bd30      	pop	{r4, r5, pc}
 800a0fe:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a102:	f8ad 300c 	strh.w	r3, [sp, #12]
 800a106:	bf14      	ite	ne
 800a108:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a10c:	4623      	moveq	r3, r4
 800a10e:	9302      	str	r3, [sp, #8]
 800a110:	9305      	str	r3, [sp, #20]
 800a112:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a116:	9100      	str	r1, [sp, #0]
 800a118:	9104      	str	r1, [sp, #16]
 800a11a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800a11e:	4669      	mov	r1, sp
 800a120:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a122:	f001 f9e9 	bl	800b4f8 <_svfprintf_r>
 800a126:	1c43      	adds	r3, r0, #1
 800a128:	bfbc      	itt	lt
 800a12a:	238b      	movlt	r3, #139	; 0x8b
 800a12c:	602b      	strlt	r3, [r5, #0]
 800a12e:	2c00      	cmp	r4, #0
 800a130:	d0e3      	beq.n	800a0fa <_vsnprintf_r+0x16>
 800a132:	9b00      	ldr	r3, [sp, #0]
 800a134:	2200      	movs	r2, #0
 800a136:	701a      	strb	r2, [r3, #0]
 800a138:	e7df      	b.n	800a0fa <_vsnprintf_r+0x16>
	...

0800a13c <vsnprintf>:
 800a13c:	b507      	push	{r0, r1, r2, lr}
 800a13e:	9300      	str	r3, [sp, #0]
 800a140:	4613      	mov	r3, r2
 800a142:	460a      	mov	r2, r1
 800a144:	4601      	mov	r1, r0
 800a146:	4803      	ldr	r0, [pc, #12]	; (800a154 <vsnprintf+0x18>)
 800a148:	6800      	ldr	r0, [r0, #0]
 800a14a:	f7ff ffcb 	bl	800a0e4 <_vsnprintf_r>
 800a14e:	b003      	add	sp, #12
 800a150:	f85d fb04 	ldr.w	pc, [sp], #4
 800a154:	20000108 	.word	0x20000108

0800a158 <__swsetup_r>:
 800a158:	b538      	push	{r3, r4, r5, lr}
 800a15a:	4b2a      	ldr	r3, [pc, #168]	; (800a204 <__swsetup_r+0xac>)
 800a15c:	4605      	mov	r5, r0
 800a15e:	6818      	ldr	r0, [r3, #0]
 800a160:	460c      	mov	r4, r1
 800a162:	b118      	cbz	r0, 800a16c <__swsetup_r+0x14>
 800a164:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a166:	b90b      	cbnz	r3, 800a16c <__swsetup_r+0x14>
 800a168:	f000 f960 	bl	800a42c <__sinit>
 800a16c:	89a3      	ldrh	r3, [r4, #12]
 800a16e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a172:	0718      	lsls	r0, r3, #28
 800a174:	d422      	bmi.n	800a1bc <__swsetup_r+0x64>
 800a176:	06d9      	lsls	r1, r3, #27
 800a178:	d407      	bmi.n	800a18a <__swsetup_r+0x32>
 800a17a:	2309      	movs	r3, #9
 800a17c:	602b      	str	r3, [r5, #0]
 800a17e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a182:	81a3      	strh	r3, [r4, #12]
 800a184:	f04f 30ff 	mov.w	r0, #4294967295
 800a188:	e034      	b.n	800a1f4 <__swsetup_r+0x9c>
 800a18a:	0758      	lsls	r0, r3, #29
 800a18c:	d512      	bpl.n	800a1b4 <__swsetup_r+0x5c>
 800a18e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800a190:	b141      	cbz	r1, 800a1a4 <__swsetup_r+0x4c>
 800a192:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800a196:	4299      	cmp	r1, r3
 800a198:	d002      	beq.n	800a1a0 <__swsetup_r+0x48>
 800a19a:	4628      	mov	r0, r5
 800a19c:	f000 fa42 	bl	800a624 <_free_r>
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	6323      	str	r3, [r4, #48]	; 0x30
 800a1a4:	89a3      	ldrh	r3, [r4, #12]
 800a1a6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a1aa:	81a3      	strh	r3, [r4, #12]
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	6063      	str	r3, [r4, #4]
 800a1b0:	6923      	ldr	r3, [r4, #16]
 800a1b2:	6023      	str	r3, [r4, #0]
 800a1b4:	89a3      	ldrh	r3, [r4, #12]
 800a1b6:	f043 0308 	orr.w	r3, r3, #8
 800a1ba:	81a3      	strh	r3, [r4, #12]
 800a1bc:	6923      	ldr	r3, [r4, #16]
 800a1be:	b94b      	cbnz	r3, 800a1d4 <__swsetup_r+0x7c>
 800a1c0:	89a3      	ldrh	r3, [r4, #12]
 800a1c2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a1c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a1ca:	d003      	beq.n	800a1d4 <__swsetup_r+0x7c>
 800a1cc:	4621      	mov	r1, r4
 800a1ce:	4628      	mov	r0, r5
 800a1d0:	f000 fc8c 	bl	800aaec <__smakebuf_r>
 800a1d4:	89a0      	ldrh	r0, [r4, #12]
 800a1d6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a1da:	f010 0301 	ands.w	r3, r0, #1
 800a1de:	d00a      	beq.n	800a1f6 <__swsetup_r+0x9e>
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	60a3      	str	r3, [r4, #8]
 800a1e4:	6963      	ldr	r3, [r4, #20]
 800a1e6:	425b      	negs	r3, r3
 800a1e8:	61a3      	str	r3, [r4, #24]
 800a1ea:	6923      	ldr	r3, [r4, #16]
 800a1ec:	b943      	cbnz	r3, 800a200 <__swsetup_r+0xa8>
 800a1ee:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a1f2:	d1c4      	bne.n	800a17e <__swsetup_r+0x26>
 800a1f4:	bd38      	pop	{r3, r4, r5, pc}
 800a1f6:	0781      	lsls	r1, r0, #30
 800a1f8:	bf58      	it	pl
 800a1fa:	6963      	ldrpl	r3, [r4, #20]
 800a1fc:	60a3      	str	r3, [r4, #8]
 800a1fe:	e7f4      	b.n	800a1ea <__swsetup_r+0x92>
 800a200:	2000      	movs	r0, #0
 800a202:	e7f7      	b.n	800a1f4 <__swsetup_r+0x9c>
 800a204:	20000108 	.word	0x20000108

0800a208 <register_fini>:
 800a208:	4b02      	ldr	r3, [pc, #8]	; (800a214 <register_fini+0xc>)
 800a20a:	b113      	cbz	r3, 800a212 <register_fini+0xa>
 800a20c:	4802      	ldr	r0, [pc, #8]	; (800a218 <register_fini+0x10>)
 800a20e:	f000 b80c 	b.w	800a22a <atexit>
 800a212:	4770      	bx	lr
 800a214:	00000000 	.word	0x00000000
 800a218:	0800a47d 	.word	0x0800a47d

0800a21c <abort>:
 800a21c:	b508      	push	{r3, lr}
 800a21e:	2006      	movs	r0, #6
 800a220:	f001 f8f6 	bl	800b410 <raise>
 800a224:	2001      	movs	r0, #1
 800a226:	f7f7 f8ef 	bl	8001408 <_exit>

0800a22a <atexit>:
 800a22a:	2300      	movs	r3, #0
 800a22c:	4601      	mov	r1, r0
 800a22e:	461a      	mov	r2, r3
 800a230:	4618      	mov	r0, r3
 800a232:	f002 bbd1 	b.w	800c9d8 <__register_exitproc>
	...

0800a238 <__sflush_r>:
 800a238:	898b      	ldrh	r3, [r1, #12]
 800a23a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a23e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a242:	4605      	mov	r5, r0
 800a244:	0718      	lsls	r0, r3, #28
 800a246:	460c      	mov	r4, r1
 800a248:	d45f      	bmi.n	800a30a <__sflush_r+0xd2>
 800a24a:	684b      	ldr	r3, [r1, #4]
 800a24c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a250:	2b00      	cmp	r3, #0
 800a252:	818a      	strh	r2, [r1, #12]
 800a254:	dc05      	bgt.n	800a262 <__sflush_r+0x2a>
 800a256:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800a258:	2b00      	cmp	r3, #0
 800a25a:	dc02      	bgt.n	800a262 <__sflush_r+0x2a>
 800a25c:	2000      	movs	r0, #0
 800a25e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a262:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a264:	2e00      	cmp	r6, #0
 800a266:	d0f9      	beq.n	800a25c <__sflush_r+0x24>
 800a268:	2300      	movs	r3, #0
 800a26a:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a26e:	682f      	ldr	r7, [r5, #0]
 800a270:	602b      	str	r3, [r5, #0]
 800a272:	d036      	beq.n	800a2e2 <__sflush_r+0xaa>
 800a274:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800a276:	89a3      	ldrh	r3, [r4, #12]
 800a278:	075a      	lsls	r2, r3, #29
 800a27a:	d505      	bpl.n	800a288 <__sflush_r+0x50>
 800a27c:	6863      	ldr	r3, [r4, #4]
 800a27e:	1ac0      	subs	r0, r0, r3
 800a280:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a282:	b10b      	cbz	r3, 800a288 <__sflush_r+0x50>
 800a284:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a286:	1ac0      	subs	r0, r0, r3
 800a288:	2300      	movs	r3, #0
 800a28a:	4602      	mov	r2, r0
 800a28c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a28e:	69e1      	ldr	r1, [r4, #28]
 800a290:	4628      	mov	r0, r5
 800a292:	47b0      	blx	r6
 800a294:	1c43      	adds	r3, r0, #1
 800a296:	89a3      	ldrh	r3, [r4, #12]
 800a298:	d106      	bne.n	800a2a8 <__sflush_r+0x70>
 800a29a:	6829      	ldr	r1, [r5, #0]
 800a29c:	291d      	cmp	r1, #29
 800a29e:	d830      	bhi.n	800a302 <__sflush_r+0xca>
 800a2a0:	4a2b      	ldr	r2, [pc, #172]	; (800a350 <__sflush_r+0x118>)
 800a2a2:	40ca      	lsrs	r2, r1
 800a2a4:	07d6      	lsls	r6, r2, #31
 800a2a6:	d52c      	bpl.n	800a302 <__sflush_r+0xca>
 800a2a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a2ac:	b21b      	sxth	r3, r3
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	6062      	str	r2, [r4, #4]
 800a2b2:	04d9      	lsls	r1, r3, #19
 800a2b4:	6922      	ldr	r2, [r4, #16]
 800a2b6:	81a3      	strh	r3, [r4, #12]
 800a2b8:	6022      	str	r2, [r4, #0]
 800a2ba:	d504      	bpl.n	800a2c6 <__sflush_r+0x8e>
 800a2bc:	1c42      	adds	r2, r0, #1
 800a2be:	d101      	bne.n	800a2c4 <__sflush_r+0x8c>
 800a2c0:	682b      	ldr	r3, [r5, #0]
 800a2c2:	b903      	cbnz	r3, 800a2c6 <__sflush_r+0x8e>
 800a2c4:	6520      	str	r0, [r4, #80]	; 0x50
 800a2c6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800a2c8:	602f      	str	r7, [r5, #0]
 800a2ca:	2900      	cmp	r1, #0
 800a2cc:	d0c6      	beq.n	800a25c <__sflush_r+0x24>
 800a2ce:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800a2d2:	4299      	cmp	r1, r3
 800a2d4:	d002      	beq.n	800a2dc <__sflush_r+0xa4>
 800a2d6:	4628      	mov	r0, r5
 800a2d8:	f000 f9a4 	bl	800a624 <_free_r>
 800a2dc:	2000      	movs	r0, #0
 800a2de:	6320      	str	r0, [r4, #48]	; 0x30
 800a2e0:	e7bd      	b.n	800a25e <__sflush_r+0x26>
 800a2e2:	69e1      	ldr	r1, [r4, #28]
 800a2e4:	2301      	movs	r3, #1
 800a2e6:	4628      	mov	r0, r5
 800a2e8:	47b0      	blx	r6
 800a2ea:	1c41      	adds	r1, r0, #1
 800a2ec:	d1c3      	bne.n	800a276 <__sflush_r+0x3e>
 800a2ee:	682b      	ldr	r3, [r5, #0]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d0c0      	beq.n	800a276 <__sflush_r+0x3e>
 800a2f4:	2b1d      	cmp	r3, #29
 800a2f6:	d001      	beq.n	800a2fc <__sflush_r+0xc4>
 800a2f8:	2b16      	cmp	r3, #22
 800a2fa:	d101      	bne.n	800a300 <__sflush_r+0xc8>
 800a2fc:	602f      	str	r7, [r5, #0]
 800a2fe:	e7ad      	b.n	800a25c <__sflush_r+0x24>
 800a300:	89a3      	ldrh	r3, [r4, #12]
 800a302:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a306:	81a3      	strh	r3, [r4, #12]
 800a308:	e7a9      	b.n	800a25e <__sflush_r+0x26>
 800a30a:	690f      	ldr	r7, [r1, #16]
 800a30c:	2f00      	cmp	r7, #0
 800a30e:	d0a5      	beq.n	800a25c <__sflush_r+0x24>
 800a310:	079b      	lsls	r3, r3, #30
 800a312:	680e      	ldr	r6, [r1, #0]
 800a314:	bf08      	it	eq
 800a316:	694b      	ldreq	r3, [r1, #20]
 800a318:	600f      	str	r7, [r1, #0]
 800a31a:	bf18      	it	ne
 800a31c:	2300      	movne	r3, #0
 800a31e:	eba6 0807 	sub.w	r8, r6, r7
 800a322:	608b      	str	r3, [r1, #8]
 800a324:	f1b8 0f00 	cmp.w	r8, #0
 800a328:	dd98      	ble.n	800a25c <__sflush_r+0x24>
 800a32a:	69e1      	ldr	r1, [r4, #28]
 800a32c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a32e:	4643      	mov	r3, r8
 800a330:	463a      	mov	r2, r7
 800a332:	4628      	mov	r0, r5
 800a334:	47b0      	blx	r6
 800a336:	2800      	cmp	r0, #0
 800a338:	dc06      	bgt.n	800a348 <__sflush_r+0x110>
 800a33a:	89a3      	ldrh	r3, [r4, #12]
 800a33c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a340:	81a3      	strh	r3, [r4, #12]
 800a342:	f04f 30ff 	mov.w	r0, #4294967295
 800a346:	e78a      	b.n	800a25e <__sflush_r+0x26>
 800a348:	4407      	add	r7, r0
 800a34a:	eba8 0800 	sub.w	r8, r8, r0
 800a34e:	e7e9      	b.n	800a324 <__sflush_r+0xec>
 800a350:	20400001 	.word	0x20400001

0800a354 <_fflush_r>:
 800a354:	b538      	push	{r3, r4, r5, lr}
 800a356:	460c      	mov	r4, r1
 800a358:	4605      	mov	r5, r0
 800a35a:	b118      	cbz	r0, 800a364 <_fflush_r+0x10>
 800a35c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a35e:	b90b      	cbnz	r3, 800a364 <_fflush_r+0x10>
 800a360:	f000 f864 	bl	800a42c <__sinit>
 800a364:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a368:	b1bb      	cbz	r3, 800a39a <_fflush_r+0x46>
 800a36a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a36c:	07d0      	lsls	r0, r2, #31
 800a36e:	d404      	bmi.n	800a37a <_fflush_r+0x26>
 800a370:	0599      	lsls	r1, r3, #22
 800a372:	d402      	bmi.n	800a37a <_fflush_r+0x26>
 800a374:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a376:	f000 fb8b 	bl	800aa90 <__retarget_lock_acquire_recursive>
 800a37a:	4628      	mov	r0, r5
 800a37c:	4621      	mov	r1, r4
 800a37e:	f7ff ff5b 	bl	800a238 <__sflush_r>
 800a382:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a384:	07da      	lsls	r2, r3, #31
 800a386:	4605      	mov	r5, r0
 800a388:	d405      	bmi.n	800a396 <_fflush_r+0x42>
 800a38a:	89a3      	ldrh	r3, [r4, #12]
 800a38c:	059b      	lsls	r3, r3, #22
 800a38e:	d402      	bmi.n	800a396 <_fflush_r+0x42>
 800a390:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a392:	f000 fb7e 	bl	800aa92 <__retarget_lock_release_recursive>
 800a396:	4628      	mov	r0, r5
 800a398:	bd38      	pop	{r3, r4, r5, pc}
 800a39a:	461d      	mov	r5, r3
 800a39c:	e7fb      	b.n	800a396 <_fflush_r+0x42>
	...

0800a3a0 <std>:
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	b510      	push	{r4, lr}
 800a3a4:	4604      	mov	r4, r0
 800a3a6:	e9c0 3300 	strd	r3, r3, [r0]
 800a3aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a3ae:	6083      	str	r3, [r0, #8]
 800a3b0:	8181      	strh	r1, [r0, #12]
 800a3b2:	6643      	str	r3, [r0, #100]	; 0x64
 800a3b4:	81c2      	strh	r2, [r0, #14]
 800a3b6:	6183      	str	r3, [r0, #24]
 800a3b8:	4619      	mov	r1, r3
 800a3ba:	2208      	movs	r2, #8
 800a3bc:	305c      	adds	r0, #92	; 0x5c
 800a3be:	f7ff f981 	bl	80096c4 <memset>
 800a3c2:	4b07      	ldr	r3, [pc, #28]	; (800a3e0 <std+0x40>)
 800a3c4:	6223      	str	r3, [r4, #32]
 800a3c6:	4b07      	ldr	r3, [pc, #28]	; (800a3e4 <std+0x44>)
 800a3c8:	6263      	str	r3, [r4, #36]	; 0x24
 800a3ca:	4b07      	ldr	r3, [pc, #28]	; (800a3e8 <std+0x48>)
 800a3cc:	62a3      	str	r3, [r4, #40]	; 0x28
 800a3ce:	4b07      	ldr	r3, [pc, #28]	; (800a3ec <std+0x4c>)
 800a3d0:	61e4      	str	r4, [r4, #28]
 800a3d2:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a3d4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a3d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3dc:	f000 bb56 	b.w	800aa8c <__retarget_lock_init_recursive>
 800a3e0:	0800b449 	.word	0x0800b449
 800a3e4:	0800b46b 	.word	0x0800b46b
 800a3e8:	0800b4a3 	.word	0x0800b4a3
 800a3ec:	0800b4c7 	.word	0x0800b4c7

0800a3f0 <_cleanup_r>:
 800a3f0:	4901      	ldr	r1, [pc, #4]	; (800a3f8 <_cleanup_r+0x8>)
 800a3f2:	f000 bb21 	b.w	800aa38 <_fwalk_reent>
 800a3f6:	bf00      	nop
 800a3f8:	0800d745 	.word	0x0800d745

0800a3fc <__sfp_lock_acquire>:
 800a3fc:	4801      	ldr	r0, [pc, #4]	; (800a404 <__sfp_lock_acquire+0x8>)
 800a3fe:	f000 bb47 	b.w	800aa90 <__retarget_lock_acquire_recursive>
 800a402:	bf00      	nop
 800a404:	20002006 	.word	0x20002006

0800a408 <__sfp_lock_release>:
 800a408:	4801      	ldr	r0, [pc, #4]	; (800a410 <__sfp_lock_release+0x8>)
 800a40a:	f000 bb42 	b.w	800aa92 <__retarget_lock_release_recursive>
 800a40e:	bf00      	nop
 800a410:	20002006 	.word	0x20002006

0800a414 <__sinit_lock_acquire>:
 800a414:	4801      	ldr	r0, [pc, #4]	; (800a41c <__sinit_lock_acquire+0x8>)
 800a416:	f000 bb3b 	b.w	800aa90 <__retarget_lock_acquire_recursive>
 800a41a:	bf00      	nop
 800a41c:	20002007 	.word	0x20002007

0800a420 <__sinit_lock_release>:
 800a420:	4801      	ldr	r0, [pc, #4]	; (800a428 <__sinit_lock_release+0x8>)
 800a422:	f000 bb36 	b.w	800aa92 <__retarget_lock_release_recursive>
 800a426:	bf00      	nop
 800a428:	20002007 	.word	0x20002007

0800a42c <__sinit>:
 800a42c:	b510      	push	{r4, lr}
 800a42e:	4604      	mov	r4, r0
 800a430:	f7ff fff0 	bl	800a414 <__sinit_lock_acquire>
 800a434:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800a436:	b11a      	cbz	r2, 800a440 <__sinit+0x14>
 800a438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a43c:	f7ff bff0 	b.w	800a420 <__sinit_lock_release>
 800a440:	4b0d      	ldr	r3, [pc, #52]	; (800a478 <__sinit+0x4c>)
 800a442:	63e3      	str	r3, [r4, #60]	; 0x3c
 800a444:	2303      	movs	r3, #3
 800a446:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
 800a44a:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
 800a44e:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 800a452:	6860      	ldr	r0, [r4, #4]
 800a454:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
 800a458:	2104      	movs	r1, #4
 800a45a:	f7ff ffa1 	bl	800a3a0 <std>
 800a45e:	68a0      	ldr	r0, [r4, #8]
 800a460:	2201      	movs	r2, #1
 800a462:	2109      	movs	r1, #9
 800a464:	f7ff ff9c 	bl	800a3a0 <std>
 800a468:	68e0      	ldr	r0, [r4, #12]
 800a46a:	2202      	movs	r2, #2
 800a46c:	2112      	movs	r1, #18
 800a46e:	f7ff ff97 	bl	800a3a0 <std>
 800a472:	2301      	movs	r3, #1
 800a474:	63a3      	str	r3, [r4, #56]	; 0x38
 800a476:	e7df      	b.n	800a438 <__sinit+0xc>
 800a478:	0800a3f1 	.word	0x0800a3f1

0800a47c <__libc_fini_array>:
 800a47c:	b538      	push	{r3, r4, r5, lr}
 800a47e:	4d07      	ldr	r5, [pc, #28]	; (800a49c <__libc_fini_array+0x20>)
 800a480:	4c07      	ldr	r4, [pc, #28]	; (800a4a0 <__libc_fini_array+0x24>)
 800a482:	1b64      	subs	r4, r4, r5
 800a484:	10a4      	asrs	r4, r4, #2
 800a486:	b91c      	cbnz	r4, 800a490 <__libc_fini_array+0x14>
 800a488:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a48c:	f003 be1c 	b.w	800e0c8 <_fini>
 800a490:	3c01      	subs	r4, #1
 800a492:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800a496:	4798      	blx	r3
 800a498:	e7f5      	b.n	800a486 <__libc_fini_array+0xa>
 800a49a:	bf00      	nop
 800a49c:	0800e56c 	.word	0x0800e56c
 800a4a0:	0800e570 	.word	0x0800e570

0800a4a4 <__fputwc>:
 800a4a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a4a8:	4680      	mov	r8, r0
 800a4aa:	460e      	mov	r6, r1
 800a4ac:	4615      	mov	r5, r2
 800a4ae:	f000 fae3 	bl	800aa78 <__locale_mb_cur_max>
 800a4b2:	2801      	cmp	r0, #1
 800a4b4:	d11c      	bne.n	800a4f0 <__fputwc+0x4c>
 800a4b6:	1e73      	subs	r3, r6, #1
 800a4b8:	2bfe      	cmp	r3, #254	; 0xfe
 800a4ba:	d819      	bhi.n	800a4f0 <__fputwc+0x4c>
 800a4bc:	f88d 6004 	strb.w	r6, [sp, #4]
 800a4c0:	4604      	mov	r4, r0
 800a4c2:	2700      	movs	r7, #0
 800a4c4:	f10d 0904 	add.w	r9, sp, #4
 800a4c8:	42a7      	cmp	r7, r4
 800a4ca:	d020      	beq.n	800a50e <__fputwc+0x6a>
 800a4cc:	68ab      	ldr	r3, [r5, #8]
 800a4ce:	f817 1009 	ldrb.w	r1, [r7, r9]
 800a4d2:	3b01      	subs	r3, #1
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	60ab      	str	r3, [r5, #8]
 800a4d8:	da04      	bge.n	800a4e4 <__fputwc+0x40>
 800a4da:	69aa      	ldr	r2, [r5, #24]
 800a4dc:	4293      	cmp	r3, r2
 800a4de:	db1a      	blt.n	800a516 <__fputwc+0x72>
 800a4e0:	290a      	cmp	r1, #10
 800a4e2:	d018      	beq.n	800a516 <__fputwc+0x72>
 800a4e4:	682b      	ldr	r3, [r5, #0]
 800a4e6:	1c5a      	adds	r2, r3, #1
 800a4e8:	602a      	str	r2, [r5, #0]
 800a4ea:	7019      	strb	r1, [r3, #0]
 800a4ec:	3701      	adds	r7, #1
 800a4ee:	e7eb      	b.n	800a4c8 <__fputwc+0x24>
 800a4f0:	a901      	add	r1, sp, #4
 800a4f2:	f105 035c 	add.w	r3, r5, #92	; 0x5c
 800a4f6:	4632      	mov	r2, r6
 800a4f8:	4640      	mov	r0, r8
 800a4fa:	f002 fa37 	bl	800c96c <_wcrtomb_r>
 800a4fe:	1c41      	adds	r1, r0, #1
 800a500:	4604      	mov	r4, r0
 800a502:	d1de      	bne.n	800a4c2 <__fputwc+0x1e>
 800a504:	89ab      	ldrh	r3, [r5, #12]
 800a506:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a50a:	81ab      	strh	r3, [r5, #12]
 800a50c:	4606      	mov	r6, r0
 800a50e:	4630      	mov	r0, r6
 800a510:	b003      	add	sp, #12
 800a512:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a516:	462a      	mov	r2, r5
 800a518:	4640      	mov	r0, r8
 800a51a:	f002 f9de 	bl	800c8da <__swbuf_r>
 800a51e:	1c42      	adds	r2, r0, #1
 800a520:	d1e4      	bne.n	800a4ec <__fputwc+0x48>
 800a522:	4606      	mov	r6, r0
 800a524:	e7f3      	b.n	800a50e <__fputwc+0x6a>

0800a526 <_fputwc_r>:
 800a526:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800a528:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a52a:	4614      	mov	r4, r2
 800a52c:	07da      	lsls	r2, r3, #31
 800a52e:	4605      	mov	r5, r0
 800a530:	d407      	bmi.n	800a542 <_fputwc_r+0x1c>
 800a532:	89a3      	ldrh	r3, [r4, #12]
 800a534:	059b      	lsls	r3, r3, #22
 800a536:	d404      	bmi.n	800a542 <_fputwc_r+0x1c>
 800a538:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a53a:	9101      	str	r1, [sp, #4]
 800a53c:	f000 faa8 	bl	800aa90 <__retarget_lock_acquire_recursive>
 800a540:	9901      	ldr	r1, [sp, #4]
 800a542:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a546:	0498      	lsls	r0, r3, #18
 800a548:	d406      	bmi.n	800a558 <_fputwc_r+0x32>
 800a54a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a54e:	81a3      	strh	r3, [r4, #12]
 800a550:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a552:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a556:	6663      	str	r3, [r4, #100]	; 0x64
 800a558:	4622      	mov	r2, r4
 800a55a:	4628      	mov	r0, r5
 800a55c:	f7ff ffa2 	bl	800a4a4 <__fputwc>
 800a560:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a562:	07da      	lsls	r2, r3, #31
 800a564:	4605      	mov	r5, r0
 800a566:	d405      	bmi.n	800a574 <_fputwc_r+0x4e>
 800a568:	89a3      	ldrh	r3, [r4, #12]
 800a56a:	059b      	lsls	r3, r3, #22
 800a56c:	d402      	bmi.n	800a574 <_fputwc_r+0x4e>
 800a56e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a570:	f000 fa8f 	bl	800aa92 <__retarget_lock_release_recursive>
 800a574:	4628      	mov	r0, r5
 800a576:	b003      	add	sp, #12
 800a578:	bd30      	pop	{r4, r5, pc}
	...

0800a57c <_malloc_trim_r>:
 800a57c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a580:	4606      	mov	r6, r0
 800a582:	2008      	movs	r0, #8
 800a584:	460c      	mov	r4, r1
 800a586:	f002 f99b 	bl	800c8c0 <sysconf>
 800a58a:	4f23      	ldr	r7, [pc, #140]	; (800a618 <_malloc_trim_r+0x9c>)
 800a58c:	4680      	mov	r8, r0
 800a58e:	4630      	mov	r0, r6
 800a590:	f000 fd54 	bl	800b03c <__malloc_lock>
 800a594:	68bb      	ldr	r3, [r7, #8]
 800a596:	685d      	ldr	r5, [r3, #4]
 800a598:	f025 0503 	bic.w	r5, r5, #3
 800a59c:	1b2c      	subs	r4, r5, r4
 800a59e:	3c11      	subs	r4, #17
 800a5a0:	4444      	add	r4, r8
 800a5a2:	fbb4 f4f8 	udiv	r4, r4, r8
 800a5a6:	3c01      	subs	r4, #1
 800a5a8:	fb08 f404 	mul.w	r4, r8, r4
 800a5ac:	45a0      	cmp	r8, r4
 800a5ae:	dd05      	ble.n	800a5bc <_malloc_trim_r+0x40>
 800a5b0:	4630      	mov	r0, r6
 800a5b2:	f000 fd49 	bl	800b048 <__malloc_unlock>
 800a5b6:	2000      	movs	r0, #0
 800a5b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5bc:	2100      	movs	r1, #0
 800a5be:	4630      	mov	r0, r6
 800a5c0:	f000 feec 	bl	800b39c <_sbrk_r>
 800a5c4:	68bb      	ldr	r3, [r7, #8]
 800a5c6:	442b      	add	r3, r5
 800a5c8:	4298      	cmp	r0, r3
 800a5ca:	d1f1      	bne.n	800a5b0 <_malloc_trim_r+0x34>
 800a5cc:	4261      	negs	r1, r4
 800a5ce:	4630      	mov	r0, r6
 800a5d0:	f000 fee4 	bl	800b39c <_sbrk_r>
 800a5d4:	3001      	adds	r0, #1
 800a5d6:	d110      	bne.n	800a5fa <_malloc_trim_r+0x7e>
 800a5d8:	2100      	movs	r1, #0
 800a5da:	4630      	mov	r0, r6
 800a5dc:	f000 fede 	bl	800b39c <_sbrk_r>
 800a5e0:	68ba      	ldr	r2, [r7, #8]
 800a5e2:	1a83      	subs	r3, r0, r2
 800a5e4:	2b0f      	cmp	r3, #15
 800a5e6:	dde3      	ble.n	800a5b0 <_malloc_trim_r+0x34>
 800a5e8:	490c      	ldr	r1, [pc, #48]	; (800a61c <_malloc_trim_r+0xa0>)
 800a5ea:	6809      	ldr	r1, [r1, #0]
 800a5ec:	1a40      	subs	r0, r0, r1
 800a5ee:	490c      	ldr	r1, [pc, #48]	; (800a620 <_malloc_trim_r+0xa4>)
 800a5f0:	f043 0301 	orr.w	r3, r3, #1
 800a5f4:	6008      	str	r0, [r1, #0]
 800a5f6:	6053      	str	r3, [r2, #4]
 800a5f8:	e7da      	b.n	800a5b0 <_malloc_trim_r+0x34>
 800a5fa:	68bb      	ldr	r3, [r7, #8]
 800a5fc:	4a08      	ldr	r2, [pc, #32]	; (800a620 <_malloc_trim_r+0xa4>)
 800a5fe:	1b2d      	subs	r5, r5, r4
 800a600:	f045 0501 	orr.w	r5, r5, #1
 800a604:	605d      	str	r5, [r3, #4]
 800a606:	6813      	ldr	r3, [r2, #0]
 800a608:	4630      	mov	r0, r6
 800a60a:	1b1b      	subs	r3, r3, r4
 800a60c:	6013      	str	r3, [r2, #0]
 800a60e:	f000 fd1b 	bl	800b048 <__malloc_unlock>
 800a612:	2001      	movs	r0, #1
 800a614:	e7d0      	b.n	800a5b8 <_malloc_trim_r+0x3c>
 800a616:	bf00      	nop
 800a618:	200006a8 	.word	0x200006a8
 800a61c:	20000ab0 	.word	0x20000ab0
 800a620:	20002008 	.word	0x20002008

0800a624 <_free_r>:
 800a624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a626:	4605      	mov	r5, r0
 800a628:	460f      	mov	r7, r1
 800a62a:	2900      	cmp	r1, #0
 800a62c:	f000 80b1 	beq.w	800a792 <_free_r+0x16e>
 800a630:	f000 fd04 	bl	800b03c <__malloc_lock>
 800a634:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800a638:	4856      	ldr	r0, [pc, #344]	; (800a794 <_free_r+0x170>)
 800a63a:	f022 0401 	bic.w	r4, r2, #1
 800a63e:	f1a7 0308 	sub.w	r3, r7, #8
 800a642:	eb03 0c04 	add.w	ip, r3, r4
 800a646:	6881      	ldr	r1, [r0, #8]
 800a648:	f8dc 6004 	ldr.w	r6, [ip, #4]
 800a64c:	4561      	cmp	r1, ip
 800a64e:	f026 0603 	bic.w	r6, r6, #3
 800a652:	f002 0201 	and.w	r2, r2, #1
 800a656:	d11b      	bne.n	800a690 <_free_r+0x6c>
 800a658:	4434      	add	r4, r6
 800a65a:	b93a      	cbnz	r2, 800a66c <_free_r+0x48>
 800a65c:	f857 2c08 	ldr.w	r2, [r7, #-8]
 800a660:	1a9b      	subs	r3, r3, r2
 800a662:	4414      	add	r4, r2
 800a664:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 800a668:	60ca      	str	r2, [r1, #12]
 800a66a:	6091      	str	r1, [r2, #8]
 800a66c:	f044 0201 	orr.w	r2, r4, #1
 800a670:	605a      	str	r2, [r3, #4]
 800a672:	6083      	str	r3, [r0, #8]
 800a674:	4b48      	ldr	r3, [pc, #288]	; (800a798 <_free_r+0x174>)
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	42a3      	cmp	r3, r4
 800a67a:	d804      	bhi.n	800a686 <_free_r+0x62>
 800a67c:	4b47      	ldr	r3, [pc, #284]	; (800a79c <_free_r+0x178>)
 800a67e:	4628      	mov	r0, r5
 800a680:	6819      	ldr	r1, [r3, #0]
 800a682:	f7ff ff7b 	bl	800a57c <_malloc_trim_r>
 800a686:	4628      	mov	r0, r5
 800a688:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a68c:	f000 bcdc 	b.w	800b048 <__malloc_unlock>
 800a690:	f8cc 6004 	str.w	r6, [ip, #4]
 800a694:	2a00      	cmp	r2, #0
 800a696:	d138      	bne.n	800a70a <_free_r+0xe6>
 800a698:	f857 1c08 	ldr.w	r1, [r7, #-8]
 800a69c:	1a5b      	subs	r3, r3, r1
 800a69e:	440c      	add	r4, r1
 800a6a0:	6899      	ldr	r1, [r3, #8]
 800a6a2:	f100 0708 	add.w	r7, r0, #8
 800a6a6:	42b9      	cmp	r1, r7
 800a6a8:	d031      	beq.n	800a70e <_free_r+0xea>
 800a6aa:	68df      	ldr	r7, [r3, #12]
 800a6ac:	60cf      	str	r7, [r1, #12]
 800a6ae:	60b9      	str	r1, [r7, #8]
 800a6b0:	eb0c 0106 	add.w	r1, ip, r6
 800a6b4:	6849      	ldr	r1, [r1, #4]
 800a6b6:	07c9      	lsls	r1, r1, #31
 800a6b8:	d40b      	bmi.n	800a6d2 <_free_r+0xae>
 800a6ba:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800a6be:	4434      	add	r4, r6
 800a6c0:	bb3a      	cbnz	r2, 800a712 <_free_r+0xee>
 800a6c2:	4e37      	ldr	r6, [pc, #220]	; (800a7a0 <_free_r+0x17c>)
 800a6c4:	42b1      	cmp	r1, r6
 800a6c6:	d124      	bne.n	800a712 <_free_r+0xee>
 800a6c8:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a6cc:	e9c3 1102 	strd	r1, r1, [r3, #8]
 800a6d0:	2201      	movs	r2, #1
 800a6d2:	f044 0101 	orr.w	r1, r4, #1
 800a6d6:	6059      	str	r1, [r3, #4]
 800a6d8:	511c      	str	r4, [r3, r4]
 800a6da:	2a00      	cmp	r2, #0
 800a6dc:	d1d3      	bne.n	800a686 <_free_r+0x62>
 800a6de:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 800a6e2:	d21b      	bcs.n	800a71c <_free_r+0xf8>
 800a6e4:	0961      	lsrs	r1, r4, #5
 800a6e6:	08e2      	lsrs	r2, r4, #3
 800a6e8:	2401      	movs	r4, #1
 800a6ea:	408c      	lsls	r4, r1
 800a6ec:	6841      	ldr	r1, [r0, #4]
 800a6ee:	3201      	adds	r2, #1
 800a6f0:	430c      	orrs	r4, r1
 800a6f2:	6044      	str	r4, [r0, #4]
 800a6f4:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 800a6f8:	f850 4032 	ldr.w	r4, [r0, r2, lsl #3]
 800a6fc:	3908      	subs	r1, #8
 800a6fe:	e9c3 4102 	strd	r4, r1, [r3, #8]
 800a702:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
 800a706:	60e3      	str	r3, [r4, #12]
 800a708:	e7bd      	b.n	800a686 <_free_r+0x62>
 800a70a:	2200      	movs	r2, #0
 800a70c:	e7d0      	b.n	800a6b0 <_free_r+0x8c>
 800a70e:	2201      	movs	r2, #1
 800a710:	e7ce      	b.n	800a6b0 <_free_r+0x8c>
 800a712:	f8dc 600c 	ldr.w	r6, [ip, #12]
 800a716:	60ce      	str	r6, [r1, #12]
 800a718:	60b1      	str	r1, [r6, #8]
 800a71a:	e7da      	b.n	800a6d2 <_free_r+0xae>
 800a71c:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 800a720:	ea4f 2254 	mov.w	r2, r4, lsr #9
 800a724:	d214      	bcs.n	800a750 <_free_r+0x12c>
 800a726:	09a2      	lsrs	r2, r4, #6
 800a728:	3238      	adds	r2, #56	; 0x38
 800a72a:	1c51      	adds	r1, r2, #1
 800a72c:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 800a730:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 800a734:	428e      	cmp	r6, r1
 800a736:	d125      	bne.n	800a784 <_free_r+0x160>
 800a738:	2401      	movs	r4, #1
 800a73a:	1092      	asrs	r2, r2, #2
 800a73c:	fa04 f202 	lsl.w	r2, r4, r2
 800a740:	6844      	ldr	r4, [r0, #4]
 800a742:	4322      	orrs	r2, r4
 800a744:	6042      	str	r2, [r0, #4]
 800a746:	e9c3 1602 	strd	r1, r6, [r3, #8]
 800a74a:	60b3      	str	r3, [r6, #8]
 800a74c:	60cb      	str	r3, [r1, #12]
 800a74e:	e79a      	b.n	800a686 <_free_r+0x62>
 800a750:	2a14      	cmp	r2, #20
 800a752:	d801      	bhi.n	800a758 <_free_r+0x134>
 800a754:	325b      	adds	r2, #91	; 0x5b
 800a756:	e7e8      	b.n	800a72a <_free_r+0x106>
 800a758:	2a54      	cmp	r2, #84	; 0x54
 800a75a:	d802      	bhi.n	800a762 <_free_r+0x13e>
 800a75c:	0b22      	lsrs	r2, r4, #12
 800a75e:	326e      	adds	r2, #110	; 0x6e
 800a760:	e7e3      	b.n	800a72a <_free_r+0x106>
 800a762:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800a766:	d802      	bhi.n	800a76e <_free_r+0x14a>
 800a768:	0be2      	lsrs	r2, r4, #15
 800a76a:	3277      	adds	r2, #119	; 0x77
 800a76c:	e7dd      	b.n	800a72a <_free_r+0x106>
 800a76e:	f240 5154 	movw	r1, #1364	; 0x554
 800a772:	428a      	cmp	r2, r1
 800a774:	bf9a      	itte	ls
 800a776:	0ca2      	lsrls	r2, r4, #18
 800a778:	327c      	addls	r2, #124	; 0x7c
 800a77a:	227e      	movhi	r2, #126	; 0x7e
 800a77c:	e7d5      	b.n	800a72a <_free_r+0x106>
 800a77e:	6889      	ldr	r1, [r1, #8]
 800a780:	428e      	cmp	r6, r1
 800a782:	d004      	beq.n	800a78e <_free_r+0x16a>
 800a784:	684a      	ldr	r2, [r1, #4]
 800a786:	f022 0203 	bic.w	r2, r2, #3
 800a78a:	42a2      	cmp	r2, r4
 800a78c:	d8f7      	bhi.n	800a77e <_free_r+0x15a>
 800a78e:	68ce      	ldr	r6, [r1, #12]
 800a790:	e7d9      	b.n	800a746 <_free_r+0x122>
 800a792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a794:	200006a8 	.word	0x200006a8
 800a798:	20000ab4 	.word	0x20000ab4
 800a79c:	20002038 	.word	0x20002038
 800a7a0:	200006b0 	.word	0x200006b0

0800a7a4 <__sfvwrite_r>:
 800a7a4:	6893      	ldr	r3, [r2, #8]
 800a7a6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7aa:	4606      	mov	r6, r0
 800a7ac:	460c      	mov	r4, r1
 800a7ae:	4690      	mov	r8, r2
 800a7b0:	b91b      	cbnz	r3, 800a7ba <__sfvwrite_r+0x16>
 800a7b2:	2000      	movs	r0, #0
 800a7b4:	b003      	add	sp, #12
 800a7b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7ba:	898b      	ldrh	r3, [r1, #12]
 800a7bc:	0718      	lsls	r0, r3, #28
 800a7be:	d550      	bpl.n	800a862 <__sfvwrite_r+0xbe>
 800a7c0:	690b      	ldr	r3, [r1, #16]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d04d      	beq.n	800a862 <__sfvwrite_r+0xbe>
 800a7c6:	89a3      	ldrh	r3, [r4, #12]
 800a7c8:	f8d8 7000 	ldr.w	r7, [r8]
 800a7cc:	f013 0902 	ands.w	r9, r3, #2
 800a7d0:	d16c      	bne.n	800a8ac <__sfvwrite_r+0x108>
 800a7d2:	f013 0301 	ands.w	r3, r3, #1
 800a7d6:	f000 809c 	beq.w	800a912 <__sfvwrite_r+0x16e>
 800a7da:	4648      	mov	r0, r9
 800a7dc:	46ca      	mov	sl, r9
 800a7de:	46cb      	mov	fp, r9
 800a7e0:	f1bb 0f00 	cmp.w	fp, #0
 800a7e4:	f000 8103 	beq.w	800a9ee <__sfvwrite_r+0x24a>
 800a7e8:	b950      	cbnz	r0, 800a800 <__sfvwrite_r+0x5c>
 800a7ea:	465a      	mov	r2, fp
 800a7ec:	210a      	movs	r1, #10
 800a7ee:	4650      	mov	r0, sl
 800a7f0:	f7f5 fcf6 	bl	80001e0 <memchr>
 800a7f4:	2800      	cmp	r0, #0
 800a7f6:	f000 80ff 	beq.w	800a9f8 <__sfvwrite_r+0x254>
 800a7fa:	3001      	adds	r0, #1
 800a7fc:	eba0 090a 	sub.w	r9, r0, sl
 800a800:	6820      	ldr	r0, [r4, #0]
 800a802:	6921      	ldr	r1, [r4, #16]
 800a804:	6963      	ldr	r3, [r4, #20]
 800a806:	45d9      	cmp	r9, fp
 800a808:	464a      	mov	r2, r9
 800a80a:	bf28      	it	cs
 800a80c:	465a      	movcs	r2, fp
 800a80e:	4288      	cmp	r0, r1
 800a810:	f240 80f5 	bls.w	800a9fe <__sfvwrite_r+0x25a>
 800a814:	68a5      	ldr	r5, [r4, #8]
 800a816:	441d      	add	r5, r3
 800a818:	42aa      	cmp	r2, r5
 800a81a:	f340 80f0 	ble.w	800a9fe <__sfvwrite_r+0x25a>
 800a81e:	4651      	mov	r1, sl
 800a820:	462a      	mov	r2, r5
 800a822:	f000 fbf1 	bl	800b008 <memmove>
 800a826:	6823      	ldr	r3, [r4, #0]
 800a828:	442b      	add	r3, r5
 800a82a:	6023      	str	r3, [r4, #0]
 800a82c:	4621      	mov	r1, r4
 800a82e:	4630      	mov	r0, r6
 800a830:	f7ff fd90 	bl	800a354 <_fflush_r>
 800a834:	2800      	cmp	r0, #0
 800a836:	d167      	bne.n	800a908 <__sfvwrite_r+0x164>
 800a838:	ebb9 0905 	subs.w	r9, r9, r5
 800a83c:	f040 80f7 	bne.w	800aa2e <__sfvwrite_r+0x28a>
 800a840:	4621      	mov	r1, r4
 800a842:	4630      	mov	r0, r6
 800a844:	f7ff fd86 	bl	800a354 <_fflush_r>
 800a848:	2800      	cmp	r0, #0
 800a84a:	d15d      	bne.n	800a908 <__sfvwrite_r+0x164>
 800a84c:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800a850:	44aa      	add	sl, r5
 800a852:	ebab 0b05 	sub.w	fp, fp, r5
 800a856:	1b55      	subs	r5, r2, r5
 800a858:	f8c8 5008 	str.w	r5, [r8, #8]
 800a85c:	2d00      	cmp	r5, #0
 800a85e:	d1bf      	bne.n	800a7e0 <__sfvwrite_r+0x3c>
 800a860:	e7a7      	b.n	800a7b2 <__sfvwrite_r+0xe>
 800a862:	4621      	mov	r1, r4
 800a864:	4630      	mov	r0, r6
 800a866:	f7ff fc77 	bl	800a158 <__swsetup_r>
 800a86a:	2800      	cmp	r0, #0
 800a86c:	d0ab      	beq.n	800a7c6 <__sfvwrite_r+0x22>
 800a86e:	f04f 30ff 	mov.w	r0, #4294967295
 800a872:	e79f      	b.n	800a7b4 <__sfvwrite_r+0x10>
 800a874:	e9d7 b900 	ldrd	fp, r9, [r7]
 800a878:	3708      	adds	r7, #8
 800a87a:	f1b9 0f00 	cmp.w	r9, #0
 800a87e:	d0f9      	beq.n	800a874 <__sfvwrite_r+0xd0>
 800a880:	45d1      	cmp	r9, sl
 800a882:	464b      	mov	r3, r9
 800a884:	69e1      	ldr	r1, [r4, #28]
 800a886:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a888:	bf28      	it	cs
 800a88a:	4653      	movcs	r3, sl
 800a88c:	465a      	mov	r2, fp
 800a88e:	4630      	mov	r0, r6
 800a890:	47a8      	blx	r5
 800a892:	2800      	cmp	r0, #0
 800a894:	dd38      	ble.n	800a908 <__sfvwrite_r+0x164>
 800a896:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a89a:	4483      	add	fp, r0
 800a89c:	eba9 0900 	sub.w	r9, r9, r0
 800a8a0:	1a18      	subs	r0, r3, r0
 800a8a2:	f8c8 0008 	str.w	r0, [r8, #8]
 800a8a6:	2800      	cmp	r0, #0
 800a8a8:	d1e7      	bne.n	800a87a <__sfvwrite_r+0xd6>
 800a8aa:	e782      	b.n	800a7b2 <__sfvwrite_r+0xe>
 800a8ac:	f04f 0b00 	mov.w	fp, #0
 800a8b0:	f8df a180 	ldr.w	sl, [pc, #384]	; 800aa34 <__sfvwrite_r+0x290>
 800a8b4:	46d9      	mov	r9, fp
 800a8b6:	e7e0      	b.n	800a87a <__sfvwrite_r+0xd6>
 800a8b8:	e9d7 9a00 	ldrd	r9, sl, [r7]
 800a8bc:	3708      	adds	r7, #8
 800a8be:	f1ba 0f00 	cmp.w	sl, #0
 800a8c2:	d0f9      	beq.n	800a8b8 <__sfvwrite_r+0x114>
 800a8c4:	89a3      	ldrh	r3, [r4, #12]
 800a8c6:	6820      	ldr	r0, [r4, #0]
 800a8c8:	68a2      	ldr	r2, [r4, #8]
 800a8ca:	0599      	lsls	r1, r3, #22
 800a8cc:	d563      	bpl.n	800a996 <__sfvwrite_r+0x1f2>
 800a8ce:	4552      	cmp	r2, sl
 800a8d0:	d836      	bhi.n	800a940 <__sfvwrite_r+0x19c>
 800a8d2:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800a8d6:	d033      	beq.n	800a940 <__sfvwrite_r+0x19c>
 800a8d8:	6921      	ldr	r1, [r4, #16]
 800a8da:	6965      	ldr	r5, [r4, #20]
 800a8dc:	eba0 0b01 	sub.w	fp, r0, r1
 800a8e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a8e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a8e8:	f10b 0201 	add.w	r2, fp, #1
 800a8ec:	106d      	asrs	r5, r5, #1
 800a8ee:	4452      	add	r2, sl
 800a8f0:	4295      	cmp	r5, r2
 800a8f2:	bf38      	it	cc
 800a8f4:	4615      	movcc	r5, r2
 800a8f6:	055b      	lsls	r3, r3, #21
 800a8f8:	d53d      	bpl.n	800a976 <__sfvwrite_r+0x1d2>
 800a8fa:	4629      	mov	r1, r5
 800a8fc:	4630      	mov	r0, r6
 800a8fe:	f000 f935 	bl	800ab6c <_malloc_r>
 800a902:	b948      	cbnz	r0, 800a918 <__sfvwrite_r+0x174>
 800a904:	230c      	movs	r3, #12
 800a906:	6033      	str	r3, [r6, #0]
 800a908:	89a3      	ldrh	r3, [r4, #12]
 800a90a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a90e:	81a3      	strh	r3, [r4, #12]
 800a910:	e7ad      	b.n	800a86e <__sfvwrite_r+0xca>
 800a912:	4699      	mov	r9, r3
 800a914:	469a      	mov	sl, r3
 800a916:	e7d2      	b.n	800a8be <__sfvwrite_r+0x11a>
 800a918:	465a      	mov	r2, fp
 800a91a:	6921      	ldr	r1, [r4, #16]
 800a91c:	9001      	str	r0, [sp, #4]
 800a91e:	f7fe fec3 	bl	80096a8 <memcpy>
 800a922:	89a2      	ldrh	r2, [r4, #12]
 800a924:	9b01      	ldr	r3, [sp, #4]
 800a926:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800a92a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a92e:	81a2      	strh	r2, [r4, #12]
 800a930:	6123      	str	r3, [r4, #16]
 800a932:	6165      	str	r5, [r4, #20]
 800a934:	445b      	add	r3, fp
 800a936:	eba5 050b 	sub.w	r5, r5, fp
 800a93a:	6023      	str	r3, [r4, #0]
 800a93c:	4652      	mov	r2, sl
 800a93e:	60a5      	str	r5, [r4, #8]
 800a940:	4552      	cmp	r2, sl
 800a942:	bf28      	it	cs
 800a944:	4652      	movcs	r2, sl
 800a946:	6820      	ldr	r0, [r4, #0]
 800a948:	9201      	str	r2, [sp, #4]
 800a94a:	4649      	mov	r1, r9
 800a94c:	f000 fb5c 	bl	800b008 <memmove>
 800a950:	68a3      	ldr	r3, [r4, #8]
 800a952:	9a01      	ldr	r2, [sp, #4]
 800a954:	1a9b      	subs	r3, r3, r2
 800a956:	60a3      	str	r3, [r4, #8]
 800a958:	6823      	ldr	r3, [r4, #0]
 800a95a:	441a      	add	r2, r3
 800a95c:	4655      	mov	r5, sl
 800a95e:	6022      	str	r2, [r4, #0]
 800a960:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800a964:	44a9      	add	r9, r5
 800a966:	ebaa 0a05 	sub.w	sl, sl, r5
 800a96a:	1b45      	subs	r5, r0, r5
 800a96c:	f8c8 5008 	str.w	r5, [r8, #8]
 800a970:	2d00      	cmp	r5, #0
 800a972:	d1a4      	bne.n	800a8be <__sfvwrite_r+0x11a>
 800a974:	e71d      	b.n	800a7b2 <__sfvwrite_r+0xe>
 800a976:	462a      	mov	r2, r5
 800a978:	4630      	mov	r0, r6
 800a97a:	f000 fb6b 	bl	800b054 <_realloc_r>
 800a97e:	4603      	mov	r3, r0
 800a980:	2800      	cmp	r0, #0
 800a982:	d1d5      	bne.n	800a930 <__sfvwrite_r+0x18c>
 800a984:	6921      	ldr	r1, [r4, #16]
 800a986:	4630      	mov	r0, r6
 800a988:	f7ff fe4c 	bl	800a624 <_free_r>
 800a98c:	89a3      	ldrh	r3, [r4, #12]
 800a98e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a992:	81a3      	strh	r3, [r4, #12]
 800a994:	e7b6      	b.n	800a904 <__sfvwrite_r+0x160>
 800a996:	6923      	ldr	r3, [r4, #16]
 800a998:	4283      	cmp	r3, r0
 800a99a:	d302      	bcc.n	800a9a2 <__sfvwrite_r+0x1fe>
 800a99c:	6961      	ldr	r1, [r4, #20]
 800a99e:	4551      	cmp	r1, sl
 800a9a0:	d915      	bls.n	800a9ce <__sfvwrite_r+0x22a>
 800a9a2:	4552      	cmp	r2, sl
 800a9a4:	bf28      	it	cs
 800a9a6:	4652      	movcs	r2, sl
 800a9a8:	4649      	mov	r1, r9
 800a9aa:	4615      	mov	r5, r2
 800a9ac:	f000 fb2c 	bl	800b008 <memmove>
 800a9b0:	68a3      	ldr	r3, [r4, #8]
 800a9b2:	6822      	ldr	r2, [r4, #0]
 800a9b4:	1b5b      	subs	r3, r3, r5
 800a9b6:	442a      	add	r2, r5
 800a9b8:	60a3      	str	r3, [r4, #8]
 800a9ba:	6022      	str	r2, [r4, #0]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d1cf      	bne.n	800a960 <__sfvwrite_r+0x1bc>
 800a9c0:	4621      	mov	r1, r4
 800a9c2:	4630      	mov	r0, r6
 800a9c4:	f7ff fcc6 	bl	800a354 <_fflush_r>
 800a9c8:	2800      	cmp	r0, #0
 800a9ca:	d0c9      	beq.n	800a960 <__sfvwrite_r+0x1bc>
 800a9cc:	e79c      	b.n	800a908 <__sfvwrite_r+0x164>
 800a9ce:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800a9d2:	459a      	cmp	sl, r3
 800a9d4:	bf38      	it	cc
 800a9d6:	4653      	movcc	r3, sl
 800a9d8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a9da:	fb93 f3f1 	sdiv	r3, r3, r1
 800a9de:	464a      	mov	r2, r9
 800a9e0:	434b      	muls	r3, r1
 800a9e2:	4630      	mov	r0, r6
 800a9e4:	69e1      	ldr	r1, [r4, #28]
 800a9e6:	47a8      	blx	r5
 800a9e8:	1e05      	subs	r5, r0, #0
 800a9ea:	dcb9      	bgt.n	800a960 <__sfvwrite_r+0x1bc>
 800a9ec:	e78c      	b.n	800a908 <__sfvwrite_r+0x164>
 800a9ee:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a9f2:	2000      	movs	r0, #0
 800a9f4:	3708      	adds	r7, #8
 800a9f6:	e6f3      	b.n	800a7e0 <__sfvwrite_r+0x3c>
 800a9f8:	f10b 0901 	add.w	r9, fp, #1
 800a9fc:	e700      	b.n	800a800 <__sfvwrite_r+0x5c>
 800a9fe:	4293      	cmp	r3, r2
 800aa00:	dc08      	bgt.n	800aa14 <__sfvwrite_r+0x270>
 800aa02:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800aa04:	69e1      	ldr	r1, [r4, #28]
 800aa06:	4652      	mov	r2, sl
 800aa08:	4630      	mov	r0, r6
 800aa0a:	47a8      	blx	r5
 800aa0c:	1e05      	subs	r5, r0, #0
 800aa0e:	f73f af13 	bgt.w	800a838 <__sfvwrite_r+0x94>
 800aa12:	e779      	b.n	800a908 <__sfvwrite_r+0x164>
 800aa14:	4651      	mov	r1, sl
 800aa16:	9201      	str	r2, [sp, #4]
 800aa18:	f000 faf6 	bl	800b008 <memmove>
 800aa1c:	9a01      	ldr	r2, [sp, #4]
 800aa1e:	68a3      	ldr	r3, [r4, #8]
 800aa20:	1a9b      	subs	r3, r3, r2
 800aa22:	60a3      	str	r3, [r4, #8]
 800aa24:	6823      	ldr	r3, [r4, #0]
 800aa26:	4413      	add	r3, r2
 800aa28:	6023      	str	r3, [r4, #0]
 800aa2a:	4615      	mov	r5, r2
 800aa2c:	e704      	b.n	800a838 <__sfvwrite_r+0x94>
 800aa2e:	2001      	movs	r0, #1
 800aa30:	e70c      	b.n	800a84c <__sfvwrite_r+0xa8>
 800aa32:	bf00      	nop
 800aa34:	7ffffc00 	.word	0x7ffffc00

0800aa38 <_fwalk_reent>:
 800aa38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa3c:	4606      	mov	r6, r0
 800aa3e:	4688      	mov	r8, r1
 800aa40:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
 800aa44:	2700      	movs	r7, #0
 800aa46:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aa4a:	f1b9 0901 	subs.w	r9, r9, #1
 800aa4e:	d505      	bpl.n	800aa5c <_fwalk_reent+0x24>
 800aa50:	6824      	ldr	r4, [r4, #0]
 800aa52:	2c00      	cmp	r4, #0
 800aa54:	d1f7      	bne.n	800aa46 <_fwalk_reent+0xe>
 800aa56:	4638      	mov	r0, r7
 800aa58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa5c:	89ab      	ldrh	r3, [r5, #12]
 800aa5e:	2b01      	cmp	r3, #1
 800aa60:	d907      	bls.n	800aa72 <_fwalk_reent+0x3a>
 800aa62:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aa66:	3301      	adds	r3, #1
 800aa68:	d003      	beq.n	800aa72 <_fwalk_reent+0x3a>
 800aa6a:	4629      	mov	r1, r5
 800aa6c:	4630      	mov	r0, r6
 800aa6e:	47c0      	blx	r8
 800aa70:	4307      	orrs	r7, r0
 800aa72:	3568      	adds	r5, #104	; 0x68
 800aa74:	e7e9      	b.n	800aa4a <_fwalk_reent+0x12>
	...

0800aa78 <__locale_mb_cur_max>:
 800aa78:	4b01      	ldr	r3, [pc, #4]	; (800aa80 <__locale_mb_cur_max+0x8>)
 800aa7a:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 800aa7e:	4770      	bx	lr
 800aa80:	2000053c 	.word	0x2000053c

0800aa84 <_localeconv_r>:
 800aa84:	4800      	ldr	r0, [pc, #0]	; (800aa88 <_localeconv_r+0x4>)
 800aa86:	4770      	bx	lr
 800aa88:	2000062c 	.word	0x2000062c

0800aa8c <__retarget_lock_init_recursive>:
 800aa8c:	4770      	bx	lr

0800aa8e <__retarget_lock_close_recursive>:
 800aa8e:	4770      	bx	lr

0800aa90 <__retarget_lock_acquire_recursive>:
 800aa90:	4770      	bx	lr

0800aa92 <__retarget_lock_release_recursive>:
 800aa92:	4770      	bx	lr

0800aa94 <__swhatbuf_r>:
 800aa94:	b570      	push	{r4, r5, r6, lr}
 800aa96:	460e      	mov	r6, r1
 800aa98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa9c:	2900      	cmp	r1, #0
 800aa9e:	b096      	sub	sp, #88	; 0x58
 800aaa0:	4614      	mov	r4, r2
 800aaa2:	461d      	mov	r5, r3
 800aaa4:	da0a      	bge.n	800aabc <__swhatbuf_r+0x28>
 800aaa6:	f9b6 100c 	ldrsh.w	r1, [r6, #12]
 800aaaa:	2300      	movs	r3, #0
 800aaac:	f011 0080 	ands.w	r0, r1, #128	; 0x80
 800aab0:	602b      	str	r3, [r5, #0]
 800aab2:	d116      	bne.n	800aae2 <__swhatbuf_r+0x4e>
 800aab4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aab8:	6023      	str	r3, [r4, #0]
 800aaba:	e015      	b.n	800aae8 <__swhatbuf_r+0x54>
 800aabc:	466a      	mov	r2, sp
 800aabe:	f002 fe99 	bl	800d7f4 <_fstat_r>
 800aac2:	2800      	cmp	r0, #0
 800aac4:	dbef      	blt.n	800aaa6 <__swhatbuf_r+0x12>
 800aac6:	9a01      	ldr	r2, [sp, #4]
 800aac8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800aacc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800aad0:	425a      	negs	r2, r3
 800aad2:	415a      	adcs	r2, r3
 800aad4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aad8:	602a      	str	r2, [r5, #0]
 800aada:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800aade:	6023      	str	r3, [r4, #0]
 800aae0:	e002      	b.n	800aae8 <__swhatbuf_r+0x54>
 800aae2:	2240      	movs	r2, #64	; 0x40
 800aae4:	6022      	str	r2, [r4, #0]
 800aae6:	4618      	mov	r0, r3
 800aae8:	b016      	add	sp, #88	; 0x58
 800aaea:	bd70      	pop	{r4, r5, r6, pc}

0800aaec <__smakebuf_r>:
 800aaec:	898b      	ldrh	r3, [r1, #12]
 800aaee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aaf0:	079d      	lsls	r5, r3, #30
 800aaf2:	4606      	mov	r6, r0
 800aaf4:	460c      	mov	r4, r1
 800aaf6:	d507      	bpl.n	800ab08 <__smakebuf_r+0x1c>
 800aaf8:	f104 0343 	add.w	r3, r4, #67	; 0x43
 800aafc:	6023      	str	r3, [r4, #0]
 800aafe:	6123      	str	r3, [r4, #16]
 800ab00:	2301      	movs	r3, #1
 800ab02:	6163      	str	r3, [r4, #20]
 800ab04:	b002      	add	sp, #8
 800ab06:	bd70      	pop	{r4, r5, r6, pc}
 800ab08:	ab01      	add	r3, sp, #4
 800ab0a:	466a      	mov	r2, sp
 800ab0c:	f7ff ffc2 	bl	800aa94 <__swhatbuf_r>
 800ab10:	9900      	ldr	r1, [sp, #0]
 800ab12:	4605      	mov	r5, r0
 800ab14:	4630      	mov	r0, r6
 800ab16:	f000 f829 	bl	800ab6c <_malloc_r>
 800ab1a:	b948      	cbnz	r0, 800ab30 <__smakebuf_r+0x44>
 800ab1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab20:	059a      	lsls	r2, r3, #22
 800ab22:	d4ef      	bmi.n	800ab04 <__smakebuf_r+0x18>
 800ab24:	f023 0303 	bic.w	r3, r3, #3
 800ab28:	f043 0302 	orr.w	r3, r3, #2
 800ab2c:	81a3      	strh	r3, [r4, #12]
 800ab2e:	e7e3      	b.n	800aaf8 <__smakebuf_r+0xc>
 800ab30:	4b0d      	ldr	r3, [pc, #52]	; (800ab68 <__smakebuf_r+0x7c>)
 800ab32:	63f3      	str	r3, [r6, #60]	; 0x3c
 800ab34:	89a3      	ldrh	r3, [r4, #12]
 800ab36:	6020      	str	r0, [r4, #0]
 800ab38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab3c:	81a3      	strh	r3, [r4, #12]
 800ab3e:	9b00      	ldr	r3, [sp, #0]
 800ab40:	6163      	str	r3, [r4, #20]
 800ab42:	9b01      	ldr	r3, [sp, #4]
 800ab44:	6120      	str	r0, [r4, #16]
 800ab46:	b15b      	cbz	r3, 800ab60 <__smakebuf_r+0x74>
 800ab48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab4c:	4630      	mov	r0, r6
 800ab4e:	f002 fe63 	bl	800d818 <_isatty_r>
 800ab52:	b128      	cbz	r0, 800ab60 <__smakebuf_r+0x74>
 800ab54:	89a3      	ldrh	r3, [r4, #12]
 800ab56:	f023 0303 	bic.w	r3, r3, #3
 800ab5a:	f043 0301 	orr.w	r3, r3, #1
 800ab5e:	81a3      	strh	r3, [r4, #12]
 800ab60:	89a0      	ldrh	r0, [r4, #12]
 800ab62:	4305      	orrs	r5, r0
 800ab64:	81a5      	strh	r5, [r4, #12]
 800ab66:	e7cd      	b.n	800ab04 <__smakebuf_r+0x18>
 800ab68:	0800a3f1 	.word	0x0800a3f1

0800ab6c <_malloc_r>:
 800ab6c:	f101 030b 	add.w	r3, r1, #11
 800ab70:	2b16      	cmp	r3, #22
 800ab72:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab76:	4605      	mov	r5, r0
 800ab78:	d906      	bls.n	800ab88 <_malloc_r+0x1c>
 800ab7a:	f033 0707 	bics.w	r7, r3, #7
 800ab7e:	d504      	bpl.n	800ab8a <_malloc_r+0x1e>
 800ab80:	230c      	movs	r3, #12
 800ab82:	602b      	str	r3, [r5, #0]
 800ab84:	2400      	movs	r4, #0
 800ab86:	e1a5      	b.n	800aed4 <_malloc_r+0x368>
 800ab88:	2710      	movs	r7, #16
 800ab8a:	42b9      	cmp	r1, r7
 800ab8c:	d8f8      	bhi.n	800ab80 <_malloc_r+0x14>
 800ab8e:	4628      	mov	r0, r5
 800ab90:	f000 fa54 	bl	800b03c <__malloc_lock>
 800ab94:	f5b7 7ffc 	cmp.w	r7, #504	; 0x1f8
 800ab98:	4eb0      	ldr	r6, [pc, #704]	; (800ae5c <_malloc_r+0x2f0>)
 800ab9a:	d237      	bcs.n	800ac0c <_malloc_r+0xa0>
 800ab9c:	f107 0208 	add.w	r2, r7, #8
 800aba0:	4432      	add	r2, r6
 800aba2:	f1a2 0108 	sub.w	r1, r2, #8
 800aba6:	6854      	ldr	r4, [r2, #4]
 800aba8:	428c      	cmp	r4, r1
 800abaa:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 800abae:	d102      	bne.n	800abb6 <_malloc_r+0x4a>
 800abb0:	68d4      	ldr	r4, [r2, #12]
 800abb2:	42a2      	cmp	r2, r4
 800abb4:	d010      	beq.n	800abd8 <_malloc_r+0x6c>
 800abb6:	6863      	ldr	r3, [r4, #4]
 800abb8:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800abbc:	f023 0303 	bic.w	r3, r3, #3
 800abc0:	60ca      	str	r2, [r1, #12]
 800abc2:	4423      	add	r3, r4
 800abc4:	6091      	str	r1, [r2, #8]
 800abc6:	685a      	ldr	r2, [r3, #4]
 800abc8:	f042 0201 	orr.w	r2, r2, #1
 800abcc:	605a      	str	r2, [r3, #4]
 800abce:	4628      	mov	r0, r5
 800abd0:	f000 fa3a 	bl	800b048 <__malloc_unlock>
 800abd4:	3408      	adds	r4, #8
 800abd6:	e17d      	b.n	800aed4 <_malloc_r+0x368>
 800abd8:	3302      	adds	r3, #2
 800abda:	6934      	ldr	r4, [r6, #16]
 800abdc:	49a0      	ldr	r1, [pc, #640]	; (800ae60 <_malloc_r+0x2f4>)
 800abde:	428c      	cmp	r4, r1
 800abe0:	d077      	beq.n	800acd2 <_malloc_r+0x166>
 800abe2:	6862      	ldr	r2, [r4, #4]
 800abe4:	f022 0c03 	bic.w	ip, r2, #3
 800abe8:	ebac 0007 	sub.w	r0, ip, r7
 800abec:	280f      	cmp	r0, #15
 800abee:	dd48      	ble.n	800ac82 <_malloc_r+0x116>
 800abf0:	19e2      	adds	r2, r4, r7
 800abf2:	f040 0301 	orr.w	r3, r0, #1
 800abf6:	f047 0701 	orr.w	r7, r7, #1
 800abfa:	6067      	str	r7, [r4, #4]
 800abfc:	e9c6 2204 	strd	r2, r2, [r6, #16]
 800ac00:	e9c2 1102 	strd	r1, r1, [r2, #8]
 800ac04:	6053      	str	r3, [r2, #4]
 800ac06:	f844 000c 	str.w	r0, [r4, ip]
 800ac0a:	e7e0      	b.n	800abce <_malloc_r+0x62>
 800ac0c:	0a7b      	lsrs	r3, r7, #9
 800ac0e:	d02a      	beq.n	800ac66 <_malloc_r+0xfa>
 800ac10:	2b04      	cmp	r3, #4
 800ac12:	d812      	bhi.n	800ac3a <_malloc_r+0xce>
 800ac14:	09bb      	lsrs	r3, r7, #6
 800ac16:	3338      	adds	r3, #56	; 0x38
 800ac18:	1c5a      	adds	r2, r3, #1
 800ac1a:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 800ac1e:	f1a2 0c08 	sub.w	ip, r2, #8
 800ac22:	6854      	ldr	r4, [r2, #4]
 800ac24:	4564      	cmp	r4, ip
 800ac26:	d006      	beq.n	800ac36 <_malloc_r+0xca>
 800ac28:	6862      	ldr	r2, [r4, #4]
 800ac2a:	f022 0203 	bic.w	r2, r2, #3
 800ac2e:	1bd0      	subs	r0, r2, r7
 800ac30:	280f      	cmp	r0, #15
 800ac32:	dd1c      	ble.n	800ac6e <_malloc_r+0x102>
 800ac34:	3b01      	subs	r3, #1
 800ac36:	3301      	adds	r3, #1
 800ac38:	e7cf      	b.n	800abda <_malloc_r+0x6e>
 800ac3a:	2b14      	cmp	r3, #20
 800ac3c:	d801      	bhi.n	800ac42 <_malloc_r+0xd6>
 800ac3e:	335b      	adds	r3, #91	; 0x5b
 800ac40:	e7ea      	b.n	800ac18 <_malloc_r+0xac>
 800ac42:	2b54      	cmp	r3, #84	; 0x54
 800ac44:	d802      	bhi.n	800ac4c <_malloc_r+0xe0>
 800ac46:	0b3b      	lsrs	r3, r7, #12
 800ac48:	336e      	adds	r3, #110	; 0x6e
 800ac4a:	e7e5      	b.n	800ac18 <_malloc_r+0xac>
 800ac4c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800ac50:	d802      	bhi.n	800ac58 <_malloc_r+0xec>
 800ac52:	0bfb      	lsrs	r3, r7, #15
 800ac54:	3377      	adds	r3, #119	; 0x77
 800ac56:	e7df      	b.n	800ac18 <_malloc_r+0xac>
 800ac58:	f240 5254 	movw	r2, #1364	; 0x554
 800ac5c:	4293      	cmp	r3, r2
 800ac5e:	d804      	bhi.n	800ac6a <_malloc_r+0xfe>
 800ac60:	0cbb      	lsrs	r3, r7, #18
 800ac62:	337c      	adds	r3, #124	; 0x7c
 800ac64:	e7d8      	b.n	800ac18 <_malloc_r+0xac>
 800ac66:	233f      	movs	r3, #63	; 0x3f
 800ac68:	e7d6      	b.n	800ac18 <_malloc_r+0xac>
 800ac6a:	237e      	movs	r3, #126	; 0x7e
 800ac6c:	e7d4      	b.n	800ac18 <_malloc_r+0xac>
 800ac6e:	2800      	cmp	r0, #0
 800ac70:	68e1      	ldr	r1, [r4, #12]
 800ac72:	db04      	blt.n	800ac7e <_malloc_r+0x112>
 800ac74:	68a3      	ldr	r3, [r4, #8]
 800ac76:	60d9      	str	r1, [r3, #12]
 800ac78:	608b      	str	r3, [r1, #8]
 800ac7a:	18a3      	adds	r3, r4, r2
 800ac7c:	e7a3      	b.n	800abc6 <_malloc_r+0x5a>
 800ac7e:	460c      	mov	r4, r1
 800ac80:	e7d0      	b.n	800ac24 <_malloc_r+0xb8>
 800ac82:	2800      	cmp	r0, #0
 800ac84:	e9c6 1104 	strd	r1, r1, [r6, #16]
 800ac88:	db07      	blt.n	800ac9a <_malloc_r+0x12e>
 800ac8a:	44a4      	add	ip, r4
 800ac8c:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800ac90:	f043 0301 	orr.w	r3, r3, #1
 800ac94:	f8cc 3004 	str.w	r3, [ip, #4]
 800ac98:	e799      	b.n	800abce <_malloc_r+0x62>
 800ac9a:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 800ac9e:	6870      	ldr	r0, [r6, #4]
 800aca0:	f080 8096 	bcs.w	800add0 <_malloc_r+0x264>
 800aca4:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 800aca8:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 800acac:	f04f 0c01 	mov.w	ip, #1
 800acb0:	3201      	adds	r2, #1
 800acb2:	fa0c fc0e 	lsl.w	ip, ip, lr
 800acb6:	ea4c 0000 	orr.w	r0, ip, r0
 800acba:	6070      	str	r0, [r6, #4]
 800acbc:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 800acc0:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 800acc4:	3808      	subs	r0, #8
 800acc6:	e9c4 c002 	strd	ip, r0, [r4, #8]
 800acca:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 800acce:	f8cc 400c 	str.w	r4, [ip, #12]
 800acd2:	2001      	movs	r0, #1
 800acd4:	109a      	asrs	r2, r3, #2
 800acd6:	fa00 f202 	lsl.w	r2, r0, r2
 800acda:	6870      	ldr	r0, [r6, #4]
 800acdc:	4290      	cmp	r0, r2
 800acde:	d326      	bcc.n	800ad2e <_malloc_r+0x1c2>
 800ace0:	4210      	tst	r0, r2
 800ace2:	d106      	bne.n	800acf2 <_malloc_r+0x186>
 800ace4:	f023 0303 	bic.w	r3, r3, #3
 800ace8:	0052      	lsls	r2, r2, #1
 800acea:	4210      	tst	r0, r2
 800acec:	f103 0304 	add.w	r3, r3, #4
 800acf0:	d0fa      	beq.n	800ace8 <_malloc_r+0x17c>
 800acf2:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 800acf6:	46c1      	mov	r9, r8
 800acf8:	469e      	mov	lr, r3
 800acfa:	f8d9 400c 	ldr.w	r4, [r9, #12]
 800acfe:	454c      	cmp	r4, r9
 800ad00:	f040 80ba 	bne.w	800ae78 <_malloc_r+0x30c>
 800ad04:	f10e 0e01 	add.w	lr, lr, #1
 800ad08:	f01e 0f03 	tst.w	lr, #3
 800ad0c:	f109 0908 	add.w	r9, r9, #8
 800ad10:	d1f3      	bne.n	800acfa <_malloc_r+0x18e>
 800ad12:	0798      	lsls	r0, r3, #30
 800ad14:	f040 80e4 	bne.w	800aee0 <_malloc_r+0x374>
 800ad18:	6873      	ldr	r3, [r6, #4]
 800ad1a:	ea23 0302 	bic.w	r3, r3, r2
 800ad1e:	6073      	str	r3, [r6, #4]
 800ad20:	6870      	ldr	r0, [r6, #4]
 800ad22:	0052      	lsls	r2, r2, #1
 800ad24:	4290      	cmp	r0, r2
 800ad26:	d302      	bcc.n	800ad2e <_malloc_r+0x1c2>
 800ad28:	2a00      	cmp	r2, #0
 800ad2a:	f040 80e6 	bne.w	800aefa <_malloc_r+0x38e>
 800ad2e:	f8d6 a008 	ldr.w	sl, [r6, #8]
 800ad32:	f8da 3004 	ldr.w	r3, [sl, #4]
 800ad36:	f023 0903 	bic.w	r9, r3, #3
 800ad3a:	45b9      	cmp	r9, r7
 800ad3c:	d304      	bcc.n	800ad48 <_malloc_r+0x1dc>
 800ad3e:	eba9 0207 	sub.w	r2, r9, r7
 800ad42:	2a0f      	cmp	r2, #15
 800ad44:	f300 8142 	bgt.w	800afcc <_malloc_r+0x460>
 800ad48:	4b46      	ldr	r3, [pc, #280]	; (800ae64 <_malloc_r+0x2f8>)
 800ad4a:	6819      	ldr	r1, [r3, #0]
 800ad4c:	3110      	adds	r1, #16
 800ad4e:	4439      	add	r1, r7
 800ad50:	2008      	movs	r0, #8
 800ad52:	9101      	str	r1, [sp, #4]
 800ad54:	f001 fdb4 	bl	800c8c0 <sysconf>
 800ad58:	4a43      	ldr	r2, [pc, #268]	; (800ae68 <_malloc_r+0x2fc>)
 800ad5a:	9901      	ldr	r1, [sp, #4]
 800ad5c:	6813      	ldr	r3, [r2, #0]
 800ad5e:	3301      	adds	r3, #1
 800ad60:	bf1f      	itttt	ne
 800ad62:	f101 31ff 	addne.w	r1, r1, #4294967295
 800ad66:	1809      	addne	r1, r1, r0
 800ad68:	4243      	negne	r3, r0
 800ad6a:	4019      	andne	r1, r3
 800ad6c:	4680      	mov	r8, r0
 800ad6e:	4628      	mov	r0, r5
 800ad70:	9101      	str	r1, [sp, #4]
 800ad72:	f000 fb13 	bl	800b39c <_sbrk_r>
 800ad76:	1c42      	adds	r2, r0, #1
 800ad78:	eb0a 0b09 	add.w	fp, sl, r9
 800ad7c:	4604      	mov	r4, r0
 800ad7e:	f000 80f8 	beq.w	800af72 <_malloc_r+0x406>
 800ad82:	4583      	cmp	fp, r0
 800ad84:	9901      	ldr	r1, [sp, #4]
 800ad86:	4a38      	ldr	r2, [pc, #224]	; (800ae68 <_malloc_r+0x2fc>)
 800ad88:	d902      	bls.n	800ad90 <_malloc_r+0x224>
 800ad8a:	45b2      	cmp	sl, r6
 800ad8c:	f040 80f1 	bne.w	800af72 <_malloc_r+0x406>
 800ad90:	4b36      	ldr	r3, [pc, #216]	; (800ae6c <_malloc_r+0x300>)
 800ad92:	6818      	ldr	r0, [r3, #0]
 800ad94:	45a3      	cmp	fp, r4
 800ad96:	eb00 0e01 	add.w	lr, r0, r1
 800ad9a:	f8c3 e000 	str.w	lr, [r3]
 800ad9e:	f108 3cff 	add.w	ip, r8, #4294967295
 800ada2:	f040 80ac 	bne.w	800aefe <_malloc_r+0x392>
 800ada6:	ea1b 0f0c 	tst.w	fp, ip
 800adaa:	f040 80a8 	bne.w	800aefe <_malloc_r+0x392>
 800adae:	68b2      	ldr	r2, [r6, #8]
 800adb0:	4449      	add	r1, r9
 800adb2:	f041 0101 	orr.w	r1, r1, #1
 800adb6:	6051      	str	r1, [r2, #4]
 800adb8:	4a2d      	ldr	r2, [pc, #180]	; (800ae70 <_malloc_r+0x304>)
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	6811      	ldr	r1, [r2, #0]
 800adbe:	428b      	cmp	r3, r1
 800adc0:	bf88      	it	hi
 800adc2:	6013      	strhi	r3, [r2, #0]
 800adc4:	4a2b      	ldr	r2, [pc, #172]	; (800ae74 <_malloc_r+0x308>)
 800adc6:	6811      	ldr	r1, [r2, #0]
 800adc8:	428b      	cmp	r3, r1
 800adca:	bf88      	it	hi
 800adcc:	6013      	strhi	r3, [r2, #0]
 800adce:	e0d0      	b.n	800af72 <_malloc_r+0x406>
 800add0:	f5bc 6f20 	cmp.w	ip, #2560	; 0xa00
 800add4:	ea4f 225c 	mov.w	r2, ip, lsr #9
 800add8:	d218      	bcs.n	800ae0c <_malloc_r+0x2a0>
 800adda:	ea4f 129c 	mov.w	r2, ip, lsr #6
 800adde:	3238      	adds	r2, #56	; 0x38
 800ade0:	f102 0e01 	add.w	lr, r2, #1
 800ade4:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 800ade8:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 800adec:	45f0      	cmp	r8, lr
 800adee:	d12b      	bne.n	800ae48 <_malloc_r+0x2dc>
 800adf0:	1092      	asrs	r2, r2, #2
 800adf2:	f04f 0c01 	mov.w	ip, #1
 800adf6:	fa0c f202 	lsl.w	r2, ip, r2
 800adfa:	4310      	orrs	r0, r2
 800adfc:	6070      	str	r0, [r6, #4]
 800adfe:	e9c4 e802 	strd	lr, r8, [r4, #8]
 800ae02:	f8c8 4008 	str.w	r4, [r8, #8]
 800ae06:	f8ce 400c 	str.w	r4, [lr, #12]
 800ae0a:	e762      	b.n	800acd2 <_malloc_r+0x166>
 800ae0c:	2a14      	cmp	r2, #20
 800ae0e:	d801      	bhi.n	800ae14 <_malloc_r+0x2a8>
 800ae10:	325b      	adds	r2, #91	; 0x5b
 800ae12:	e7e5      	b.n	800ade0 <_malloc_r+0x274>
 800ae14:	2a54      	cmp	r2, #84	; 0x54
 800ae16:	d803      	bhi.n	800ae20 <_malloc_r+0x2b4>
 800ae18:	ea4f 321c 	mov.w	r2, ip, lsr #12
 800ae1c:	326e      	adds	r2, #110	; 0x6e
 800ae1e:	e7df      	b.n	800ade0 <_malloc_r+0x274>
 800ae20:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800ae24:	d803      	bhi.n	800ae2e <_malloc_r+0x2c2>
 800ae26:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 800ae2a:	3277      	adds	r2, #119	; 0x77
 800ae2c:	e7d8      	b.n	800ade0 <_malloc_r+0x274>
 800ae2e:	f240 5e54 	movw	lr, #1364	; 0x554
 800ae32:	4572      	cmp	r2, lr
 800ae34:	bf9a      	itte	ls
 800ae36:	ea4f 429c 	movls.w	r2, ip, lsr #18
 800ae3a:	327c      	addls	r2, #124	; 0x7c
 800ae3c:	227e      	movhi	r2, #126	; 0x7e
 800ae3e:	e7cf      	b.n	800ade0 <_malloc_r+0x274>
 800ae40:	f8de e008 	ldr.w	lr, [lr, #8]
 800ae44:	45f0      	cmp	r8, lr
 800ae46:	d005      	beq.n	800ae54 <_malloc_r+0x2e8>
 800ae48:	f8de 2004 	ldr.w	r2, [lr, #4]
 800ae4c:	f022 0203 	bic.w	r2, r2, #3
 800ae50:	4562      	cmp	r2, ip
 800ae52:	d8f5      	bhi.n	800ae40 <_malloc_r+0x2d4>
 800ae54:	f8de 800c 	ldr.w	r8, [lr, #12]
 800ae58:	e7d1      	b.n	800adfe <_malloc_r+0x292>
 800ae5a:	bf00      	nop
 800ae5c:	200006a8 	.word	0x200006a8
 800ae60:	200006b0 	.word	0x200006b0
 800ae64:	20002038 	.word	0x20002038
 800ae68:	20000ab0 	.word	0x20000ab0
 800ae6c:	20002008 	.word	0x20002008
 800ae70:	20002030 	.word	0x20002030
 800ae74:	20002034 	.word	0x20002034
 800ae78:	6860      	ldr	r0, [r4, #4]
 800ae7a:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800ae7e:	f020 0003 	bic.w	r0, r0, #3
 800ae82:	eba0 0a07 	sub.w	sl, r0, r7
 800ae86:	f1ba 0f0f 	cmp.w	sl, #15
 800ae8a:	dd12      	ble.n	800aeb2 <_malloc_r+0x346>
 800ae8c:	68a3      	ldr	r3, [r4, #8]
 800ae8e:	19e2      	adds	r2, r4, r7
 800ae90:	f047 0701 	orr.w	r7, r7, #1
 800ae94:	6067      	str	r7, [r4, #4]
 800ae96:	f8c3 c00c 	str.w	ip, [r3, #12]
 800ae9a:	f8cc 3008 	str.w	r3, [ip, #8]
 800ae9e:	f04a 0301 	orr.w	r3, sl, #1
 800aea2:	e9c6 2204 	strd	r2, r2, [r6, #16]
 800aea6:	e9c2 1102 	strd	r1, r1, [r2, #8]
 800aeaa:	6053      	str	r3, [r2, #4]
 800aeac:	f844 a000 	str.w	sl, [r4, r0]
 800aeb0:	e68d      	b.n	800abce <_malloc_r+0x62>
 800aeb2:	f1ba 0f00 	cmp.w	sl, #0
 800aeb6:	db11      	blt.n	800aedc <_malloc_r+0x370>
 800aeb8:	4420      	add	r0, r4
 800aeba:	6843      	ldr	r3, [r0, #4]
 800aebc:	f043 0301 	orr.w	r3, r3, #1
 800aec0:	6043      	str	r3, [r0, #4]
 800aec2:	f854 3f08 	ldr.w	r3, [r4, #8]!
 800aec6:	4628      	mov	r0, r5
 800aec8:	f8c3 c00c 	str.w	ip, [r3, #12]
 800aecc:	f8cc 3008 	str.w	r3, [ip, #8]
 800aed0:	f000 f8ba 	bl	800b048 <__malloc_unlock>
 800aed4:	4620      	mov	r0, r4
 800aed6:	b003      	add	sp, #12
 800aed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aedc:	4664      	mov	r4, ip
 800aede:	e70e      	b.n	800acfe <_malloc_r+0x192>
 800aee0:	f858 0908 	ldr.w	r0, [r8], #-8
 800aee4:	4540      	cmp	r0, r8
 800aee6:	f103 33ff 	add.w	r3, r3, #4294967295
 800aeea:	f43f af12 	beq.w	800ad12 <_malloc_r+0x1a6>
 800aeee:	e717      	b.n	800ad20 <_malloc_r+0x1b4>
 800aef0:	3304      	adds	r3, #4
 800aef2:	0052      	lsls	r2, r2, #1
 800aef4:	4210      	tst	r0, r2
 800aef6:	d0fb      	beq.n	800aef0 <_malloc_r+0x384>
 800aef8:	e6fb      	b.n	800acf2 <_malloc_r+0x186>
 800aefa:	4673      	mov	r3, lr
 800aefc:	e7fa      	b.n	800aef4 <_malloc_r+0x388>
 800aefe:	6810      	ldr	r0, [r2, #0]
 800af00:	3001      	adds	r0, #1
 800af02:	bf1b      	ittet	ne
 800af04:	eba4 0b0b 	subne.w	fp, r4, fp
 800af08:	eb0b 020e 	addne.w	r2, fp, lr
 800af0c:	6014      	streq	r4, [r2, #0]
 800af0e:	601a      	strne	r2, [r3, #0]
 800af10:	f014 0b07 	ands.w	fp, r4, #7
 800af14:	bf1a      	itte	ne
 800af16:	f1cb 0008 	rsbne	r0, fp, #8
 800af1a:	1824      	addne	r4, r4, r0
 800af1c:	4658      	moveq	r0, fp
 800af1e:	1862      	adds	r2, r4, r1
 800af20:	ea02 010c 	and.w	r1, r2, ip
 800af24:	4480      	add	r8, r0
 800af26:	eba8 0801 	sub.w	r8, r8, r1
 800af2a:	ea08 080c 	and.w	r8, r8, ip
 800af2e:	4641      	mov	r1, r8
 800af30:	4628      	mov	r0, r5
 800af32:	9201      	str	r2, [sp, #4]
 800af34:	f000 fa32 	bl	800b39c <_sbrk_r>
 800af38:	1c43      	adds	r3, r0, #1
 800af3a:	9a01      	ldr	r2, [sp, #4]
 800af3c:	4b28      	ldr	r3, [pc, #160]	; (800afe0 <_malloc_r+0x474>)
 800af3e:	d107      	bne.n	800af50 <_malloc_r+0x3e4>
 800af40:	f1bb 0f00 	cmp.w	fp, #0
 800af44:	d023      	beq.n	800af8e <_malloc_r+0x422>
 800af46:	f1ab 0008 	sub.w	r0, fp, #8
 800af4a:	4410      	add	r0, r2
 800af4c:	f04f 0800 	mov.w	r8, #0
 800af50:	681a      	ldr	r2, [r3, #0]
 800af52:	60b4      	str	r4, [r6, #8]
 800af54:	1b00      	subs	r0, r0, r4
 800af56:	4440      	add	r0, r8
 800af58:	4442      	add	r2, r8
 800af5a:	f040 0001 	orr.w	r0, r0, #1
 800af5e:	45b2      	cmp	sl, r6
 800af60:	601a      	str	r2, [r3, #0]
 800af62:	6060      	str	r0, [r4, #4]
 800af64:	f43f af28 	beq.w	800adb8 <_malloc_r+0x24c>
 800af68:	f1b9 0f0f 	cmp.w	r9, #15
 800af6c:	d812      	bhi.n	800af94 <_malloc_r+0x428>
 800af6e:	2301      	movs	r3, #1
 800af70:	6063      	str	r3, [r4, #4]
 800af72:	68b3      	ldr	r3, [r6, #8]
 800af74:	685b      	ldr	r3, [r3, #4]
 800af76:	f023 0303 	bic.w	r3, r3, #3
 800af7a:	42bb      	cmp	r3, r7
 800af7c:	eba3 0207 	sub.w	r2, r3, r7
 800af80:	d301      	bcc.n	800af86 <_malloc_r+0x41a>
 800af82:	2a0f      	cmp	r2, #15
 800af84:	dc22      	bgt.n	800afcc <_malloc_r+0x460>
 800af86:	4628      	mov	r0, r5
 800af88:	f000 f85e 	bl	800b048 <__malloc_unlock>
 800af8c:	e5fa      	b.n	800ab84 <_malloc_r+0x18>
 800af8e:	4610      	mov	r0, r2
 800af90:	46d8      	mov	r8, fp
 800af92:	e7dd      	b.n	800af50 <_malloc_r+0x3e4>
 800af94:	f8da 2004 	ldr.w	r2, [sl, #4]
 800af98:	f1a9 090c 	sub.w	r9, r9, #12
 800af9c:	f029 0907 	bic.w	r9, r9, #7
 800afa0:	f002 0201 	and.w	r2, r2, #1
 800afa4:	ea42 0209 	orr.w	r2, r2, r9
 800afa8:	f8ca 2004 	str.w	r2, [sl, #4]
 800afac:	2105      	movs	r1, #5
 800afae:	eb0a 0209 	add.w	r2, sl, r9
 800afb2:	f1b9 0f0f 	cmp.w	r9, #15
 800afb6:	e9c2 1101 	strd	r1, r1, [r2, #4]
 800afba:	f67f aefd 	bls.w	800adb8 <_malloc_r+0x24c>
 800afbe:	f10a 0108 	add.w	r1, sl, #8
 800afc2:	4628      	mov	r0, r5
 800afc4:	f7ff fb2e 	bl	800a624 <_free_r>
 800afc8:	4b05      	ldr	r3, [pc, #20]	; (800afe0 <_malloc_r+0x474>)
 800afca:	e6f5      	b.n	800adb8 <_malloc_r+0x24c>
 800afcc:	68b4      	ldr	r4, [r6, #8]
 800afce:	f047 0301 	orr.w	r3, r7, #1
 800afd2:	4427      	add	r7, r4
 800afd4:	f042 0201 	orr.w	r2, r2, #1
 800afd8:	6063      	str	r3, [r4, #4]
 800afda:	60b7      	str	r7, [r6, #8]
 800afdc:	607a      	str	r2, [r7, #4]
 800afde:	e5f6      	b.n	800abce <_malloc_r+0x62>
 800afe0:	20002008 	.word	0x20002008

0800afe4 <__ascii_mbtowc>:
 800afe4:	b082      	sub	sp, #8
 800afe6:	b901      	cbnz	r1, 800afea <__ascii_mbtowc+0x6>
 800afe8:	a901      	add	r1, sp, #4
 800afea:	b142      	cbz	r2, 800affe <__ascii_mbtowc+0x1a>
 800afec:	b14b      	cbz	r3, 800b002 <__ascii_mbtowc+0x1e>
 800afee:	7813      	ldrb	r3, [r2, #0]
 800aff0:	600b      	str	r3, [r1, #0]
 800aff2:	7812      	ldrb	r2, [r2, #0]
 800aff4:	1e10      	subs	r0, r2, #0
 800aff6:	bf18      	it	ne
 800aff8:	2001      	movne	r0, #1
 800affa:	b002      	add	sp, #8
 800affc:	4770      	bx	lr
 800affe:	4610      	mov	r0, r2
 800b000:	e7fb      	b.n	800affa <__ascii_mbtowc+0x16>
 800b002:	f06f 0001 	mvn.w	r0, #1
 800b006:	e7f8      	b.n	800affa <__ascii_mbtowc+0x16>

0800b008 <memmove>:
 800b008:	4288      	cmp	r0, r1
 800b00a:	b510      	push	{r4, lr}
 800b00c:	eb01 0402 	add.w	r4, r1, r2
 800b010:	d902      	bls.n	800b018 <memmove+0x10>
 800b012:	4284      	cmp	r4, r0
 800b014:	4623      	mov	r3, r4
 800b016:	d807      	bhi.n	800b028 <memmove+0x20>
 800b018:	1e43      	subs	r3, r0, #1
 800b01a:	42a1      	cmp	r1, r4
 800b01c:	d008      	beq.n	800b030 <memmove+0x28>
 800b01e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b022:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b026:	e7f8      	b.n	800b01a <memmove+0x12>
 800b028:	4402      	add	r2, r0
 800b02a:	4601      	mov	r1, r0
 800b02c:	428a      	cmp	r2, r1
 800b02e:	d100      	bne.n	800b032 <memmove+0x2a>
 800b030:	bd10      	pop	{r4, pc}
 800b032:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b036:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b03a:	e7f7      	b.n	800b02c <memmove+0x24>

0800b03c <__malloc_lock>:
 800b03c:	4801      	ldr	r0, [pc, #4]	; (800b044 <__malloc_lock+0x8>)
 800b03e:	f7ff bd27 	b.w	800aa90 <__retarget_lock_acquire_recursive>
 800b042:	bf00      	nop
 800b044:	20002005 	.word	0x20002005

0800b048 <__malloc_unlock>:
 800b048:	4801      	ldr	r0, [pc, #4]	; (800b050 <__malloc_unlock+0x8>)
 800b04a:	f7ff bd22 	b.w	800aa92 <__retarget_lock_release_recursive>
 800b04e:	bf00      	nop
 800b050:	20002005 	.word	0x20002005

0800b054 <_realloc_r>:
 800b054:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b058:	4681      	mov	r9, r0
 800b05a:	460c      	mov	r4, r1
 800b05c:	b929      	cbnz	r1, 800b06a <_realloc_r+0x16>
 800b05e:	4611      	mov	r1, r2
 800b060:	b003      	add	sp, #12
 800b062:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b066:	f7ff bd81 	b.w	800ab6c <_malloc_r>
 800b06a:	9201      	str	r2, [sp, #4]
 800b06c:	f7ff ffe6 	bl	800b03c <__malloc_lock>
 800b070:	9a01      	ldr	r2, [sp, #4]
 800b072:	f102 080b 	add.w	r8, r2, #11
 800b076:	f1b8 0f16 	cmp.w	r8, #22
 800b07a:	d90b      	bls.n	800b094 <_realloc_r+0x40>
 800b07c:	f038 0807 	bics.w	r8, r8, #7
 800b080:	d50a      	bpl.n	800b098 <_realloc_r+0x44>
 800b082:	230c      	movs	r3, #12
 800b084:	f8c9 3000 	str.w	r3, [r9]
 800b088:	f04f 0b00 	mov.w	fp, #0
 800b08c:	4658      	mov	r0, fp
 800b08e:	b003      	add	sp, #12
 800b090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b094:	f04f 0810 	mov.w	r8, #16
 800b098:	4590      	cmp	r8, r2
 800b09a:	d3f2      	bcc.n	800b082 <_realloc_r+0x2e>
 800b09c:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800b0a0:	f025 0603 	bic.w	r6, r5, #3
 800b0a4:	45b0      	cmp	r8, r6
 800b0a6:	f1a4 0a08 	sub.w	sl, r4, #8
 800b0aa:	f340 816e 	ble.w	800b38a <_realloc_r+0x336>
 800b0ae:	499b      	ldr	r1, [pc, #620]	; (800b31c <_realloc_r+0x2c8>)
 800b0b0:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800b0b4:	eb0a 0306 	add.w	r3, sl, r6
 800b0b8:	459c      	cmp	ip, r3
 800b0ba:	6859      	ldr	r1, [r3, #4]
 800b0bc:	d005      	beq.n	800b0ca <_realloc_r+0x76>
 800b0be:	f021 0001 	bic.w	r0, r1, #1
 800b0c2:	4418      	add	r0, r3
 800b0c4:	6840      	ldr	r0, [r0, #4]
 800b0c6:	07c7      	lsls	r7, r0, #31
 800b0c8:	d427      	bmi.n	800b11a <_realloc_r+0xc6>
 800b0ca:	f021 0103 	bic.w	r1, r1, #3
 800b0ce:	459c      	cmp	ip, r3
 800b0d0:	eb06 0701 	add.w	r7, r6, r1
 800b0d4:	d119      	bne.n	800b10a <_realloc_r+0xb6>
 800b0d6:	f108 0010 	add.w	r0, r8, #16
 800b0da:	42b8      	cmp	r0, r7
 800b0dc:	dc1f      	bgt.n	800b11e <_realloc_r+0xca>
 800b0de:	eb0a 0308 	add.w	r3, sl, r8
 800b0e2:	4a8e      	ldr	r2, [pc, #568]	; (800b31c <_realloc_r+0x2c8>)
 800b0e4:	eba7 0708 	sub.w	r7, r7, r8
 800b0e8:	f047 0701 	orr.w	r7, r7, #1
 800b0ec:	6093      	str	r3, [r2, #8]
 800b0ee:	605f      	str	r7, [r3, #4]
 800b0f0:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800b0f4:	f003 0301 	and.w	r3, r3, #1
 800b0f8:	ea43 0308 	orr.w	r3, r3, r8
 800b0fc:	f844 3c04 	str.w	r3, [r4, #-4]
 800b100:	4648      	mov	r0, r9
 800b102:	f7ff ffa1 	bl	800b048 <__malloc_unlock>
 800b106:	46a3      	mov	fp, r4
 800b108:	e7c0      	b.n	800b08c <_realloc_r+0x38>
 800b10a:	45b8      	cmp	r8, r7
 800b10c:	dc07      	bgt.n	800b11e <_realloc_r+0xca>
 800b10e:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800b112:	60da      	str	r2, [r3, #12]
 800b114:	6093      	str	r3, [r2, #8]
 800b116:	4655      	mov	r5, sl
 800b118:	e07f      	b.n	800b21a <_realloc_r+0x1c6>
 800b11a:	2100      	movs	r1, #0
 800b11c:	460b      	mov	r3, r1
 800b11e:	07e8      	lsls	r0, r5, #31
 800b120:	f100 80e5 	bmi.w	800b2ee <_realloc_r+0x29a>
 800b124:	f854 5c08 	ldr.w	r5, [r4, #-8]
 800b128:	ebaa 0505 	sub.w	r5, sl, r5
 800b12c:	6868      	ldr	r0, [r5, #4]
 800b12e:	f020 0003 	bic.w	r0, r0, #3
 800b132:	eb00 0b06 	add.w	fp, r0, r6
 800b136:	2b00      	cmp	r3, #0
 800b138:	f000 80a5 	beq.w	800b286 <_realloc_r+0x232>
 800b13c:	459c      	cmp	ip, r3
 800b13e:	eb01 070b 	add.w	r7, r1, fp
 800b142:	d14a      	bne.n	800b1da <_realloc_r+0x186>
 800b144:	f108 0310 	add.w	r3, r8, #16
 800b148:	42bb      	cmp	r3, r7
 800b14a:	f300 809c 	bgt.w	800b286 <_realloc_r+0x232>
 800b14e:	46ab      	mov	fp, r5
 800b150:	68eb      	ldr	r3, [r5, #12]
 800b152:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 800b156:	60d3      	str	r3, [r2, #12]
 800b158:	609a      	str	r2, [r3, #8]
 800b15a:	1f32      	subs	r2, r6, #4
 800b15c:	2a24      	cmp	r2, #36	; 0x24
 800b15e:	d837      	bhi.n	800b1d0 <_realloc_r+0x17c>
 800b160:	2a13      	cmp	r2, #19
 800b162:	d933      	bls.n	800b1cc <_realloc_r+0x178>
 800b164:	6823      	ldr	r3, [r4, #0]
 800b166:	60ab      	str	r3, [r5, #8]
 800b168:	6863      	ldr	r3, [r4, #4]
 800b16a:	60eb      	str	r3, [r5, #12]
 800b16c:	2a1b      	cmp	r2, #27
 800b16e:	d81b      	bhi.n	800b1a8 <_realloc_r+0x154>
 800b170:	3408      	adds	r4, #8
 800b172:	f105 0310 	add.w	r3, r5, #16
 800b176:	6822      	ldr	r2, [r4, #0]
 800b178:	601a      	str	r2, [r3, #0]
 800b17a:	6862      	ldr	r2, [r4, #4]
 800b17c:	605a      	str	r2, [r3, #4]
 800b17e:	68a2      	ldr	r2, [r4, #8]
 800b180:	609a      	str	r2, [r3, #8]
 800b182:	eb05 0308 	add.w	r3, r5, r8
 800b186:	4a65      	ldr	r2, [pc, #404]	; (800b31c <_realloc_r+0x2c8>)
 800b188:	eba7 0708 	sub.w	r7, r7, r8
 800b18c:	f047 0701 	orr.w	r7, r7, #1
 800b190:	6093      	str	r3, [r2, #8]
 800b192:	605f      	str	r7, [r3, #4]
 800b194:	686b      	ldr	r3, [r5, #4]
 800b196:	f003 0301 	and.w	r3, r3, #1
 800b19a:	ea43 0308 	orr.w	r3, r3, r8
 800b19e:	606b      	str	r3, [r5, #4]
 800b1a0:	4648      	mov	r0, r9
 800b1a2:	f7ff ff51 	bl	800b048 <__malloc_unlock>
 800b1a6:	e771      	b.n	800b08c <_realloc_r+0x38>
 800b1a8:	68a3      	ldr	r3, [r4, #8]
 800b1aa:	612b      	str	r3, [r5, #16]
 800b1ac:	68e3      	ldr	r3, [r4, #12]
 800b1ae:	616b      	str	r3, [r5, #20]
 800b1b0:	2a24      	cmp	r2, #36	; 0x24
 800b1b2:	bf01      	itttt	eq
 800b1b4:	6923      	ldreq	r3, [r4, #16]
 800b1b6:	61ab      	streq	r3, [r5, #24]
 800b1b8:	6962      	ldreq	r2, [r4, #20]
 800b1ba:	61ea      	streq	r2, [r5, #28]
 800b1bc:	bf19      	ittee	ne
 800b1be:	3410      	addne	r4, #16
 800b1c0:	f105 0318 	addne.w	r3, r5, #24
 800b1c4:	f105 0320 	addeq.w	r3, r5, #32
 800b1c8:	3418      	addeq	r4, #24
 800b1ca:	e7d4      	b.n	800b176 <_realloc_r+0x122>
 800b1cc:	465b      	mov	r3, fp
 800b1ce:	e7d2      	b.n	800b176 <_realloc_r+0x122>
 800b1d0:	4621      	mov	r1, r4
 800b1d2:	4658      	mov	r0, fp
 800b1d4:	f7ff ff18 	bl	800b008 <memmove>
 800b1d8:	e7d3      	b.n	800b182 <_realloc_r+0x12e>
 800b1da:	45b8      	cmp	r8, r7
 800b1dc:	dc53      	bgt.n	800b286 <_realloc_r+0x232>
 800b1de:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800b1e2:	4628      	mov	r0, r5
 800b1e4:	60da      	str	r2, [r3, #12]
 800b1e6:	6093      	str	r3, [r2, #8]
 800b1e8:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800b1ec:	68eb      	ldr	r3, [r5, #12]
 800b1ee:	60d3      	str	r3, [r2, #12]
 800b1f0:	609a      	str	r2, [r3, #8]
 800b1f2:	1f32      	subs	r2, r6, #4
 800b1f4:	2a24      	cmp	r2, #36	; 0x24
 800b1f6:	d842      	bhi.n	800b27e <_realloc_r+0x22a>
 800b1f8:	2a13      	cmp	r2, #19
 800b1fa:	d908      	bls.n	800b20e <_realloc_r+0x1ba>
 800b1fc:	6823      	ldr	r3, [r4, #0]
 800b1fe:	60ab      	str	r3, [r5, #8]
 800b200:	6863      	ldr	r3, [r4, #4]
 800b202:	60eb      	str	r3, [r5, #12]
 800b204:	2a1b      	cmp	r2, #27
 800b206:	d828      	bhi.n	800b25a <_realloc_r+0x206>
 800b208:	3408      	adds	r4, #8
 800b20a:	f105 0010 	add.w	r0, r5, #16
 800b20e:	6823      	ldr	r3, [r4, #0]
 800b210:	6003      	str	r3, [r0, #0]
 800b212:	6863      	ldr	r3, [r4, #4]
 800b214:	6043      	str	r3, [r0, #4]
 800b216:	68a3      	ldr	r3, [r4, #8]
 800b218:	6083      	str	r3, [r0, #8]
 800b21a:	686b      	ldr	r3, [r5, #4]
 800b21c:	eba7 0008 	sub.w	r0, r7, r8
 800b220:	280f      	cmp	r0, #15
 800b222:	f003 0301 	and.w	r3, r3, #1
 800b226:	eb05 0207 	add.w	r2, r5, r7
 800b22a:	f240 80b0 	bls.w	800b38e <_realloc_r+0x33a>
 800b22e:	eb05 0108 	add.w	r1, r5, r8
 800b232:	ea48 0303 	orr.w	r3, r8, r3
 800b236:	f040 0001 	orr.w	r0, r0, #1
 800b23a:	606b      	str	r3, [r5, #4]
 800b23c:	6048      	str	r0, [r1, #4]
 800b23e:	6853      	ldr	r3, [r2, #4]
 800b240:	f043 0301 	orr.w	r3, r3, #1
 800b244:	6053      	str	r3, [r2, #4]
 800b246:	3108      	adds	r1, #8
 800b248:	4648      	mov	r0, r9
 800b24a:	f7ff f9eb 	bl	800a624 <_free_r>
 800b24e:	4648      	mov	r0, r9
 800b250:	f7ff fefa 	bl	800b048 <__malloc_unlock>
 800b254:	f105 0b08 	add.w	fp, r5, #8
 800b258:	e718      	b.n	800b08c <_realloc_r+0x38>
 800b25a:	68a3      	ldr	r3, [r4, #8]
 800b25c:	612b      	str	r3, [r5, #16]
 800b25e:	68e3      	ldr	r3, [r4, #12]
 800b260:	616b      	str	r3, [r5, #20]
 800b262:	2a24      	cmp	r2, #36	; 0x24
 800b264:	bf01      	itttt	eq
 800b266:	6923      	ldreq	r3, [r4, #16]
 800b268:	61ab      	streq	r3, [r5, #24]
 800b26a:	6963      	ldreq	r3, [r4, #20]
 800b26c:	61eb      	streq	r3, [r5, #28]
 800b26e:	bf19      	ittee	ne
 800b270:	3410      	addne	r4, #16
 800b272:	f105 0018 	addne.w	r0, r5, #24
 800b276:	f105 0020 	addeq.w	r0, r5, #32
 800b27a:	3418      	addeq	r4, #24
 800b27c:	e7c7      	b.n	800b20e <_realloc_r+0x1ba>
 800b27e:	4621      	mov	r1, r4
 800b280:	f7ff fec2 	bl	800b008 <memmove>
 800b284:	e7c9      	b.n	800b21a <_realloc_r+0x1c6>
 800b286:	45d8      	cmp	r8, fp
 800b288:	dc31      	bgt.n	800b2ee <_realloc_r+0x29a>
 800b28a:	4628      	mov	r0, r5
 800b28c:	68eb      	ldr	r3, [r5, #12]
 800b28e:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800b292:	60d3      	str	r3, [r2, #12]
 800b294:	609a      	str	r2, [r3, #8]
 800b296:	1f32      	subs	r2, r6, #4
 800b298:	2a24      	cmp	r2, #36	; 0x24
 800b29a:	d824      	bhi.n	800b2e6 <_realloc_r+0x292>
 800b29c:	2a13      	cmp	r2, #19
 800b29e:	d908      	bls.n	800b2b2 <_realloc_r+0x25e>
 800b2a0:	6823      	ldr	r3, [r4, #0]
 800b2a2:	60ab      	str	r3, [r5, #8]
 800b2a4:	6863      	ldr	r3, [r4, #4]
 800b2a6:	60eb      	str	r3, [r5, #12]
 800b2a8:	2a1b      	cmp	r2, #27
 800b2aa:	d80a      	bhi.n	800b2c2 <_realloc_r+0x26e>
 800b2ac:	3408      	adds	r4, #8
 800b2ae:	f105 0010 	add.w	r0, r5, #16
 800b2b2:	6823      	ldr	r3, [r4, #0]
 800b2b4:	6003      	str	r3, [r0, #0]
 800b2b6:	6863      	ldr	r3, [r4, #4]
 800b2b8:	6043      	str	r3, [r0, #4]
 800b2ba:	68a3      	ldr	r3, [r4, #8]
 800b2bc:	6083      	str	r3, [r0, #8]
 800b2be:	465f      	mov	r7, fp
 800b2c0:	e7ab      	b.n	800b21a <_realloc_r+0x1c6>
 800b2c2:	68a3      	ldr	r3, [r4, #8]
 800b2c4:	612b      	str	r3, [r5, #16]
 800b2c6:	68e3      	ldr	r3, [r4, #12]
 800b2c8:	616b      	str	r3, [r5, #20]
 800b2ca:	2a24      	cmp	r2, #36	; 0x24
 800b2cc:	bf01      	itttt	eq
 800b2ce:	6923      	ldreq	r3, [r4, #16]
 800b2d0:	61ab      	streq	r3, [r5, #24]
 800b2d2:	6963      	ldreq	r3, [r4, #20]
 800b2d4:	61eb      	streq	r3, [r5, #28]
 800b2d6:	bf19      	ittee	ne
 800b2d8:	3410      	addne	r4, #16
 800b2da:	f105 0018 	addne.w	r0, r5, #24
 800b2de:	f105 0020 	addeq.w	r0, r5, #32
 800b2e2:	3418      	addeq	r4, #24
 800b2e4:	e7e5      	b.n	800b2b2 <_realloc_r+0x25e>
 800b2e6:	4621      	mov	r1, r4
 800b2e8:	f7ff fe8e 	bl	800b008 <memmove>
 800b2ec:	e7e7      	b.n	800b2be <_realloc_r+0x26a>
 800b2ee:	4611      	mov	r1, r2
 800b2f0:	4648      	mov	r0, r9
 800b2f2:	f7ff fc3b 	bl	800ab6c <_malloc_r>
 800b2f6:	4683      	mov	fp, r0
 800b2f8:	2800      	cmp	r0, #0
 800b2fa:	f43f af51 	beq.w	800b1a0 <_realloc_r+0x14c>
 800b2fe:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800b302:	f023 0301 	bic.w	r3, r3, #1
 800b306:	4453      	add	r3, sl
 800b308:	f1a0 0208 	sub.w	r2, r0, #8
 800b30c:	4293      	cmp	r3, r2
 800b30e:	d107      	bne.n	800b320 <_realloc_r+0x2cc>
 800b310:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800b314:	f027 0703 	bic.w	r7, r7, #3
 800b318:	4437      	add	r7, r6
 800b31a:	e6fc      	b.n	800b116 <_realloc_r+0xc2>
 800b31c:	200006a8 	.word	0x200006a8
 800b320:	1f32      	subs	r2, r6, #4
 800b322:	2a24      	cmp	r2, #36	; 0x24
 800b324:	d82d      	bhi.n	800b382 <_realloc_r+0x32e>
 800b326:	2a13      	cmp	r2, #19
 800b328:	d928      	bls.n	800b37c <_realloc_r+0x328>
 800b32a:	6823      	ldr	r3, [r4, #0]
 800b32c:	6003      	str	r3, [r0, #0]
 800b32e:	6863      	ldr	r3, [r4, #4]
 800b330:	6043      	str	r3, [r0, #4]
 800b332:	2a1b      	cmp	r2, #27
 800b334:	d80e      	bhi.n	800b354 <_realloc_r+0x300>
 800b336:	f104 0208 	add.w	r2, r4, #8
 800b33a:	f100 0308 	add.w	r3, r0, #8
 800b33e:	6811      	ldr	r1, [r2, #0]
 800b340:	6019      	str	r1, [r3, #0]
 800b342:	6851      	ldr	r1, [r2, #4]
 800b344:	6059      	str	r1, [r3, #4]
 800b346:	6892      	ldr	r2, [r2, #8]
 800b348:	609a      	str	r2, [r3, #8]
 800b34a:	4621      	mov	r1, r4
 800b34c:	4648      	mov	r0, r9
 800b34e:	f7ff f969 	bl	800a624 <_free_r>
 800b352:	e725      	b.n	800b1a0 <_realloc_r+0x14c>
 800b354:	68a3      	ldr	r3, [r4, #8]
 800b356:	6083      	str	r3, [r0, #8]
 800b358:	68e3      	ldr	r3, [r4, #12]
 800b35a:	60c3      	str	r3, [r0, #12]
 800b35c:	2a24      	cmp	r2, #36	; 0x24
 800b35e:	bf01      	itttt	eq
 800b360:	6923      	ldreq	r3, [r4, #16]
 800b362:	6103      	streq	r3, [r0, #16]
 800b364:	6961      	ldreq	r1, [r4, #20]
 800b366:	6141      	streq	r1, [r0, #20]
 800b368:	bf19      	ittee	ne
 800b36a:	f104 0210 	addne.w	r2, r4, #16
 800b36e:	f100 0310 	addne.w	r3, r0, #16
 800b372:	f104 0218 	addeq.w	r2, r4, #24
 800b376:	f100 0318 	addeq.w	r3, r0, #24
 800b37a:	e7e0      	b.n	800b33e <_realloc_r+0x2ea>
 800b37c:	4603      	mov	r3, r0
 800b37e:	4622      	mov	r2, r4
 800b380:	e7dd      	b.n	800b33e <_realloc_r+0x2ea>
 800b382:	4621      	mov	r1, r4
 800b384:	f7ff fe40 	bl	800b008 <memmove>
 800b388:	e7df      	b.n	800b34a <_realloc_r+0x2f6>
 800b38a:	4637      	mov	r7, r6
 800b38c:	e6c3      	b.n	800b116 <_realloc_r+0xc2>
 800b38e:	431f      	orrs	r7, r3
 800b390:	606f      	str	r7, [r5, #4]
 800b392:	6853      	ldr	r3, [r2, #4]
 800b394:	f043 0301 	orr.w	r3, r3, #1
 800b398:	6053      	str	r3, [r2, #4]
 800b39a:	e758      	b.n	800b24e <_realloc_r+0x1fa>

0800b39c <_sbrk_r>:
 800b39c:	b538      	push	{r3, r4, r5, lr}
 800b39e:	4d06      	ldr	r5, [pc, #24]	; (800b3b8 <_sbrk_r+0x1c>)
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	4604      	mov	r4, r0
 800b3a4:	4608      	mov	r0, r1
 800b3a6:	602b      	str	r3, [r5, #0]
 800b3a8:	f7f6 f8a6 	bl	80014f8 <_sbrk>
 800b3ac:	1c43      	adds	r3, r0, #1
 800b3ae:	d102      	bne.n	800b3b6 <_sbrk_r+0x1a>
 800b3b0:	682b      	ldr	r3, [r5, #0]
 800b3b2:	b103      	cbz	r3, 800b3b6 <_sbrk_r+0x1a>
 800b3b4:	6023      	str	r3, [r4, #0]
 800b3b6:	bd38      	pop	{r3, r4, r5, pc}
 800b3b8:	2000203c 	.word	0x2000203c

0800b3bc <_raise_r>:
 800b3bc:	291f      	cmp	r1, #31
 800b3be:	b538      	push	{r3, r4, r5, lr}
 800b3c0:	4604      	mov	r4, r0
 800b3c2:	460d      	mov	r5, r1
 800b3c4:	d904      	bls.n	800b3d0 <_raise_r+0x14>
 800b3c6:	2316      	movs	r3, #22
 800b3c8:	6003      	str	r3, [r0, #0]
 800b3ca:	f04f 30ff 	mov.w	r0, #4294967295
 800b3ce:	bd38      	pop	{r3, r4, r5, pc}
 800b3d0:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 800b3d4:	b112      	cbz	r2, 800b3dc <_raise_r+0x20>
 800b3d6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b3da:	b94b      	cbnz	r3, 800b3f0 <_raise_r+0x34>
 800b3dc:	4620      	mov	r0, r4
 800b3de:	f000 f831 	bl	800b444 <_getpid_r>
 800b3e2:	462a      	mov	r2, r5
 800b3e4:	4601      	mov	r1, r0
 800b3e6:	4620      	mov	r0, r4
 800b3e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b3ec:	f000 b818 	b.w	800b420 <_kill_r>
 800b3f0:	2b01      	cmp	r3, #1
 800b3f2:	d00a      	beq.n	800b40a <_raise_r+0x4e>
 800b3f4:	1c59      	adds	r1, r3, #1
 800b3f6:	d103      	bne.n	800b400 <_raise_r+0x44>
 800b3f8:	2316      	movs	r3, #22
 800b3fa:	6003      	str	r3, [r0, #0]
 800b3fc:	2001      	movs	r0, #1
 800b3fe:	e7e6      	b.n	800b3ce <_raise_r+0x12>
 800b400:	2400      	movs	r4, #0
 800b402:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b406:	4628      	mov	r0, r5
 800b408:	4798      	blx	r3
 800b40a:	2000      	movs	r0, #0
 800b40c:	e7df      	b.n	800b3ce <_raise_r+0x12>
	...

0800b410 <raise>:
 800b410:	4b02      	ldr	r3, [pc, #8]	; (800b41c <raise+0xc>)
 800b412:	4601      	mov	r1, r0
 800b414:	6818      	ldr	r0, [r3, #0]
 800b416:	f7ff bfd1 	b.w	800b3bc <_raise_r>
 800b41a:	bf00      	nop
 800b41c:	20000108 	.word	0x20000108

0800b420 <_kill_r>:
 800b420:	b538      	push	{r3, r4, r5, lr}
 800b422:	4d07      	ldr	r5, [pc, #28]	; (800b440 <_kill_r+0x20>)
 800b424:	2300      	movs	r3, #0
 800b426:	4604      	mov	r4, r0
 800b428:	4608      	mov	r0, r1
 800b42a:	4611      	mov	r1, r2
 800b42c:	602b      	str	r3, [r5, #0]
 800b42e:	f7f5 ffdb 	bl	80013e8 <_kill>
 800b432:	1c43      	adds	r3, r0, #1
 800b434:	d102      	bne.n	800b43c <_kill_r+0x1c>
 800b436:	682b      	ldr	r3, [r5, #0]
 800b438:	b103      	cbz	r3, 800b43c <_kill_r+0x1c>
 800b43a:	6023      	str	r3, [r4, #0]
 800b43c:	bd38      	pop	{r3, r4, r5, pc}
 800b43e:	bf00      	nop
 800b440:	2000203c 	.word	0x2000203c

0800b444 <_getpid_r>:
 800b444:	f7f5 bfc8 	b.w	80013d8 <_getpid>

0800b448 <__sread>:
 800b448:	b510      	push	{r4, lr}
 800b44a:	460c      	mov	r4, r1
 800b44c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b450:	f002 fd3a 	bl	800dec8 <_read_r>
 800b454:	2800      	cmp	r0, #0
 800b456:	bfab      	itete	ge
 800b458:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 800b45a:	89a3      	ldrhlt	r3, [r4, #12]
 800b45c:	181b      	addge	r3, r3, r0
 800b45e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b462:	bfac      	ite	ge
 800b464:	6523      	strge	r3, [r4, #80]	; 0x50
 800b466:	81a3      	strhlt	r3, [r4, #12]
 800b468:	bd10      	pop	{r4, pc}

0800b46a <__swrite>:
 800b46a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b46e:	461f      	mov	r7, r3
 800b470:	898b      	ldrh	r3, [r1, #12]
 800b472:	05db      	lsls	r3, r3, #23
 800b474:	4605      	mov	r5, r0
 800b476:	460c      	mov	r4, r1
 800b478:	4616      	mov	r6, r2
 800b47a:	d505      	bpl.n	800b488 <__swrite+0x1e>
 800b47c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b480:	2302      	movs	r3, #2
 800b482:	2200      	movs	r2, #0
 800b484:	f002 f9d8 	bl	800d838 <_lseek_r>
 800b488:	89a3      	ldrh	r3, [r4, #12]
 800b48a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b48e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b492:	81a3      	strh	r3, [r4, #12]
 800b494:	4632      	mov	r2, r6
 800b496:	463b      	mov	r3, r7
 800b498:	4628      	mov	r0, r5
 800b49a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b49e:	f001 ba89 	b.w	800c9b4 <_write_r>

0800b4a2 <__sseek>:
 800b4a2:	b510      	push	{r4, lr}
 800b4a4:	460c      	mov	r4, r1
 800b4a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4aa:	f002 f9c5 	bl	800d838 <_lseek_r>
 800b4ae:	1c43      	adds	r3, r0, #1
 800b4b0:	89a3      	ldrh	r3, [r4, #12]
 800b4b2:	bf15      	itete	ne
 800b4b4:	6520      	strne	r0, [r4, #80]	; 0x50
 800b4b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b4ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b4be:	81a3      	strheq	r3, [r4, #12]
 800b4c0:	bf18      	it	ne
 800b4c2:	81a3      	strhne	r3, [r4, #12]
 800b4c4:	bd10      	pop	{r4, pc}

0800b4c6 <__sclose>:
 800b4c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4ca:	f001 bac7 	b.w	800ca5c <_close_r>

0800b4ce <strncpy>:
 800b4ce:	b510      	push	{r4, lr}
 800b4d0:	3901      	subs	r1, #1
 800b4d2:	4603      	mov	r3, r0
 800b4d4:	b132      	cbz	r2, 800b4e4 <strncpy+0x16>
 800b4d6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b4da:	f803 4b01 	strb.w	r4, [r3], #1
 800b4de:	3a01      	subs	r2, #1
 800b4e0:	2c00      	cmp	r4, #0
 800b4e2:	d1f7      	bne.n	800b4d4 <strncpy+0x6>
 800b4e4:	441a      	add	r2, r3
 800b4e6:	2100      	movs	r1, #0
 800b4e8:	4293      	cmp	r3, r2
 800b4ea:	d100      	bne.n	800b4ee <strncpy+0x20>
 800b4ec:	bd10      	pop	{r4, pc}
 800b4ee:	f803 1b01 	strb.w	r1, [r3], #1
 800b4f2:	e7f9      	b.n	800b4e8 <strncpy+0x1a>
 800b4f4:	0000      	movs	r0, r0
	...

0800b4f8 <_svfprintf_r>:
 800b4f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4fc:	ed2d 8b04 	vpush	{d8-d9}
 800b500:	b0cf      	sub	sp, #316	; 0x13c
 800b502:	4688      	mov	r8, r1
 800b504:	4691      	mov	r9, r2
 800b506:	461e      	mov	r6, r3
 800b508:	4682      	mov	sl, r0
 800b50a:	f7ff fabb 	bl	800aa84 <_localeconv_r>
 800b50e:	6803      	ldr	r3, [r0, #0]
 800b510:	9313      	str	r3, [sp, #76]	; 0x4c
 800b512:	4618      	mov	r0, r3
 800b514:	f7f4 feb4 	bl	8000280 <strlen>
 800b518:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800b51c:	900d      	str	r0, [sp, #52]	; 0x34
 800b51e:	0618      	lsls	r0, r3, #24
 800b520:	d51a      	bpl.n	800b558 <_svfprintf_r+0x60>
 800b522:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800b526:	b9bb      	cbnz	r3, 800b558 <_svfprintf_r+0x60>
 800b528:	2140      	movs	r1, #64	; 0x40
 800b52a:	4650      	mov	r0, sl
 800b52c:	f7ff fb1e 	bl	800ab6c <_malloc_r>
 800b530:	f8c8 0000 	str.w	r0, [r8]
 800b534:	f8c8 0010 	str.w	r0, [r8, #16]
 800b538:	b958      	cbnz	r0, 800b552 <_svfprintf_r+0x5a>
 800b53a:	230c      	movs	r3, #12
 800b53c:	f8ca 3000 	str.w	r3, [sl]
 800b540:	f04f 33ff 	mov.w	r3, #4294967295
 800b544:	930c      	str	r3, [sp, #48]	; 0x30
 800b546:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b548:	b04f      	add	sp, #316	; 0x13c
 800b54a:	ecbd 8b04 	vpop	{d8-d9}
 800b54e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b552:	2340      	movs	r3, #64	; 0x40
 800b554:	f8c8 3014 	str.w	r3, [r8, #20]
 800b558:	ed9f 7b93 	vldr	d7, [pc, #588]	; 800b7a8 <_svfprintf_r+0x2b0>
 800b55c:	2500      	movs	r5, #0
 800b55e:	e9cd 5523 	strd	r5, r5, [sp, #140]	; 0x8c
 800b562:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800b566:	e9cd 5515 	strd	r5, r5, [sp, #84]	; 0x54
 800b56a:	ac25      	add	r4, sp, #148	; 0x94
 800b56c:	9422      	str	r4, [sp, #136]	; 0x88
 800b56e:	9505      	str	r5, [sp, #20]
 800b570:	950a      	str	r5, [sp, #40]	; 0x28
 800b572:	9512      	str	r5, [sp, #72]	; 0x48
 800b574:	9514      	str	r5, [sp, #80]	; 0x50
 800b576:	950c      	str	r5, [sp, #48]	; 0x30
 800b578:	464b      	mov	r3, r9
 800b57a:	461d      	mov	r5, r3
 800b57c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b580:	b10a      	cbz	r2, 800b586 <_svfprintf_r+0x8e>
 800b582:	2a25      	cmp	r2, #37	; 0x25
 800b584:	d1f9      	bne.n	800b57a <_svfprintf_r+0x82>
 800b586:	ebb5 0709 	subs.w	r7, r5, r9
 800b58a:	d00d      	beq.n	800b5a8 <_svfprintf_r+0xb0>
 800b58c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b58e:	443b      	add	r3, r7
 800b590:	9324      	str	r3, [sp, #144]	; 0x90
 800b592:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b594:	3301      	adds	r3, #1
 800b596:	2b07      	cmp	r3, #7
 800b598:	e9c4 9700 	strd	r9, r7, [r4]
 800b59c:	9323      	str	r3, [sp, #140]	; 0x8c
 800b59e:	dc79      	bgt.n	800b694 <_svfprintf_r+0x19c>
 800b5a0:	3408      	adds	r4, #8
 800b5a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b5a4:	443b      	add	r3, r7
 800b5a6:	930c      	str	r3, [sp, #48]	; 0x30
 800b5a8:	782b      	ldrb	r3, [r5, #0]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	f001 8148 	beq.w	800c840 <_svfprintf_r+0x1348>
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	f04f 32ff 	mov.w	r2, #4294967295
 800b5b6:	9204      	str	r2, [sp, #16]
 800b5b8:	3501      	adds	r5, #1
 800b5ba:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800b5be:	9310      	str	r3, [sp, #64]	; 0x40
 800b5c0:	469b      	mov	fp, r3
 800b5c2:	270a      	movs	r7, #10
 800b5c4:	222b      	movs	r2, #43	; 0x2b
 800b5c6:	462b      	mov	r3, r5
 800b5c8:	f813 1b01 	ldrb.w	r1, [r3], #1
 800b5cc:	9106      	str	r1, [sp, #24]
 800b5ce:	930b      	str	r3, [sp, #44]	; 0x2c
 800b5d0:	9b06      	ldr	r3, [sp, #24]
 800b5d2:	3b20      	subs	r3, #32
 800b5d4:	2b5a      	cmp	r3, #90	; 0x5a
 800b5d6:	f200 85bf 	bhi.w	800c158 <_svfprintf_r+0xc60>
 800b5da:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b5de:	007e      	.short	0x007e
 800b5e0:	05bd05bd 	.word	0x05bd05bd
 800b5e4:	05bd0086 	.word	0x05bd0086
 800b5e8:	05bd05bd 	.word	0x05bd05bd
 800b5ec:	05bd0065 	.word	0x05bd0065
 800b5f0:	008905bd 	.word	0x008905bd
 800b5f4:	05bd0093 	.word	0x05bd0093
 800b5f8:	00960090 	.word	0x00960090
 800b5fc:	00b305bd 	.word	0x00b305bd
 800b600:	00b600b6 	.word	0x00b600b6
 800b604:	00b600b6 	.word	0x00b600b6
 800b608:	00b600b6 	.word	0x00b600b6
 800b60c:	00b600b6 	.word	0x00b600b6
 800b610:	05bd00b6 	.word	0x05bd00b6
 800b614:	05bd05bd 	.word	0x05bd05bd
 800b618:	05bd05bd 	.word	0x05bd05bd
 800b61c:	05bd05bd 	.word	0x05bd05bd
 800b620:	05bd012c 	.word	0x05bd012c
 800b624:	00fc00e9 	.word	0x00fc00e9
 800b628:	012c012c 	.word	0x012c012c
 800b62c:	05bd012c 	.word	0x05bd012c
 800b630:	05bd05bd 	.word	0x05bd05bd
 800b634:	00c605bd 	.word	0x00c605bd
 800b638:	05bd05bd 	.word	0x05bd05bd
 800b63c:	05bd0498 	.word	0x05bd0498
 800b640:	05bd05bd 	.word	0x05bd05bd
 800b644:	05bd04e2 	.word	0x05bd04e2
 800b648:	05bd0503 	.word	0x05bd0503
 800b64c:	052505bd 	.word	0x052505bd
 800b650:	05bd05bd 	.word	0x05bd05bd
 800b654:	05bd05bd 	.word	0x05bd05bd
 800b658:	05bd05bd 	.word	0x05bd05bd
 800b65c:	05bd05bd 	.word	0x05bd05bd
 800b660:	05bd012c 	.word	0x05bd012c
 800b664:	00fe00e9 	.word	0x00fe00e9
 800b668:	012c012c 	.word	0x012c012c
 800b66c:	00c9012c 	.word	0x00c9012c
 800b670:	00dd00fe 	.word	0x00dd00fe
 800b674:	00d605bd 	.word	0x00d605bd
 800b678:	047305bd 	.word	0x047305bd
 800b67c:	04d0049a 	.word	0x04d0049a
 800b680:	05bd00dd 	.word	0x05bd00dd
 800b684:	007c04e2 	.word	0x007c04e2
 800b688:	05bd0505 	.word	0x05bd0505
 800b68c:	054405bd 	.word	0x054405bd
 800b690:	007c05bd 	.word	0x007c05bd
 800b694:	aa22      	add	r2, sp, #136	; 0x88
 800b696:	4641      	mov	r1, r8
 800b698:	4650      	mov	r0, sl
 800b69a:	f002 fc5f 	bl	800df5c <__ssprint_r>
 800b69e:	2800      	cmp	r0, #0
 800b6a0:	f040 8137 	bne.w	800b912 <_svfprintf_r+0x41a>
 800b6a4:	ac25      	add	r4, sp, #148	; 0x94
 800b6a6:	e77c      	b.n	800b5a2 <_svfprintf_r+0xaa>
 800b6a8:	4650      	mov	r0, sl
 800b6aa:	f7ff f9eb 	bl	800aa84 <_localeconv_r>
 800b6ae:	6843      	ldr	r3, [r0, #4]
 800b6b0:	9314      	str	r3, [sp, #80]	; 0x50
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	f7f4 fde4 	bl	8000280 <strlen>
 800b6b8:	9012      	str	r0, [sp, #72]	; 0x48
 800b6ba:	4650      	mov	r0, sl
 800b6bc:	f7ff f9e2 	bl	800aa84 <_localeconv_r>
 800b6c0:	6883      	ldr	r3, [r0, #8]
 800b6c2:	930a      	str	r3, [sp, #40]	; 0x28
 800b6c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b6c6:	222b      	movs	r2, #43	; 0x2b
 800b6c8:	b12b      	cbz	r3, 800b6d6 <_svfprintf_r+0x1de>
 800b6ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6cc:	b11b      	cbz	r3, 800b6d6 <_svfprintf_r+0x1de>
 800b6ce:	781b      	ldrb	r3, [r3, #0]
 800b6d0:	b10b      	cbz	r3, 800b6d6 <_svfprintf_r+0x1de>
 800b6d2:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400
 800b6d6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800b6d8:	e775      	b.n	800b5c6 <_svfprintf_r+0xce>
 800b6da:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d1f9      	bne.n	800b6d6 <_svfprintf_r+0x1de>
 800b6e2:	2320      	movs	r3, #32
 800b6e4:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800b6e8:	e7f5      	b.n	800b6d6 <_svfprintf_r+0x1de>
 800b6ea:	f04b 0b01 	orr.w	fp, fp, #1
 800b6ee:	e7f2      	b.n	800b6d6 <_svfprintf_r+0x1de>
 800b6f0:	f856 3b04 	ldr.w	r3, [r6], #4
 800b6f4:	9310      	str	r3, [sp, #64]	; 0x40
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	daed      	bge.n	800b6d6 <_svfprintf_r+0x1de>
 800b6fa:	425b      	negs	r3, r3
 800b6fc:	9310      	str	r3, [sp, #64]	; 0x40
 800b6fe:	f04b 0b04 	orr.w	fp, fp, #4
 800b702:	e7e8      	b.n	800b6d6 <_svfprintf_r+0x1de>
 800b704:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 800b708:	e7e5      	b.n	800b6d6 <_svfprintf_r+0x1de>
 800b70a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800b70c:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b710:	9306      	str	r3, [sp, #24]
 800b712:	2b2a      	cmp	r3, #42	; 0x2a
 800b714:	d113      	bne.n	800b73e <_svfprintf_r+0x246>
 800b716:	f856 0b04 	ldr.w	r0, [r6], #4
 800b71a:	950b      	str	r5, [sp, #44]	; 0x2c
 800b71c:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 800b720:	9304      	str	r3, [sp, #16]
 800b722:	e7d8      	b.n	800b6d6 <_svfprintf_r+0x1de>
 800b724:	9904      	ldr	r1, [sp, #16]
 800b726:	fb07 3301 	mla	r3, r7, r1, r3
 800b72a:	9304      	str	r3, [sp, #16]
 800b72c:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b730:	9306      	str	r3, [sp, #24]
 800b732:	9b06      	ldr	r3, [sp, #24]
 800b734:	3b30      	subs	r3, #48	; 0x30
 800b736:	2b09      	cmp	r3, #9
 800b738:	d9f4      	bls.n	800b724 <_svfprintf_r+0x22c>
 800b73a:	950b      	str	r5, [sp, #44]	; 0x2c
 800b73c:	e748      	b.n	800b5d0 <_svfprintf_r+0xd8>
 800b73e:	2300      	movs	r3, #0
 800b740:	9304      	str	r3, [sp, #16]
 800b742:	e7f6      	b.n	800b732 <_svfprintf_r+0x23a>
 800b744:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 800b748:	e7c5      	b.n	800b6d6 <_svfprintf_r+0x1de>
 800b74a:	2300      	movs	r3, #0
 800b74c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800b74e:	9310      	str	r3, [sp, #64]	; 0x40
 800b750:	9b06      	ldr	r3, [sp, #24]
 800b752:	9910      	ldr	r1, [sp, #64]	; 0x40
 800b754:	3b30      	subs	r3, #48	; 0x30
 800b756:	fb07 3301 	mla	r3, r7, r1, r3
 800b75a:	9310      	str	r3, [sp, #64]	; 0x40
 800b75c:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b760:	9306      	str	r3, [sp, #24]
 800b762:	3b30      	subs	r3, #48	; 0x30
 800b764:	2b09      	cmp	r3, #9
 800b766:	d9f3      	bls.n	800b750 <_svfprintf_r+0x258>
 800b768:	e7e7      	b.n	800b73a <_svfprintf_r+0x242>
 800b76a:	f04b 0b08 	orr.w	fp, fp, #8
 800b76e:	e7b2      	b.n	800b6d6 <_svfprintf_r+0x1de>
 800b770:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b772:	781b      	ldrb	r3, [r3, #0]
 800b774:	2b68      	cmp	r3, #104	; 0x68
 800b776:	bf01      	itttt	eq
 800b778:	9b0b      	ldreq	r3, [sp, #44]	; 0x2c
 800b77a:	3301      	addeq	r3, #1
 800b77c:	930b      	streq	r3, [sp, #44]	; 0x2c
 800b77e:	f44b 7b00 	orreq.w	fp, fp, #512	; 0x200
 800b782:	bf18      	it	ne
 800b784:	f04b 0b40 	orrne.w	fp, fp, #64	; 0x40
 800b788:	e7a5      	b.n	800b6d6 <_svfprintf_r+0x1de>
 800b78a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b78c:	781b      	ldrb	r3, [r3, #0]
 800b78e:	2b6c      	cmp	r3, #108	; 0x6c
 800b790:	d105      	bne.n	800b79e <_svfprintf_r+0x2a6>
 800b792:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b794:	3301      	adds	r3, #1
 800b796:	930b      	str	r3, [sp, #44]	; 0x2c
 800b798:	f04b 0b20 	orr.w	fp, fp, #32
 800b79c:	e79b      	b.n	800b6d6 <_svfprintf_r+0x1de>
 800b79e:	f04b 0b10 	orr.w	fp, fp, #16
 800b7a2:	e798      	b.n	800b6d6 <_svfprintf_r+0x1de>
 800b7a4:	f3af 8000 	nop.w
	...
 800b7b0:	4632      	mov	r2, r6
 800b7b2:	2000      	movs	r0, #0
 800b7b4:	f852 3b04 	ldr.w	r3, [r2], #4
 800b7b8:	9207      	str	r2, [sp, #28]
 800b7ba:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 800b7be:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 800b7c2:	2301      	movs	r3, #1
 800b7c4:	e9cd 0008 	strd	r0, r0, [sp, #32]
 800b7c8:	9003      	str	r0, [sp, #12]
 800b7ca:	9304      	str	r3, [sp, #16]
 800b7cc:	4606      	mov	r6, r0
 800b7ce:	4605      	mov	r5, r0
 800b7d0:	f10d 09d4 	add.w	r9, sp, #212	; 0xd4
 800b7d4:	e1bc      	b.n	800bb50 <_svfprintf_r+0x658>
 800b7d6:	f04b 0b10 	orr.w	fp, fp, #16
 800b7da:	f01b 0f20 	tst.w	fp, #32
 800b7de:	d012      	beq.n	800b806 <_svfprintf_r+0x30e>
 800b7e0:	1df3      	adds	r3, r6, #7
 800b7e2:	f023 0307 	bic.w	r3, r3, #7
 800b7e6:	461a      	mov	r2, r3
 800b7e8:	685d      	ldr	r5, [r3, #4]
 800b7ea:	f852 6b08 	ldr.w	r6, [r2], #8
 800b7ee:	9207      	str	r2, [sp, #28]
 800b7f0:	2d00      	cmp	r5, #0
 800b7f2:	da06      	bge.n	800b802 <_svfprintf_r+0x30a>
 800b7f4:	4276      	negs	r6, r6
 800b7f6:	f04f 032d 	mov.w	r3, #45	; 0x2d
 800b7fa:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800b7fe:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800b802:	2301      	movs	r3, #1
 800b804:	e396      	b.n	800bf34 <_svfprintf_r+0xa3c>
 800b806:	4633      	mov	r3, r6
 800b808:	f01b 0f10 	tst.w	fp, #16
 800b80c:	f853 5b04 	ldr.w	r5, [r3], #4
 800b810:	9307      	str	r3, [sp, #28]
 800b812:	d002      	beq.n	800b81a <_svfprintf_r+0x322>
 800b814:	462e      	mov	r6, r5
 800b816:	17ed      	asrs	r5, r5, #31
 800b818:	e7ea      	b.n	800b7f0 <_svfprintf_r+0x2f8>
 800b81a:	f01b 0f40 	tst.w	fp, #64	; 0x40
 800b81e:	d003      	beq.n	800b828 <_svfprintf_r+0x330>
 800b820:	b22e      	sxth	r6, r5
 800b822:	f345 35c0 	sbfx	r5, r5, #15, #1
 800b826:	e7e3      	b.n	800b7f0 <_svfprintf_r+0x2f8>
 800b828:	f41b 7f00 	tst.w	fp, #512	; 0x200
 800b82c:	d0f2      	beq.n	800b814 <_svfprintf_r+0x31c>
 800b82e:	b26e      	sxtb	r6, r5
 800b830:	f345 15c0 	sbfx	r5, r5, #7, #1
 800b834:	e7dc      	b.n	800b7f0 <_svfprintf_r+0x2f8>
 800b836:	3607      	adds	r6, #7
 800b838:	f026 0307 	bic.w	r3, r6, #7
 800b83c:	ecb3 7b02 	vldmia	r3!, {d7}
 800b840:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800b844:	9307      	str	r3, [sp, #28]
 800b846:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b848:	ee09 3a10 	vmov	s18, r3
 800b84c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b84e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b852:	ee09 3a90 	vmov	s19, r3
 800b856:	f04f 32ff 	mov.w	r2, #4294967295
 800b85a:	4b3a      	ldr	r3, [pc, #232]	; (800b944 <_svfprintf_r+0x44c>)
 800b85c:	ec51 0b19 	vmov	r0, r1, d9
 800b860:	f7f5 f96c 	bl	8000b3c <__aeabi_dcmpun>
 800b864:	bb10      	cbnz	r0, 800b8ac <_svfprintf_r+0x3b4>
 800b866:	4b37      	ldr	r3, [pc, #220]	; (800b944 <_svfprintf_r+0x44c>)
 800b868:	ec51 0b19 	vmov	r0, r1, d9
 800b86c:	f04f 32ff 	mov.w	r2, #4294967295
 800b870:	f7f5 f946 	bl	8000b00 <__aeabi_dcmple>
 800b874:	b9d0      	cbnz	r0, 800b8ac <_svfprintf_r+0x3b4>
 800b876:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b87a:	2200      	movs	r2, #0
 800b87c:	2300      	movs	r3, #0
 800b87e:	f7f5 f935 	bl	8000aec <__aeabi_dcmplt>
 800b882:	b110      	cbz	r0, 800b88a <_svfprintf_r+0x392>
 800b884:	232d      	movs	r3, #45	; 0x2d
 800b886:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800b88a:	4a2f      	ldr	r2, [pc, #188]	; (800b948 <_svfprintf_r+0x450>)
 800b88c:	482f      	ldr	r0, [pc, #188]	; (800b94c <_svfprintf_r+0x454>)
 800b88e:	9b06      	ldr	r3, [sp, #24]
 800b890:	2100      	movs	r1, #0
 800b892:	2b47      	cmp	r3, #71	; 0x47
 800b894:	bfd4      	ite	le
 800b896:	4691      	movle	r9, r2
 800b898:	4681      	movgt	r9, r0
 800b89a:	2303      	movs	r3, #3
 800b89c:	e9cd 1303 	strd	r1, r3, [sp, #12]
 800b8a0:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
 800b8a4:	2600      	movs	r6, #0
 800b8a6:	4633      	mov	r3, r6
 800b8a8:	f001 b800 	b.w	800c8ac <_svfprintf_r+0x13b4>
 800b8ac:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800b8b0:	4610      	mov	r0, r2
 800b8b2:	4619      	mov	r1, r3
 800b8b4:	f7f5 f942 	bl	8000b3c <__aeabi_dcmpun>
 800b8b8:	b140      	cbz	r0, 800b8cc <_svfprintf_r+0x3d4>
 800b8ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b8bc:	4a24      	ldr	r2, [pc, #144]	; (800b950 <_svfprintf_r+0x458>)
 800b8be:	4825      	ldr	r0, [pc, #148]	; (800b954 <_svfprintf_r+0x45c>)
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	bfbc      	itt	lt
 800b8c4:	232d      	movlt	r3, #45	; 0x2d
 800b8c6:	f88d 306b 	strblt.w	r3, [sp, #107]	; 0x6b
 800b8ca:	e7e0      	b.n	800b88e <_svfprintf_r+0x396>
 800b8cc:	9b06      	ldr	r3, [sp, #24]
 800b8ce:	f023 0320 	bic.w	r3, r3, #32
 800b8d2:	2b41      	cmp	r3, #65	; 0x41
 800b8d4:	9308      	str	r3, [sp, #32]
 800b8d6:	d125      	bne.n	800b924 <_svfprintf_r+0x42c>
 800b8d8:	2330      	movs	r3, #48	; 0x30
 800b8da:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 800b8de:	9b06      	ldr	r3, [sp, #24]
 800b8e0:	2b61      	cmp	r3, #97	; 0x61
 800b8e2:	bf0c      	ite	eq
 800b8e4:	2378      	moveq	r3, #120	; 0x78
 800b8e6:	2358      	movne	r3, #88	; 0x58
 800b8e8:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 800b8ec:	9b04      	ldr	r3, [sp, #16]
 800b8ee:	2b63      	cmp	r3, #99	; 0x63
 800b8f0:	f04b 0b02 	orr.w	fp, fp, #2
 800b8f4:	dd30      	ble.n	800b958 <_svfprintf_r+0x460>
 800b8f6:	1c59      	adds	r1, r3, #1
 800b8f8:	4650      	mov	r0, sl
 800b8fa:	f7ff f937 	bl	800ab6c <_malloc_r>
 800b8fe:	4681      	mov	r9, r0
 800b900:	2800      	cmp	r0, #0
 800b902:	f040 81fd 	bne.w	800bd00 <_svfprintf_r+0x808>
 800b906:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800b90a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b90e:	f8a8 300c 	strh.w	r3, [r8, #12]
 800b912:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800b916:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b91a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b91c:	bf18      	it	ne
 800b91e:	f04f 33ff 	movne.w	r3, #4294967295
 800b922:	e60f      	b.n	800b544 <_svfprintf_r+0x4c>
 800b924:	9b04      	ldr	r3, [sp, #16]
 800b926:	3301      	adds	r3, #1
 800b928:	f000 81ec 	beq.w	800bd04 <_svfprintf_r+0x80c>
 800b92c:	9b08      	ldr	r3, [sp, #32]
 800b92e:	2b47      	cmp	r3, #71	; 0x47
 800b930:	f040 81eb 	bne.w	800bd0a <_svfprintf_r+0x812>
 800b934:	9b04      	ldr	r3, [sp, #16]
 800b936:	2b00      	cmp	r3, #0
 800b938:	f040 81e7 	bne.w	800bd0a <_svfprintf_r+0x812>
 800b93c:	9303      	str	r3, [sp, #12]
 800b93e:	2301      	movs	r3, #1
 800b940:	9304      	str	r3, [sp, #16]
 800b942:	e00c      	b.n	800b95e <_svfprintf_r+0x466>
 800b944:	7fefffff 	.word	0x7fefffff
 800b948:	0800e258 	.word	0x0800e258
 800b94c:	0800e25c 	.word	0x0800e25c
 800b950:	0800e260 	.word	0x0800e260
 800b954:	0800e264 	.word	0x0800e264
 800b958:	9003      	str	r0, [sp, #12]
 800b95a:	f10d 09d4 	add.w	r9, sp, #212	; 0xd4
 800b95e:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
 800b962:	9311      	str	r3, [sp, #68]	; 0x44
 800b964:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b966:	2b00      	cmp	r3, #0
 800b968:	f280 81d1 	bge.w	800bd0e <_svfprintf_r+0x816>
 800b96c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b96e:	ee08 3a10 	vmov	s16, r3
 800b972:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b974:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b978:	ee08 3a90 	vmov	s17, r3
 800b97c:	232d      	movs	r3, #45	; 0x2d
 800b97e:	9318      	str	r3, [sp, #96]	; 0x60
 800b980:	9b08      	ldr	r3, [sp, #32]
 800b982:	2b41      	cmp	r3, #65	; 0x41
 800b984:	f040 81e1 	bne.w	800bd4a <_svfprintf_r+0x852>
 800b988:	eeb0 0a48 	vmov.f32	s0, s16
 800b98c:	eef0 0a68 	vmov.f32	s1, s17
 800b990:	a81c      	add	r0, sp, #112	; 0x70
 800b992:	f002 faab 	bl	800deec <frexp>
 800b996:	2200      	movs	r2, #0
 800b998:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800b99c:	ec51 0b10 	vmov	r0, r1, d0
 800b9a0:	f7f4 fe32 	bl	8000608 <__aeabi_dmul>
 800b9a4:	2200      	movs	r2, #0
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	4606      	mov	r6, r0
 800b9aa:	460f      	mov	r7, r1
 800b9ac:	f7f5 f894 	bl	8000ad8 <__aeabi_dcmpeq>
 800b9b0:	b108      	cbz	r0, 800b9b6 <_svfprintf_r+0x4be>
 800b9b2:	2301      	movs	r3, #1
 800b9b4:	931c      	str	r3, [sp, #112]	; 0x70
 800b9b6:	4ba7      	ldr	r3, [pc, #668]	; (800bc54 <_svfprintf_r+0x75c>)
 800b9b8:	4aa7      	ldr	r2, [pc, #668]	; (800bc58 <_svfprintf_r+0x760>)
 800b9ba:	9906      	ldr	r1, [sp, #24]
 800b9bc:	2961      	cmp	r1, #97	; 0x61
 800b9be:	bf18      	it	ne
 800b9c0:	461a      	movne	r2, r3
 800b9c2:	9b04      	ldr	r3, [sp, #16]
 800b9c4:	9217      	str	r2, [sp, #92]	; 0x5c
 800b9c6:	3b01      	subs	r3, #1
 800b9c8:	9305      	str	r3, [sp, #20]
 800b9ca:	464d      	mov	r5, r9
 800b9cc:	4ba3      	ldr	r3, [pc, #652]	; (800bc5c <_svfprintf_r+0x764>)
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	4630      	mov	r0, r6
 800b9d2:	4639      	mov	r1, r7
 800b9d4:	f7f4 fe18 	bl	8000608 <__aeabi_dmul>
 800b9d8:	460f      	mov	r7, r1
 800b9da:	4606      	mov	r6, r0
 800b9dc:	f7f5 f8c4 	bl	8000b68 <__aeabi_d2iz>
 800b9e0:	9019      	str	r0, [sp, #100]	; 0x64
 800b9e2:	f7f4 fda7 	bl	8000534 <__aeabi_i2d>
 800b9e6:	4602      	mov	r2, r0
 800b9e8:	460b      	mov	r3, r1
 800b9ea:	4630      	mov	r0, r6
 800b9ec:	4639      	mov	r1, r7
 800b9ee:	f7f4 fc53 	bl	8000298 <__aeabi_dsub>
 800b9f2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b9f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b9f6:	5c9b      	ldrb	r3, [r3, r2]
 800b9f8:	f805 3b01 	strb.w	r3, [r5], #1
 800b9fc:	9b05      	ldr	r3, [sp, #20]
 800b9fe:	9309      	str	r3, [sp, #36]	; 0x24
 800ba00:	1c5a      	adds	r2, r3, #1
 800ba02:	4606      	mov	r6, r0
 800ba04:	460f      	mov	r7, r1
 800ba06:	d007      	beq.n	800ba18 <_svfprintf_r+0x520>
 800ba08:	3b01      	subs	r3, #1
 800ba0a:	9305      	str	r3, [sp, #20]
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	2300      	movs	r3, #0
 800ba10:	f7f5 f862 	bl	8000ad8 <__aeabi_dcmpeq>
 800ba14:	2800      	cmp	r0, #0
 800ba16:	d0d9      	beq.n	800b9cc <_svfprintf_r+0x4d4>
 800ba18:	4b91      	ldr	r3, [pc, #580]	; (800bc60 <_svfprintf_r+0x768>)
 800ba1a:	2200      	movs	r2, #0
 800ba1c:	4630      	mov	r0, r6
 800ba1e:	4639      	mov	r1, r7
 800ba20:	f7f5 f882 	bl	8000b28 <__aeabi_dcmpgt>
 800ba24:	b960      	cbnz	r0, 800ba40 <_svfprintf_r+0x548>
 800ba26:	4b8e      	ldr	r3, [pc, #568]	; (800bc60 <_svfprintf_r+0x768>)
 800ba28:	2200      	movs	r2, #0
 800ba2a:	4630      	mov	r0, r6
 800ba2c:	4639      	mov	r1, r7
 800ba2e:	f7f5 f853 	bl	8000ad8 <__aeabi_dcmpeq>
 800ba32:	2800      	cmp	r0, #0
 800ba34:	f000 8184 	beq.w	800bd40 <_svfprintf_r+0x848>
 800ba38:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ba3a:	07db      	lsls	r3, r3, #31
 800ba3c:	f140 8180 	bpl.w	800bd40 <_svfprintf_r+0x848>
 800ba40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ba42:	9520      	str	r5, [sp, #128]	; 0x80
 800ba44:	7bd9      	ldrb	r1, [r3, #15]
 800ba46:	2030      	movs	r0, #48	; 0x30
 800ba48:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ba4a:	1e53      	subs	r3, r2, #1
 800ba4c:	9320      	str	r3, [sp, #128]	; 0x80
 800ba4e:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 800ba52:	428b      	cmp	r3, r1
 800ba54:	f000 8163 	beq.w	800bd1e <_svfprintf_r+0x826>
 800ba58:	2b39      	cmp	r3, #57	; 0x39
 800ba5a:	bf0b      	itete	eq
 800ba5c:	9b17      	ldreq	r3, [sp, #92]	; 0x5c
 800ba5e:	3301      	addne	r3, #1
 800ba60:	7a9b      	ldrbeq	r3, [r3, #10]
 800ba62:	b2db      	uxtbne	r3, r3
 800ba64:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ba68:	eba5 0309 	sub.w	r3, r5, r9
 800ba6c:	9305      	str	r3, [sp, #20]
 800ba6e:	9b08      	ldr	r3, [sp, #32]
 800ba70:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 800ba72:	2b47      	cmp	r3, #71	; 0x47
 800ba74:	f040 81b1 	bne.w	800bdda <_svfprintf_r+0x8e2>
 800ba78:	1cef      	adds	r7, r5, #3
 800ba7a:	db03      	blt.n	800ba84 <_svfprintf_r+0x58c>
 800ba7c:	9b04      	ldr	r3, [sp, #16]
 800ba7e:	42ab      	cmp	r3, r5
 800ba80:	f280 81d6 	bge.w	800be30 <_svfprintf_r+0x938>
 800ba84:	9b06      	ldr	r3, [sp, #24]
 800ba86:	3b02      	subs	r3, #2
 800ba88:	9306      	str	r3, [sp, #24]
 800ba8a:	9906      	ldr	r1, [sp, #24]
 800ba8c:	f89d 2018 	ldrb.w	r2, [sp, #24]
 800ba90:	f021 0120 	bic.w	r1, r1, #32
 800ba94:	2941      	cmp	r1, #65	; 0x41
 800ba96:	bf08      	it	eq
 800ba98:	320f      	addeq	r2, #15
 800ba9a:	f105 33ff 	add.w	r3, r5, #4294967295
 800ba9e:	bf06      	itte	eq
 800baa0:	b2d2      	uxtbeq	r2, r2
 800baa2:	2101      	moveq	r1, #1
 800baa4:	2100      	movne	r1, #0
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	931c      	str	r3, [sp, #112]	; 0x70
 800baaa:	bfb8      	it	lt
 800baac:	f1c5 0301 	rsblt	r3, r5, #1
 800bab0:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 800bab4:	bfb4      	ite	lt
 800bab6:	222d      	movlt	r2, #45	; 0x2d
 800bab8:	222b      	movge	r2, #43	; 0x2b
 800baba:	2b09      	cmp	r3, #9
 800babc:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
 800bac0:	f340 81a4 	ble.w	800be0c <_svfprintf_r+0x914>
 800bac4:	f10d 0287 	add.w	r2, sp, #135	; 0x87
 800bac8:	260a      	movs	r6, #10
 800baca:	4611      	mov	r1, r2
 800bacc:	fb93 f5f6 	sdiv	r5, r3, r6
 800bad0:	fb06 3015 	mls	r0, r6, r5, r3
 800bad4:	3030      	adds	r0, #48	; 0x30
 800bad6:	f801 0c01 	strb.w	r0, [r1, #-1]
 800bada:	4618      	mov	r0, r3
 800badc:	2863      	cmp	r0, #99	; 0x63
 800bade:	f102 32ff 	add.w	r2, r2, #4294967295
 800bae2:	462b      	mov	r3, r5
 800bae4:	dcf1      	bgt.n	800baca <_svfprintf_r+0x5d2>
 800bae6:	3330      	adds	r3, #48	; 0x30
 800bae8:	1e88      	subs	r0, r1, #2
 800baea:	f802 3c01 	strb.w	r3, [r2, #-1]
 800baee:	f10d 0587 	add.w	r5, sp, #135	; 0x87
 800baf2:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 800baf6:	4603      	mov	r3, r0
 800baf8:	42ab      	cmp	r3, r5
 800bafa:	f0c0 8182 	bcc.w	800be02 <_svfprintf_r+0x90a>
 800bafe:	f10d 0289 	add.w	r2, sp, #137	; 0x89
 800bb02:	1a52      	subs	r2, r2, r1
 800bb04:	42a8      	cmp	r0, r5
 800bb06:	bf88      	it	hi
 800bb08:	2200      	movhi	r2, #0
 800bb0a:	f10d 037a 	add.w	r3, sp, #122	; 0x7a
 800bb0e:	441a      	add	r2, r3
 800bb10:	ab1e      	add	r3, sp, #120	; 0x78
 800bb12:	1ad3      	subs	r3, r2, r3
 800bb14:	9a05      	ldr	r2, [sp, #20]
 800bb16:	9315      	str	r3, [sp, #84]	; 0x54
 800bb18:	2a01      	cmp	r2, #1
 800bb1a:	4413      	add	r3, r2
 800bb1c:	9304      	str	r3, [sp, #16]
 800bb1e:	dc02      	bgt.n	800bb26 <_svfprintf_r+0x62e>
 800bb20:	f01b 0f01 	tst.w	fp, #1
 800bb24:	d003      	beq.n	800bb2e <_svfprintf_r+0x636>
 800bb26:	9b04      	ldr	r3, [sp, #16]
 800bb28:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bb2a:	4413      	add	r3, r2
 800bb2c:	9304      	str	r3, [sp, #16]
 800bb2e:	f42b 6380 	bic.w	r3, fp, #1024	; 0x400
 800bb32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bb36:	9311      	str	r3, [sp, #68]	; 0x44
 800bb38:	2300      	movs	r3, #0
 800bb3a:	e9cd 3308 	strd	r3, r3, [sp, #32]
 800bb3e:	461d      	mov	r5, r3
 800bb40:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800bb42:	b113      	cbz	r3, 800bb4a <_svfprintf_r+0x652>
 800bb44:	232d      	movs	r3, #45	; 0x2d
 800bb46:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800bb4a:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 800bb4e:	2600      	movs	r6, #0
 800bb50:	9b04      	ldr	r3, [sp, #16]
 800bb52:	42b3      	cmp	r3, r6
 800bb54:	bfb8      	it	lt
 800bb56:	4633      	movlt	r3, r6
 800bb58:	9311      	str	r3, [sp, #68]	; 0x44
 800bb5a:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 800bb5e:	b113      	cbz	r3, 800bb66 <_svfprintf_r+0x66e>
 800bb60:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bb62:	3301      	adds	r3, #1
 800bb64:	9311      	str	r3, [sp, #68]	; 0x44
 800bb66:	f01b 0302 	ands.w	r3, fp, #2
 800bb6a:	9317      	str	r3, [sp, #92]	; 0x5c
 800bb6c:	bf1e      	ittt	ne
 800bb6e:	9b11      	ldrne	r3, [sp, #68]	; 0x44
 800bb70:	3302      	addne	r3, #2
 800bb72:	9311      	strne	r3, [sp, #68]	; 0x44
 800bb74:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
 800bb78:	9318      	str	r3, [sp, #96]	; 0x60
 800bb7a:	d11f      	bne.n	800bbbc <_svfprintf_r+0x6c4>
 800bb7c:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 800bb80:	1a9f      	subs	r7, r3, r2
 800bb82:	2f00      	cmp	r7, #0
 800bb84:	dd1a      	ble.n	800bbbc <_svfprintf_r+0x6c4>
 800bb86:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800bb8a:	4836      	ldr	r0, [pc, #216]	; (800bc64 <_svfprintf_r+0x76c>)
 800bb8c:	6020      	str	r0, [r4, #0]
 800bb8e:	2f10      	cmp	r7, #16
 800bb90:	f103 0301 	add.w	r3, r3, #1
 800bb94:	f104 0108 	add.w	r1, r4, #8
 800bb98:	f300 82ed 	bgt.w	800c176 <_svfprintf_r+0xc7e>
 800bb9c:	6067      	str	r7, [r4, #4]
 800bb9e:	2b07      	cmp	r3, #7
 800bba0:	4417      	add	r7, r2
 800bba2:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 800bba6:	f340 82f9 	ble.w	800c19c <_svfprintf_r+0xca4>
 800bbaa:	aa22      	add	r2, sp, #136	; 0x88
 800bbac:	4641      	mov	r1, r8
 800bbae:	4650      	mov	r0, sl
 800bbb0:	f002 f9d4 	bl	800df5c <__ssprint_r>
 800bbb4:	2800      	cmp	r0, #0
 800bbb6:	f040 8621 	bne.w	800c7fc <_svfprintf_r+0x1304>
 800bbba:	ac25      	add	r4, sp, #148	; 0x94
 800bbbc:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 800bbc0:	b173      	cbz	r3, 800bbe0 <_svfprintf_r+0x6e8>
 800bbc2:	f10d 036b 	add.w	r3, sp, #107	; 0x6b
 800bbc6:	6023      	str	r3, [r4, #0]
 800bbc8:	2301      	movs	r3, #1
 800bbca:	6063      	str	r3, [r4, #4]
 800bbcc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800bbce:	3301      	adds	r3, #1
 800bbd0:	9324      	str	r3, [sp, #144]	; 0x90
 800bbd2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bbd4:	3301      	adds	r3, #1
 800bbd6:	2b07      	cmp	r3, #7
 800bbd8:	9323      	str	r3, [sp, #140]	; 0x8c
 800bbda:	f300 82e1 	bgt.w	800c1a0 <_svfprintf_r+0xca8>
 800bbde:	3408      	adds	r4, #8
 800bbe0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bbe2:	b16b      	cbz	r3, 800bc00 <_svfprintf_r+0x708>
 800bbe4:	ab1b      	add	r3, sp, #108	; 0x6c
 800bbe6:	6023      	str	r3, [r4, #0]
 800bbe8:	2302      	movs	r3, #2
 800bbea:	6063      	str	r3, [r4, #4]
 800bbec:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800bbee:	3302      	adds	r3, #2
 800bbf0:	9324      	str	r3, [sp, #144]	; 0x90
 800bbf2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bbf4:	3301      	adds	r3, #1
 800bbf6:	2b07      	cmp	r3, #7
 800bbf8:	9323      	str	r3, [sp, #140]	; 0x8c
 800bbfa:	f300 82db 	bgt.w	800c1b4 <_svfprintf_r+0xcbc>
 800bbfe:	3408      	adds	r4, #8
 800bc00:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800bc02:	2b80      	cmp	r3, #128	; 0x80
 800bc04:	d11f      	bne.n	800bc46 <_svfprintf_r+0x74e>
 800bc06:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 800bc0a:	1a9f      	subs	r7, r3, r2
 800bc0c:	2f00      	cmp	r7, #0
 800bc0e:	dd1a      	ble.n	800bc46 <_svfprintf_r+0x74e>
 800bc10:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800bc14:	4814      	ldr	r0, [pc, #80]	; (800bc68 <_svfprintf_r+0x770>)
 800bc16:	6020      	str	r0, [r4, #0]
 800bc18:	2f10      	cmp	r7, #16
 800bc1a:	f103 0301 	add.w	r3, r3, #1
 800bc1e:	f104 0108 	add.w	r1, r4, #8
 800bc22:	f300 82d1 	bgt.w	800c1c8 <_svfprintf_r+0xcd0>
 800bc26:	6067      	str	r7, [r4, #4]
 800bc28:	2b07      	cmp	r3, #7
 800bc2a:	4417      	add	r7, r2
 800bc2c:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 800bc30:	f340 82dd 	ble.w	800c1ee <_svfprintf_r+0xcf6>
 800bc34:	aa22      	add	r2, sp, #136	; 0x88
 800bc36:	4641      	mov	r1, r8
 800bc38:	4650      	mov	r0, sl
 800bc3a:	f002 f98f 	bl	800df5c <__ssprint_r>
 800bc3e:	2800      	cmp	r0, #0
 800bc40:	f040 85dc 	bne.w	800c7fc <_svfprintf_r+0x1304>
 800bc44:	ac25      	add	r4, sp, #148	; 0x94
 800bc46:	9b04      	ldr	r3, [sp, #16]
 800bc48:	1af6      	subs	r6, r6, r3
 800bc4a:	2e00      	cmp	r6, #0
 800bc4c:	dd28      	ble.n	800bca0 <_svfprintf_r+0x7a8>
 800bc4e:	4f06      	ldr	r7, [pc, #24]	; (800bc68 <_svfprintf_r+0x770>)
 800bc50:	e00c      	b.n	800bc6c <_svfprintf_r+0x774>
 800bc52:	bf00      	nop
 800bc54:	0800e20c 	.word	0x0800e20c
 800bc58:	0800e21d 	.word	0x0800e21d
 800bc5c:	40300000 	.word	0x40300000
 800bc60:	3fe00000 	.word	0x3fe00000
 800bc64:	0800e26a 	.word	0x0800e26a
 800bc68:	0800e27a 	.word	0x0800e27a
 800bc6c:	6027      	str	r7, [r4, #0]
 800bc6e:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800bc72:	2e10      	cmp	r6, #16
 800bc74:	f103 0301 	add.w	r3, r3, #1
 800bc78:	f104 0108 	add.w	r1, r4, #8
 800bc7c:	f300 82b9 	bgt.w	800c1f2 <_svfprintf_r+0xcfa>
 800bc80:	6066      	str	r6, [r4, #4]
 800bc82:	2b07      	cmp	r3, #7
 800bc84:	4416      	add	r6, r2
 800bc86:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 800bc8a:	f340 82c5 	ble.w	800c218 <_svfprintf_r+0xd20>
 800bc8e:	aa22      	add	r2, sp, #136	; 0x88
 800bc90:	4641      	mov	r1, r8
 800bc92:	4650      	mov	r0, sl
 800bc94:	f002 f962 	bl	800df5c <__ssprint_r>
 800bc98:	2800      	cmp	r0, #0
 800bc9a:	f040 85af 	bne.w	800c7fc <_svfprintf_r+0x1304>
 800bc9e:	ac25      	add	r4, sp, #148	; 0x94
 800bca0:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800bca4:	9e24      	ldr	r6, [sp, #144]	; 0x90
 800bca6:	f040 82bd 	bne.w	800c224 <_svfprintf_r+0xd2c>
 800bcaa:	9b04      	ldr	r3, [sp, #16]
 800bcac:	f8c4 9000 	str.w	r9, [r4]
 800bcb0:	441e      	add	r6, r3
 800bcb2:	6063      	str	r3, [r4, #4]
 800bcb4:	9624      	str	r6, [sp, #144]	; 0x90
 800bcb6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bcb8:	3301      	adds	r3, #1
 800bcba:	2b07      	cmp	r3, #7
 800bcbc:	9323      	str	r3, [sp, #140]	; 0x8c
 800bcbe:	f300 82f6 	bgt.w	800c2ae <_svfprintf_r+0xdb6>
 800bcc2:	3408      	adds	r4, #8
 800bcc4:	f01b 0f04 	tst.w	fp, #4
 800bcc8:	f040 857a 	bne.w	800c7c0 <_svfprintf_r+0x12c8>
 800bccc:	e9dd 2110 	ldrd	r2, r1, [sp, #64]	; 0x40
 800bcd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bcd2:	428a      	cmp	r2, r1
 800bcd4:	bfac      	ite	ge
 800bcd6:	189b      	addge	r3, r3, r2
 800bcd8:	185b      	addlt	r3, r3, r1
 800bcda:	930c      	str	r3, [sp, #48]	; 0x30
 800bcdc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800bcde:	b13b      	cbz	r3, 800bcf0 <_svfprintf_r+0x7f8>
 800bce0:	aa22      	add	r2, sp, #136	; 0x88
 800bce2:	4641      	mov	r1, r8
 800bce4:	4650      	mov	r0, sl
 800bce6:	f002 f939 	bl	800df5c <__ssprint_r>
 800bcea:	2800      	cmp	r0, #0
 800bcec:	f040 8586 	bne.w	800c7fc <_svfprintf_r+0x1304>
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	9323      	str	r3, [sp, #140]	; 0x8c
 800bcf4:	9b03      	ldr	r3, [sp, #12]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	f040 859c 	bne.w	800c834 <_svfprintf_r+0x133c>
 800bcfc:	ac25      	add	r4, sp, #148	; 0x94
 800bcfe:	e0ec      	b.n	800beda <_svfprintf_r+0x9e2>
 800bd00:	9003      	str	r0, [sp, #12]
 800bd02:	e62c      	b.n	800b95e <_svfprintf_r+0x466>
 800bd04:	9003      	str	r0, [sp, #12]
 800bd06:	2306      	movs	r3, #6
 800bd08:	e61a      	b.n	800b940 <_svfprintf_r+0x448>
 800bd0a:	9003      	str	r0, [sp, #12]
 800bd0c:	e627      	b.n	800b95e <_svfprintf_r+0x466>
 800bd0e:	ed9d 7b0e 	vldr	d7, [sp, #56]	; 0x38
 800bd12:	2300      	movs	r3, #0
 800bd14:	eeb0 8a47 	vmov.f32	s16, s14
 800bd18:	eef0 8a67 	vmov.f32	s17, s15
 800bd1c:	e62f      	b.n	800b97e <_svfprintf_r+0x486>
 800bd1e:	f802 0c01 	strb.w	r0, [r2, #-1]
 800bd22:	e691      	b.n	800ba48 <_svfprintf_r+0x550>
 800bd24:	f803 0b01 	strb.w	r0, [r3], #1
 800bd28:	1aca      	subs	r2, r1, r3
 800bd2a:	2a00      	cmp	r2, #0
 800bd2c:	dafa      	bge.n	800bd24 <_svfprintf_r+0x82c>
 800bd2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bd30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd32:	3201      	adds	r2, #1
 800bd34:	f103 0301 	add.w	r3, r3, #1
 800bd38:	bfb8      	it	lt
 800bd3a:	2300      	movlt	r3, #0
 800bd3c:	441d      	add	r5, r3
 800bd3e:	e693      	b.n	800ba68 <_svfprintf_r+0x570>
 800bd40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bd42:	462b      	mov	r3, r5
 800bd44:	18a9      	adds	r1, r5, r2
 800bd46:	2030      	movs	r0, #48	; 0x30
 800bd48:	e7ee      	b.n	800bd28 <_svfprintf_r+0x830>
 800bd4a:	9b08      	ldr	r3, [sp, #32]
 800bd4c:	2b46      	cmp	r3, #70	; 0x46
 800bd4e:	d005      	beq.n	800bd5c <_svfprintf_r+0x864>
 800bd50:	2b45      	cmp	r3, #69	; 0x45
 800bd52:	d11b      	bne.n	800bd8c <_svfprintf_r+0x894>
 800bd54:	9b04      	ldr	r3, [sp, #16]
 800bd56:	1c5d      	adds	r5, r3, #1
 800bd58:	2102      	movs	r1, #2
 800bd5a:	e001      	b.n	800bd60 <_svfprintf_r+0x868>
 800bd5c:	9d04      	ldr	r5, [sp, #16]
 800bd5e:	2103      	movs	r1, #3
 800bd60:	ab20      	add	r3, sp, #128	; 0x80
 800bd62:	9301      	str	r3, [sp, #4]
 800bd64:	ab1d      	add	r3, sp, #116	; 0x74
 800bd66:	9300      	str	r3, [sp, #0]
 800bd68:	462a      	mov	r2, r5
 800bd6a:	ab1c      	add	r3, sp, #112	; 0x70
 800bd6c:	4650      	mov	r0, sl
 800bd6e:	eeb0 0a48 	vmov.f32	s0, s16
 800bd72:	eef0 0a68 	vmov.f32	s1, s17
 800bd76:	f000 ff0f 	bl	800cb98 <_dtoa_r>
 800bd7a:	9b08      	ldr	r3, [sp, #32]
 800bd7c:	2b47      	cmp	r3, #71	; 0x47
 800bd7e:	4681      	mov	r9, r0
 800bd80:	d106      	bne.n	800bd90 <_svfprintf_r+0x898>
 800bd82:	f01b 0f01 	tst.w	fp, #1
 800bd86:	d103      	bne.n	800bd90 <_svfprintf_r+0x898>
 800bd88:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800bd8a:	e66d      	b.n	800ba68 <_svfprintf_r+0x570>
 800bd8c:	9d04      	ldr	r5, [sp, #16]
 800bd8e:	e7e3      	b.n	800bd58 <_svfprintf_r+0x860>
 800bd90:	9b08      	ldr	r3, [sp, #32]
 800bd92:	2b46      	cmp	r3, #70	; 0x46
 800bd94:	eb09 0605 	add.w	r6, r9, r5
 800bd98:	d10f      	bne.n	800bdba <_svfprintf_r+0x8c2>
 800bd9a:	f899 3000 	ldrb.w	r3, [r9]
 800bd9e:	2b30      	cmp	r3, #48	; 0x30
 800bda0:	d109      	bne.n	800bdb6 <_svfprintf_r+0x8be>
 800bda2:	ec51 0b18 	vmov	r0, r1, d8
 800bda6:	2200      	movs	r2, #0
 800bda8:	2300      	movs	r3, #0
 800bdaa:	f7f4 fe95 	bl	8000ad8 <__aeabi_dcmpeq>
 800bdae:	b910      	cbnz	r0, 800bdb6 <_svfprintf_r+0x8be>
 800bdb0:	f1c5 0501 	rsb	r5, r5, #1
 800bdb4:	951c      	str	r5, [sp, #112]	; 0x70
 800bdb6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800bdb8:	441e      	add	r6, r3
 800bdba:	ec51 0b18 	vmov	r0, r1, d8
 800bdbe:	2200      	movs	r2, #0
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	f7f4 fe89 	bl	8000ad8 <__aeabi_dcmpeq>
 800bdc6:	b100      	cbz	r0, 800bdca <_svfprintf_r+0x8d2>
 800bdc8:	9620      	str	r6, [sp, #128]	; 0x80
 800bdca:	2230      	movs	r2, #48	; 0x30
 800bdcc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800bdce:	429e      	cmp	r6, r3
 800bdd0:	d9da      	bls.n	800bd88 <_svfprintf_r+0x890>
 800bdd2:	1c59      	adds	r1, r3, #1
 800bdd4:	9120      	str	r1, [sp, #128]	; 0x80
 800bdd6:	701a      	strb	r2, [r3, #0]
 800bdd8:	e7f8      	b.n	800bdcc <_svfprintf_r+0x8d4>
 800bdda:	9b08      	ldr	r3, [sp, #32]
 800bddc:	2b46      	cmp	r3, #70	; 0x46
 800bdde:	f47f ae54 	bne.w	800ba8a <_svfprintf_r+0x592>
 800bde2:	9a04      	ldr	r2, [sp, #16]
 800bde4:	f00b 0301 	and.w	r3, fp, #1
 800bde8:	2d00      	cmp	r5, #0
 800bdea:	ea43 0302 	orr.w	r3, r3, r2
 800bdee:	dd1a      	ble.n	800be26 <_svfprintf_r+0x92e>
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d034      	beq.n	800be5e <_svfprintf_r+0x966>
 800bdf4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bdf6:	18eb      	adds	r3, r5, r3
 800bdf8:	441a      	add	r2, r3
 800bdfa:	9204      	str	r2, [sp, #16]
 800bdfc:	2366      	movs	r3, #102	; 0x66
 800bdfe:	9306      	str	r3, [sp, #24]
 800be00:	e033      	b.n	800be6a <_svfprintf_r+0x972>
 800be02:	f813 6b01 	ldrb.w	r6, [r3], #1
 800be06:	f802 6b01 	strb.w	r6, [r2], #1
 800be0a:	e675      	b.n	800baf8 <_svfprintf_r+0x600>
 800be0c:	b941      	cbnz	r1, 800be20 <_svfprintf_r+0x928>
 800be0e:	2230      	movs	r2, #48	; 0x30
 800be10:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
 800be14:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 800be18:	3330      	adds	r3, #48	; 0x30
 800be1a:	f802 3b01 	strb.w	r3, [r2], #1
 800be1e:	e677      	b.n	800bb10 <_svfprintf_r+0x618>
 800be20:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 800be24:	e7f8      	b.n	800be18 <_svfprintf_r+0x920>
 800be26:	b1e3      	cbz	r3, 800be62 <_svfprintf_r+0x96a>
 800be28:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800be2a:	9a04      	ldr	r2, [sp, #16]
 800be2c:	3301      	adds	r3, #1
 800be2e:	e7e3      	b.n	800bdf8 <_svfprintf_r+0x900>
 800be30:	9b05      	ldr	r3, [sp, #20]
 800be32:	429d      	cmp	r5, r3
 800be34:	db07      	blt.n	800be46 <_svfprintf_r+0x94e>
 800be36:	f01b 0f01 	tst.w	fp, #1
 800be3a:	d02d      	beq.n	800be98 <_svfprintf_r+0x9a0>
 800be3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800be3e:	18eb      	adds	r3, r5, r3
 800be40:	9304      	str	r3, [sp, #16]
 800be42:	2367      	movs	r3, #103	; 0x67
 800be44:	e7db      	b.n	800bdfe <_svfprintf_r+0x906>
 800be46:	9b05      	ldr	r3, [sp, #20]
 800be48:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800be4a:	2d00      	cmp	r5, #0
 800be4c:	4413      	add	r3, r2
 800be4e:	9304      	str	r3, [sp, #16]
 800be50:	dcf7      	bgt.n	800be42 <_svfprintf_r+0x94a>
 800be52:	9a04      	ldr	r2, [sp, #16]
 800be54:	f1c5 0301 	rsb	r3, r5, #1
 800be58:	441a      	add	r2, r3
 800be5a:	9204      	str	r2, [sp, #16]
 800be5c:	e7f1      	b.n	800be42 <_svfprintf_r+0x94a>
 800be5e:	9504      	str	r5, [sp, #16]
 800be60:	e7cc      	b.n	800bdfc <_svfprintf_r+0x904>
 800be62:	2366      	movs	r3, #102	; 0x66
 800be64:	9306      	str	r3, [sp, #24]
 800be66:	2301      	movs	r3, #1
 800be68:	9304      	str	r3, [sp, #16]
 800be6a:	f41b 6380 	ands.w	r3, fp, #1024	; 0x400
 800be6e:	9309      	str	r3, [sp, #36]	; 0x24
 800be70:	d025      	beq.n	800bebe <_svfprintf_r+0x9c6>
 800be72:	2300      	movs	r3, #0
 800be74:	2d00      	cmp	r5, #0
 800be76:	e9cd 3308 	strd	r3, r3, [sp, #32]
 800be7a:	f77f ae61 	ble.w	800bb40 <_svfprintf_r+0x648>
 800be7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be80:	781b      	ldrb	r3, [r3, #0]
 800be82:	2bff      	cmp	r3, #255	; 0xff
 800be84:	d10a      	bne.n	800be9c <_svfprintf_r+0x9a4>
 800be86:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800be8a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800be8c:	4413      	add	r3, r2
 800be8e:	9a04      	ldr	r2, [sp, #16]
 800be90:	fb01 2303 	mla	r3, r1, r3, r2
 800be94:	9304      	str	r3, [sp, #16]
 800be96:	e653      	b.n	800bb40 <_svfprintf_r+0x648>
 800be98:	9504      	str	r5, [sp, #16]
 800be9a:	e7d2      	b.n	800be42 <_svfprintf_r+0x94a>
 800be9c:	42ab      	cmp	r3, r5
 800be9e:	daf2      	bge.n	800be86 <_svfprintf_r+0x98e>
 800bea0:	1aed      	subs	r5, r5, r3
 800bea2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bea4:	785b      	ldrb	r3, [r3, #1]
 800bea6:	b133      	cbz	r3, 800beb6 <_svfprintf_r+0x9be>
 800bea8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800beaa:	3301      	adds	r3, #1
 800beac:	9309      	str	r3, [sp, #36]	; 0x24
 800beae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800beb0:	3301      	adds	r3, #1
 800beb2:	930a      	str	r3, [sp, #40]	; 0x28
 800beb4:	e7e3      	b.n	800be7e <_svfprintf_r+0x986>
 800beb6:	9b08      	ldr	r3, [sp, #32]
 800beb8:	3301      	adds	r3, #1
 800beba:	9308      	str	r3, [sp, #32]
 800bebc:	e7df      	b.n	800be7e <_svfprintf_r+0x986>
 800bebe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bec0:	9308      	str	r3, [sp, #32]
 800bec2:	e63d      	b.n	800bb40 <_svfprintf_r+0x648>
 800bec4:	1d33      	adds	r3, r6, #4
 800bec6:	f01b 0f20 	tst.w	fp, #32
 800beca:	9307      	str	r3, [sp, #28]
 800becc:	d00a      	beq.n	800bee4 <_svfprintf_r+0x9ec>
 800bece:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bed0:	6833      	ldr	r3, [r6, #0]
 800bed2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bed4:	17d2      	asrs	r2, r2, #31
 800bed6:	e9c3 1200 	strd	r1, r2, [r3]
 800beda:	9e07      	ldr	r6, [sp, #28]
 800bedc:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800bee0:	f7ff bb4a 	b.w	800b578 <_svfprintf_r+0x80>
 800bee4:	f01b 0f10 	tst.w	fp, #16
 800bee8:	d003      	beq.n	800bef2 <_svfprintf_r+0x9fa>
 800beea:	6833      	ldr	r3, [r6, #0]
 800beec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800beee:	601a      	str	r2, [r3, #0]
 800bef0:	e7f3      	b.n	800beda <_svfprintf_r+0x9e2>
 800bef2:	f01b 0f40 	tst.w	fp, #64	; 0x40
 800bef6:	d003      	beq.n	800bf00 <_svfprintf_r+0xa08>
 800bef8:	6833      	ldr	r3, [r6, #0]
 800befa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800befc:	801a      	strh	r2, [r3, #0]
 800befe:	e7ec      	b.n	800beda <_svfprintf_r+0x9e2>
 800bf00:	f41b 7f00 	tst.w	fp, #512	; 0x200
 800bf04:	d0f1      	beq.n	800beea <_svfprintf_r+0x9f2>
 800bf06:	6833      	ldr	r3, [r6, #0]
 800bf08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bf0a:	701a      	strb	r2, [r3, #0]
 800bf0c:	e7e5      	b.n	800beda <_svfprintf_r+0x9e2>
 800bf0e:	f04b 0b10 	orr.w	fp, fp, #16
 800bf12:	f01b 0320 	ands.w	r3, fp, #32
 800bf16:	d01f      	beq.n	800bf58 <_svfprintf_r+0xa60>
 800bf18:	1df3      	adds	r3, r6, #7
 800bf1a:	f023 0307 	bic.w	r3, r3, #7
 800bf1e:	461a      	mov	r2, r3
 800bf20:	685d      	ldr	r5, [r3, #4]
 800bf22:	f852 6b08 	ldr.w	r6, [r2], #8
 800bf26:	9207      	str	r2, [sp, #28]
 800bf28:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	2200      	movs	r2, #0
 800bf30:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 800bf34:	9a04      	ldr	r2, [sp, #16]
 800bf36:	3201      	adds	r2, #1
 800bf38:	f000 848d 	beq.w	800c856 <_svfprintf_r+0x135e>
 800bf3c:	ea56 0205 	orrs.w	r2, r6, r5
 800bf40:	f02b 0780 	bic.w	r7, fp, #128	; 0x80
 800bf44:	f040 848c 	bne.w	800c860 <_svfprintf_r+0x1368>
 800bf48:	9a04      	ldr	r2, [sp, #16]
 800bf4a:	2a00      	cmp	r2, #0
 800bf4c:	f000 80f9 	beq.w	800c142 <_svfprintf_r+0xc4a>
 800bf50:	2b01      	cmp	r3, #1
 800bf52:	f040 8488 	bne.w	800c866 <_svfprintf_r+0x136e>
 800bf56:	e09f      	b.n	800c098 <_svfprintf_r+0xba0>
 800bf58:	4632      	mov	r2, r6
 800bf5a:	f01b 0510 	ands.w	r5, fp, #16
 800bf5e:	f852 6b04 	ldr.w	r6, [r2], #4
 800bf62:	9207      	str	r2, [sp, #28]
 800bf64:	d001      	beq.n	800bf6a <_svfprintf_r+0xa72>
 800bf66:	461d      	mov	r5, r3
 800bf68:	e7de      	b.n	800bf28 <_svfprintf_r+0xa30>
 800bf6a:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 800bf6e:	d001      	beq.n	800bf74 <_svfprintf_r+0xa7c>
 800bf70:	b2b6      	uxth	r6, r6
 800bf72:	e7d9      	b.n	800bf28 <_svfprintf_r+0xa30>
 800bf74:	f41b 7500 	ands.w	r5, fp, #512	; 0x200
 800bf78:	d0d6      	beq.n	800bf28 <_svfprintf_r+0xa30>
 800bf7a:	b2f6      	uxtb	r6, r6
 800bf7c:	e7f3      	b.n	800bf66 <_svfprintf_r+0xa6e>
 800bf7e:	4633      	mov	r3, r6
 800bf80:	2278      	movs	r2, #120	; 0x78
 800bf82:	f853 6b04 	ldr.w	r6, [r3], #4
 800bf86:	9307      	str	r3, [sp, #28]
 800bf88:	2330      	movs	r3, #48	; 0x30
 800bf8a:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 800bf8e:	4ba3      	ldr	r3, [pc, #652]	; (800c21c <_svfprintf_r+0xd24>)
 800bf90:	9316      	str	r3, [sp, #88]	; 0x58
 800bf92:	2500      	movs	r5, #0
 800bf94:	f04b 0b02 	orr.w	fp, fp, #2
 800bf98:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 800bf9c:	2302      	movs	r3, #2
 800bf9e:	9206      	str	r2, [sp, #24]
 800bfa0:	e7c5      	b.n	800bf2e <_svfprintf_r+0xa36>
 800bfa2:	4633      	mov	r3, r6
 800bfa4:	2500      	movs	r5, #0
 800bfa6:	f853 9b04 	ldr.w	r9, [r3], #4
 800bfaa:	9307      	str	r3, [sp, #28]
 800bfac:	9b04      	ldr	r3, [sp, #16]
 800bfae:	f88d 506b 	strb.w	r5, [sp, #107]	; 0x6b
 800bfb2:	1c58      	adds	r0, r3, #1
 800bfb4:	d010      	beq.n	800bfd8 <_svfprintf_r+0xae0>
 800bfb6:	461a      	mov	r2, r3
 800bfb8:	4629      	mov	r1, r5
 800bfba:	4648      	mov	r0, r9
 800bfbc:	f7f4 f910 	bl	80001e0 <memchr>
 800bfc0:	9003      	str	r0, [sp, #12]
 800bfc2:	2800      	cmp	r0, #0
 800bfc4:	f000 80d4 	beq.w	800c170 <_svfprintf_r+0xc78>
 800bfc8:	eba0 0309 	sub.w	r3, r0, r9
 800bfcc:	e9cd 5303 	strd	r5, r3, [sp, #12]
 800bfd0:	e9cd 5508 	strd	r5, r5, [sp, #32]
 800bfd4:	462e      	mov	r6, r5
 800bfd6:	e5bb      	b.n	800bb50 <_svfprintf_r+0x658>
 800bfd8:	4648      	mov	r0, r9
 800bfda:	f7f4 f951 	bl	8000280 <strlen>
 800bfde:	e9cd 5003 	strd	r5, r0, [sp, #12]
 800bfe2:	e45f      	b.n	800b8a4 <_svfprintf_r+0x3ac>
 800bfe4:	f04b 0b10 	orr.w	fp, fp, #16
 800bfe8:	f01b 0320 	ands.w	r3, fp, #32
 800bfec:	d009      	beq.n	800c002 <_svfprintf_r+0xb0a>
 800bfee:	1df3      	adds	r3, r6, #7
 800bff0:	f023 0307 	bic.w	r3, r3, #7
 800bff4:	461a      	mov	r2, r3
 800bff6:	685d      	ldr	r5, [r3, #4]
 800bff8:	f852 6b08 	ldr.w	r6, [r2], #8
 800bffc:	9207      	str	r2, [sp, #28]
 800bffe:	2301      	movs	r3, #1
 800c000:	e795      	b.n	800bf2e <_svfprintf_r+0xa36>
 800c002:	4632      	mov	r2, r6
 800c004:	f01b 0510 	ands.w	r5, fp, #16
 800c008:	f852 6b04 	ldr.w	r6, [r2], #4
 800c00c:	9207      	str	r2, [sp, #28]
 800c00e:	d001      	beq.n	800c014 <_svfprintf_r+0xb1c>
 800c010:	461d      	mov	r5, r3
 800c012:	e7f4      	b.n	800bffe <_svfprintf_r+0xb06>
 800c014:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 800c018:	d001      	beq.n	800c01e <_svfprintf_r+0xb26>
 800c01a:	b2b6      	uxth	r6, r6
 800c01c:	e7ef      	b.n	800bffe <_svfprintf_r+0xb06>
 800c01e:	f41b 7500 	ands.w	r5, fp, #512	; 0x200
 800c022:	d0ec      	beq.n	800bffe <_svfprintf_r+0xb06>
 800c024:	b2f6      	uxtb	r6, r6
 800c026:	e7f3      	b.n	800c010 <_svfprintf_r+0xb18>
 800c028:	4b7d      	ldr	r3, [pc, #500]	; (800c220 <_svfprintf_r+0xd28>)
 800c02a:	9316      	str	r3, [sp, #88]	; 0x58
 800c02c:	f01b 0320 	ands.w	r3, fp, #32
 800c030:	d01b      	beq.n	800c06a <_svfprintf_r+0xb72>
 800c032:	1df3      	adds	r3, r6, #7
 800c034:	f023 0307 	bic.w	r3, r3, #7
 800c038:	461a      	mov	r2, r3
 800c03a:	685d      	ldr	r5, [r3, #4]
 800c03c:	f852 6b08 	ldr.w	r6, [r2], #8
 800c040:	9207      	str	r2, [sp, #28]
 800c042:	f01b 0f01 	tst.w	fp, #1
 800c046:	d00a      	beq.n	800c05e <_svfprintf_r+0xb66>
 800c048:	ea56 0305 	orrs.w	r3, r6, r5
 800c04c:	d007      	beq.n	800c05e <_svfprintf_r+0xb66>
 800c04e:	2330      	movs	r3, #48	; 0x30
 800c050:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 800c054:	9b06      	ldr	r3, [sp, #24]
 800c056:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 800c05a:	f04b 0b02 	orr.w	fp, fp, #2
 800c05e:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 800c062:	2302      	movs	r3, #2
 800c064:	e763      	b.n	800bf2e <_svfprintf_r+0xa36>
 800c066:	4b6d      	ldr	r3, [pc, #436]	; (800c21c <_svfprintf_r+0xd24>)
 800c068:	e7df      	b.n	800c02a <_svfprintf_r+0xb32>
 800c06a:	4632      	mov	r2, r6
 800c06c:	f01b 0510 	ands.w	r5, fp, #16
 800c070:	f852 6b04 	ldr.w	r6, [r2], #4
 800c074:	9207      	str	r2, [sp, #28]
 800c076:	d001      	beq.n	800c07c <_svfprintf_r+0xb84>
 800c078:	461d      	mov	r5, r3
 800c07a:	e7e2      	b.n	800c042 <_svfprintf_r+0xb4a>
 800c07c:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 800c080:	d001      	beq.n	800c086 <_svfprintf_r+0xb8e>
 800c082:	b2b6      	uxth	r6, r6
 800c084:	e7dd      	b.n	800c042 <_svfprintf_r+0xb4a>
 800c086:	f41b 7500 	ands.w	r5, fp, #512	; 0x200
 800c08a:	d0da      	beq.n	800c042 <_svfprintf_r+0xb4a>
 800c08c:	b2f6      	uxtb	r6, r6
 800c08e:	e7f3      	b.n	800c078 <_svfprintf_r+0xb80>
 800c090:	2e0a      	cmp	r6, #10
 800c092:	f175 0300 	sbcs.w	r3, r5, #0
 800c096:	d205      	bcs.n	800c0a4 <_svfprintf_r+0xbac>
 800c098:	3630      	adds	r6, #48	; 0x30
 800c09a:	f88d 6137 	strb.w	r6, [sp, #311]	; 0x137
 800c09e:	f20d 1937 	addw	r9, sp, #311	; 0x137
 800c0a2:	e3fb      	b.n	800c89c <_svfprintf_r+0x13a4>
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	9305      	str	r3, [sp, #20]
 800c0a8:	f407 6380 	and.w	r3, r7, #1024	; 0x400
 800c0ac:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800c0b0:	9303      	str	r3, [sp, #12]
 800c0b2:	220a      	movs	r2, #10
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	4630      	mov	r0, r6
 800c0b8:	4629      	mov	r1, r5
 800c0ba:	f7f4 fd7d 	bl	8000bb8 <__aeabi_uldivmod>
 800c0be:	9b05      	ldr	r3, [sp, #20]
 800c0c0:	3301      	adds	r3, #1
 800c0c2:	9305      	str	r3, [sp, #20]
 800c0c4:	9b03      	ldr	r3, [sp, #12]
 800c0c6:	3230      	adds	r2, #48	; 0x30
 800c0c8:	f10b 39ff 	add.w	r9, fp, #4294967295
 800c0cc:	f80b 2c01 	strb.w	r2, [fp, #-1]
 800c0d0:	b1d3      	cbz	r3, 800c108 <_svfprintf_r+0xc10>
 800c0d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0d4:	9a05      	ldr	r2, [sp, #20]
 800c0d6:	781b      	ldrb	r3, [r3, #0]
 800c0d8:	429a      	cmp	r2, r3
 800c0da:	d115      	bne.n	800c108 <_svfprintf_r+0xc10>
 800c0dc:	2aff      	cmp	r2, #255	; 0xff
 800c0de:	d013      	beq.n	800c108 <_svfprintf_r+0xc10>
 800c0e0:	2e0a      	cmp	r6, #10
 800c0e2:	f175 0300 	sbcs.w	r3, r5, #0
 800c0e6:	d30f      	bcc.n	800c108 <_svfprintf_r+0xc10>
 800c0e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c0ea:	9914      	ldr	r1, [sp, #80]	; 0x50
 800c0ec:	eba9 0903 	sub.w	r9, r9, r3
 800c0f0:	461a      	mov	r2, r3
 800c0f2:	4648      	mov	r0, r9
 800c0f4:	f7ff f9eb 	bl	800b4ce <strncpy>
 800c0f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0fa:	785b      	ldrb	r3, [r3, #1]
 800c0fc:	b11b      	cbz	r3, 800c106 <_svfprintf_r+0xc0e>
 800c0fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c100:	3301      	adds	r3, #1
 800c102:	930a      	str	r3, [sp, #40]	; 0x28
 800c104:	2300      	movs	r3, #0
 800c106:	9305      	str	r3, [sp, #20]
 800c108:	2300      	movs	r3, #0
 800c10a:	220a      	movs	r2, #10
 800c10c:	4630      	mov	r0, r6
 800c10e:	4629      	mov	r1, r5
 800c110:	f7f4 fd52 	bl	8000bb8 <__aeabi_uldivmod>
 800c114:	2e0a      	cmp	r6, #10
 800c116:	f175 0300 	sbcs.w	r3, r5, #0
 800c11a:	f0c0 83bf 	bcc.w	800c89c <_svfprintf_r+0x13a4>
 800c11e:	4606      	mov	r6, r0
 800c120:	460d      	mov	r5, r1
 800c122:	46cb      	mov	fp, r9
 800c124:	e7c5      	b.n	800c0b2 <_svfprintf_r+0xbba>
 800c126:	f006 030f 	and.w	r3, r6, #15
 800c12a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c12c:	0936      	lsrs	r6, r6, #4
 800c12e:	5cd3      	ldrb	r3, [r2, r3]
 800c130:	f809 3d01 	strb.w	r3, [r9, #-1]!
 800c134:	ea46 7605 	orr.w	r6, r6, r5, lsl #28
 800c138:	092d      	lsrs	r5, r5, #4
 800c13a:	ea56 0305 	orrs.w	r3, r6, r5
 800c13e:	d1f2      	bne.n	800c126 <_svfprintf_r+0xc2e>
 800c140:	e3ac      	b.n	800c89c <_svfprintf_r+0x13a4>
 800c142:	b933      	cbnz	r3, 800c152 <_svfprintf_r+0xc5a>
 800c144:	f01b 0f01 	tst.w	fp, #1
 800c148:	d003      	beq.n	800c152 <_svfprintf_r+0xc5a>
 800c14a:	2330      	movs	r3, #48	; 0x30
 800c14c:	f88d 3137 	strb.w	r3, [sp, #311]	; 0x137
 800c150:	e7a5      	b.n	800c09e <_svfprintf_r+0xba6>
 800c152:	f50d 799c 	add.w	r9, sp, #312	; 0x138
 800c156:	e3a1      	b.n	800c89c <_svfprintf_r+0x13a4>
 800c158:	9b06      	ldr	r3, [sp, #24]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	f000 8370 	beq.w	800c840 <_svfprintf_r+0x1348>
 800c160:	2000      	movs	r0, #0
 800c162:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 800c166:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 800c16a:	9607      	str	r6, [sp, #28]
 800c16c:	f7ff bb29 	b.w	800b7c2 <_svfprintf_r+0x2ca>
 800c170:	9e03      	ldr	r6, [sp, #12]
 800c172:	f7ff bb98 	b.w	800b8a6 <_svfprintf_r+0x3ae>
 800c176:	2010      	movs	r0, #16
 800c178:	4402      	add	r2, r0
 800c17a:	2b07      	cmp	r3, #7
 800c17c:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800c180:	6060      	str	r0, [r4, #4]
 800c182:	dd08      	ble.n	800c196 <_svfprintf_r+0xc9e>
 800c184:	aa22      	add	r2, sp, #136	; 0x88
 800c186:	4641      	mov	r1, r8
 800c188:	4650      	mov	r0, sl
 800c18a:	f001 fee7 	bl	800df5c <__ssprint_r>
 800c18e:	2800      	cmp	r0, #0
 800c190:	f040 8334 	bne.w	800c7fc <_svfprintf_r+0x1304>
 800c194:	a925      	add	r1, sp, #148	; 0x94
 800c196:	3f10      	subs	r7, #16
 800c198:	460c      	mov	r4, r1
 800c19a:	e4f4      	b.n	800bb86 <_svfprintf_r+0x68e>
 800c19c:	460c      	mov	r4, r1
 800c19e:	e50d      	b.n	800bbbc <_svfprintf_r+0x6c4>
 800c1a0:	aa22      	add	r2, sp, #136	; 0x88
 800c1a2:	4641      	mov	r1, r8
 800c1a4:	4650      	mov	r0, sl
 800c1a6:	f001 fed9 	bl	800df5c <__ssprint_r>
 800c1aa:	2800      	cmp	r0, #0
 800c1ac:	f040 8326 	bne.w	800c7fc <_svfprintf_r+0x1304>
 800c1b0:	ac25      	add	r4, sp, #148	; 0x94
 800c1b2:	e515      	b.n	800bbe0 <_svfprintf_r+0x6e8>
 800c1b4:	aa22      	add	r2, sp, #136	; 0x88
 800c1b6:	4641      	mov	r1, r8
 800c1b8:	4650      	mov	r0, sl
 800c1ba:	f001 fecf 	bl	800df5c <__ssprint_r>
 800c1be:	2800      	cmp	r0, #0
 800c1c0:	f040 831c 	bne.w	800c7fc <_svfprintf_r+0x1304>
 800c1c4:	ac25      	add	r4, sp, #148	; 0x94
 800c1c6:	e51b      	b.n	800bc00 <_svfprintf_r+0x708>
 800c1c8:	2010      	movs	r0, #16
 800c1ca:	4402      	add	r2, r0
 800c1cc:	2b07      	cmp	r3, #7
 800c1ce:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800c1d2:	6060      	str	r0, [r4, #4]
 800c1d4:	dd08      	ble.n	800c1e8 <_svfprintf_r+0xcf0>
 800c1d6:	aa22      	add	r2, sp, #136	; 0x88
 800c1d8:	4641      	mov	r1, r8
 800c1da:	4650      	mov	r0, sl
 800c1dc:	f001 febe 	bl	800df5c <__ssprint_r>
 800c1e0:	2800      	cmp	r0, #0
 800c1e2:	f040 830b 	bne.w	800c7fc <_svfprintf_r+0x1304>
 800c1e6:	a925      	add	r1, sp, #148	; 0x94
 800c1e8:	3f10      	subs	r7, #16
 800c1ea:	460c      	mov	r4, r1
 800c1ec:	e510      	b.n	800bc10 <_svfprintf_r+0x718>
 800c1ee:	460c      	mov	r4, r1
 800c1f0:	e529      	b.n	800bc46 <_svfprintf_r+0x74e>
 800c1f2:	2010      	movs	r0, #16
 800c1f4:	4402      	add	r2, r0
 800c1f6:	2b07      	cmp	r3, #7
 800c1f8:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800c1fc:	6060      	str	r0, [r4, #4]
 800c1fe:	dd08      	ble.n	800c212 <_svfprintf_r+0xd1a>
 800c200:	aa22      	add	r2, sp, #136	; 0x88
 800c202:	4641      	mov	r1, r8
 800c204:	4650      	mov	r0, sl
 800c206:	f001 fea9 	bl	800df5c <__ssprint_r>
 800c20a:	2800      	cmp	r0, #0
 800c20c:	f040 82f6 	bne.w	800c7fc <_svfprintf_r+0x1304>
 800c210:	a925      	add	r1, sp, #148	; 0x94
 800c212:	3e10      	subs	r6, #16
 800c214:	460c      	mov	r4, r1
 800c216:	e529      	b.n	800bc6c <_svfprintf_r+0x774>
 800c218:	460c      	mov	r4, r1
 800c21a:	e541      	b.n	800bca0 <_svfprintf_r+0x7a8>
 800c21c:	0800e21d 	.word	0x0800e21d
 800c220:	0800e20c 	.word	0x0800e20c
 800c224:	9b06      	ldr	r3, [sp, #24]
 800c226:	2b65      	cmp	r3, #101	; 0x65
 800c228:	f340 8230 	ble.w	800c68c <_svfprintf_r+0x1194>
 800c22c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c230:	2200      	movs	r2, #0
 800c232:	2300      	movs	r3, #0
 800c234:	f7f4 fc50 	bl	8000ad8 <__aeabi_dcmpeq>
 800c238:	2800      	cmp	r0, #0
 800c23a:	d068      	beq.n	800c30e <_svfprintf_r+0xe16>
 800c23c:	4b6d      	ldr	r3, [pc, #436]	; (800c3f4 <_svfprintf_r+0xefc>)
 800c23e:	6023      	str	r3, [r4, #0]
 800c240:	2301      	movs	r3, #1
 800c242:	441e      	add	r6, r3
 800c244:	6063      	str	r3, [r4, #4]
 800c246:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c248:	9624      	str	r6, [sp, #144]	; 0x90
 800c24a:	3301      	adds	r3, #1
 800c24c:	2b07      	cmp	r3, #7
 800c24e:	9323      	str	r3, [sp, #140]	; 0x8c
 800c250:	dc37      	bgt.n	800c2c2 <_svfprintf_r+0xdca>
 800c252:	3408      	adds	r4, #8
 800c254:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800c256:	9a05      	ldr	r2, [sp, #20]
 800c258:	4293      	cmp	r3, r2
 800c25a:	db03      	blt.n	800c264 <_svfprintf_r+0xd6c>
 800c25c:	f01b 0f01 	tst.w	fp, #1
 800c260:	f43f ad30 	beq.w	800bcc4 <_svfprintf_r+0x7cc>
 800c264:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c266:	6023      	str	r3, [r4, #0]
 800c268:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c26a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c26c:	6063      	str	r3, [r4, #4]
 800c26e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c270:	4413      	add	r3, r2
 800c272:	9324      	str	r3, [sp, #144]	; 0x90
 800c274:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c276:	3301      	adds	r3, #1
 800c278:	2b07      	cmp	r3, #7
 800c27a:	9323      	str	r3, [sp, #140]	; 0x8c
 800c27c:	dc2b      	bgt.n	800c2d6 <_svfprintf_r+0xdde>
 800c27e:	3408      	adds	r4, #8
 800c280:	9b05      	ldr	r3, [sp, #20]
 800c282:	1e5d      	subs	r5, r3, #1
 800c284:	2d00      	cmp	r5, #0
 800c286:	f77f ad1d 	ble.w	800bcc4 <_svfprintf_r+0x7cc>
 800c28a:	4e5b      	ldr	r6, [pc, #364]	; (800c3f8 <_svfprintf_r+0xf00>)
 800c28c:	2710      	movs	r7, #16
 800c28e:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800c292:	2d10      	cmp	r5, #16
 800c294:	f103 0301 	add.w	r3, r3, #1
 800c298:	f104 0108 	add.w	r1, r4, #8
 800c29c:	6026      	str	r6, [r4, #0]
 800c29e:	dc24      	bgt.n	800c2ea <_svfprintf_r+0xdf2>
 800c2a0:	6065      	str	r5, [r4, #4]
 800c2a2:	2b07      	cmp	r3, #7
 800c2a4:	4415      	add	r5, r2
 800c2a6:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 800c2aa:	f340 8286 	ble.w	800c7ba <_svfprintf_r+0x12c2>
 800c2ae:	aa22      	add	r2, sp, #136	; 0x88
 800c2b0:	4641      	mov	r1, r8
 800c2b2:	4650      	mov	r0, sl
 800c2b4:	f001 fe52 	bl	800df5c <__ssprint_r>
 800c2b8:	2800      	cmp	r0, #0
 800c2ba:	f040 829f 	bne.w	800c7fc <_svfprintf_r+0x1304>
 800c2be:	ac25      	add	r4, sp, #148	; 0x94
 800c2c0:	e500      	b.n	800bcc4 <_svfprintf_r+0x7cc>
 800c2c2:	aa22      	add	r2, sp, #136	; 0x88
 800c2c4:	4641      	mov	r1, r8
 800c2c6:	4650      	mov	r0, sl
 800c2c8:	f001 fe48 	bl	800df5c <__ssprint_r>
 800c2cc:	2800      	cmp	r0, #0
 800c2ce:	f040 8295 	bne.w	800c7fc <_svfprintf_r+0x1304>
 800c2d2:	ac25      	add	r4, sp, #148	; 0x94
 800c2d4:	e7be      	b.n	800c254 <_svfprintf_r+0xd5c>
 800c2d6:	aa22      	add	r2, sp, #136	; 0x88
 800c2d8:	4641      	mov	r1, r8
 800c2da:	4650      	mov	r0, sl
 800c2dc:	f001 fe3e 	bl	800df5c <__ssprint_r>
 800c2e0:	2800      	cmp	r0, #0
 800c2e2:	f040 828b 	bne.w	800c7fc <_svfprintf_r+0x1304>
 800c2e6:	ac25      	add	r4, sp, #148	; 0x94
 800c2e8:	e7ca      	b.n	800c280 <_svfprintf_r+0xd88>
 800c2ea:	3210      	adds	r2, #16
 800c2ec:	2b07      	cmp	r3, #7
 800c2ee:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800c2f2:	6067      	str	r7, [r4, #4]
 800c2f4:	dd08      	ble.n	800c308 <_svfprintf_r+0xe10>
 800c2f6:	aa22      	add	r2, sp, #136	; 0x88
 800c2f8:	4641      	mov	r1, r8
 800c2fa:	4650      	mov	r0, sl
 800c2fc:	f001 fe2e 	bl	800df5c <__ssprint_r>
 800c300:	2800      	cmp	r0, #0
 800c302:	f040 827b 	bne.w	800c7fc <_svfprintf_r+0x1304>
 800c306:	a925      	add	r1, sp, #148	; 0x94
 800c308:	3d10      	subs	r5, #16
 800c30a:	460c      	mov	r4, r1
 800c30c:	e7bf      	b.n	800c28e <_svfprintf_r+0xd96>
 800c30e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800c310:	2b00      	cmp	r3, #0
 800c312:	dc73      	bgt.n	800c3fc <_svfprintf_r+0xf04>
 800c314:	4b37      	ldr	r3, [pc, #220]	; (800c3f4 <_svfprintf_r+0xefc>)
 800c316:	6023      	str	r3, [r4, #0]
 800c318:	2301      	movs	r3, #1
 800c31a:	441e      	add	r6, r3
 800c31c:	6063      	str	r3, [r4, #4]
 800c31e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c320:	9624      	str	r6, [sp, #144]	; 0x90
 800c322:	3301      	adds	r3, #1
 800c324:	2b07      	cmp	r3, #7
 800c326:	9323      	str	r3, [sp, #140]	; 0x8c
 800c328:	dc3d      	bgt.n	800c3a6 <_svfprintf_r+0xeae>
 800c32a:	3408      	adds	r4, #8
 800c32c:	9905      	ldr	r1, [sp, #20]
 800c32e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c330:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c332:	430a      	orrs	r2, r1
 800c334:	f00b 0101 	and.w	r1, fp, #1
 800c338:	430a      	orrs	r2, r1
 800c33a:	f43f acc3 	beq.w	800bcc4 <_svfprintf_r+0x7cc>
 800c33e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c340:	6022      	str	r2, [r4, #0]
 800c342:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c344:	6062      	str	r2, [r4, #4]
 800c346:	4413      	add	r3, r2
 800c348:	9324      	str	r3, [sp, #144]	; 0x90
 800c34a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c34c:	3301      	adds	r3, #1
 800c34e:	2b07      	cmp	r3, #7
 800c350:	9323      	str	r3, [sp, #140]	; 0x8c
 800c352:	dc32      	bgt.n	800c3ba <_svfprintf_r+0xec2>
 800c354:	3408      	adds	r4, #8
 800c356:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 800c358:	2d00      	cmp	r5, #0
 800c35a:	da1b      	bge.n	800c394 <_svfprintf_r+0xe9c>
 800c35c:	4e26      	ldr	r6, [pc, #152]	; (800c3f8 <_svfprintf_r+0xf00>)
 800c35e:	426d      	negs	r5, r5
 800c360:	4623      	mov	r3, r4
 800c362:	2710      	movs	r7, #16
 800c364:	e9dd 2123 	ldrd	r2, r1, [sp, #140]	; 0x8c
 800c368:	2d10      	cmp	r5, #16
 800c36a:	f102 0201 	add.w	r2, r2, #1
 800c36e:	f104 0408 	add.w	r4, r4, #8
 800c372:	601e      	str	r6, [r3, #0]
 800c374:	dc2b      	bgt.n	800c3ce <_svfprintf_r+0xed6>
 800c376:	605d      	str	r5, [r3, #4]
 800c378:	2a07      	cmp	r2, #7
 800c37a:	440d      	add	r5, r1
 800c37c:	e9cd 2523 	strd	r2, r5, [sp, #140]	; 0x8c
 800c380:	dd08      	ble.n	800c394 <_svfprintf_r+0xe9c>
 800c382:	aa22      	add	r2, sp, #136	; 0x88
 800c384:	4641      	mov	r1, r8
 800c386:	4650      	mov	r0, sl
 800c388:	f001 fde8 	bl	800df5c <__ssprint_r>
 800c38c:	2800      	cmp	r0, #0
 800c38e:	f040 8235 	bne.w	800c7fc <_svfprintf_r+0x1304>
 800c392:	ac25      	add	r4, sp, #148	; 0x94
 800c394:	9b05      	ldr	r3, [sp, #20]
 800c396:	9a05      	ldr	r2, [sp, #20]
 800c398:	6063      	str	r3, [r4, #4]
 800c39a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c39c:	f8c4 9000 	str.w	r9, [r4]
 800c3a0:	4413      	add	r3, r2
 800c3a2:	9324      	str	r3, [sp, #144]	; 0x90
 800c3a4:	e487      	b.n	800bcb6 <_svfprintf_r+0x7be>
 800c3a6:	aa22      	add	r2, sp, #136	; 0x88
 800c3a8:	4641      	mov	r1, r8
 800c3aa:	4650      	mov	r0, sl
 800c3ac:	f001 fdd6 	bl	800df5c <__ssprint_r>
 800c3b0:	2800      	cmp	r0, #0
 800c3b2:	f040 8223 	bne.w	800c7fc <_svfprintf_r+0x1304>
 800c3b6:	ac25      	add	r4, sp, #148	; 0x94
 800c3b8:	e7b8      	b.n	800c32c <_svfprintf_r+0xe34>
 800c3ba:	aa22      	add	r2, sp, #136	; 0x88
 800c3bc:	4641      	mov	r1, r8
 800c3be:	4650      	mov	r0, sl
 800c3c0:	f001 fdcc 	bl	800df5c <__ssprint_r>
 800c3c4:	2800      	cmp	r0, #0
 800c3c6:	f040 8219 	bne.w	800c7fc <_svfprintf_r+0x1304>
 800c3ca:	ac25      	add	r4, sp, #148	; 0x94
 800c3cc:	e7c3      	b.n	800c356 <_svfprintf_r+0xe5e>
 800c3ce:	3110      	adds	r1, #16
 800c3d0:	2a07      	cmp	r2, #7
 800c3d2:	e9cd 2123 	strd	r2, r1, [sp, #140]	; 0x8c
 800c3d6:	605f      	str	r7, [r3, #4]
 800c3d8:	dd08      	ble.n	800c3ec <_svfprintf_r+0xef4>
 800c3da:	aa22      	add	r2, sp, #136	; 0x88
 800c3dc:	4641      	mov	r1, r8
 800c3de:	4650      	mov	r0, sl
 800c3e0:	f001 fdbc 	bl	800df5c <__ssprint_r>
 800c3e4:	2800      	cmp	r0, #0
 800c3e6:	f040 8209 	bne.w	800c7fc <_svfprintf_r+0x1304>
 800c3ea:	ac25      	add	r4, sp, #148	; 0x94
 800c3ec:	3d10      	subs	r5, #16
 800c3ee:	4623      	mov	r3, r4
 800c3f0:	e7b8      	b.n	800c364 <_svfprintf_r+0xe6c>
 800c3f2:	bf00      	nop
 800c3f4:	0800e268 	.word	0x0800e268
 800c3f8:	0800e27a 	.word	0x0800e27a
 800c3fc:	9f05      	ldr	r7, [sp, #20]
 800c3fe:	42af      	cmp	r7, r5
 800c400:	bfa8      	it	ge
 800c402:	462f      	movge	r7, r5
 800c404:	2f00      	cmp	r7, #0
 800c406:	dd0a      	ble.n	800c41e <_svfprintf_r+0xf26>
 800c408:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c40a:	3301      	adds	r3, #1
 800c40c:	443e      	add	r6, r7
 800c40e:	2b07      	cmp	r3, #7
 800c410:	e9c4 9700 	strd	r9, r7, [r4]
 800c414:	9624      	str	r6, [sp, #144]	; 0x90
 800c416:	9323      	str	r3, [sp, #140]	; 0x8c
 800c418:	f300 8085 	bgt.w	800c526 <_svfprintf_r+0x102e>
 800c41c:	3408      	adds	r4, #8
 800c41e:	2f00      	cmp	r7, #0
 800c420:	bfac      	ite	ge
 800c422:	1bee      	subge	r6, r5, r7
 800c424:	462e      	movlt	r6, r5
 800c426:	2e00      	cmp	r6, #0
 800c428:	dd19      	ble.n	800c45e <_svfprintf_r+0xf66>
 800c42a:	4f97      	ldr	r7, [pc, #604]	; (800c688 <_svfprintf_r+0x1190>)
 800c42c:	6027      	str	r7, [r4, #0]
 800c42e:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800c432:	2e10      	cmp	r6, #16
 800c434:	f103 0301 	add.w	r3, r3, #1
 800c438:	f104 0108 	add.w	r1, r4, #8
 800c43c:	dc7d      	bgt.n	800c53a <_svfprintf_r+0x1042>
 800c43e:	6066      	str	r6, [r4, #4]
 800c440:	2b07      	cmp	r3, #7
 800c442:	4416      	add	r6, r2
 800c444:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 800c448:	f340 808a 	ble.w	800c560 <_svfprintf_r+0x1068>
 800c44c:	aa22      	add	r2, sp, #136	; 0x88
 800c44e:	4641      	mov	r1, r8
 800c450:	4650      	mov	r0, sl
 800c452:	f001 fd83 	bl	800df5c <__ssprint_r>
 800c456:	2800      	cmp	r0, #0
 800c458:	f040 81d0 	bne.w	800c7fc <_svfprintf_r+0x1304>
 800c45c:	ac25      	add	r4, sp, #148	; 0x94
 800c45e:	f41b 6f80 	tst.w	fp, #1024	; 0x400
 800c462:	444d      	add	r5, r9
 800c464:	d00a      	beq.n	800c47c <_svfprintf_r+0xf84>
 800c466:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d17b      	bne.n	800c564 <_svfprintf_r+0x106c>
 800c46c:	9b08      	ldr	r3, [sp, #32]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d17b      	bne.n	800c56a <_svfprintf_r+0x1072>
 800c472:	9b05      	ldr	r3, [sp, #20]
 800c474:	444b      	add	r3, r9
 800c476:	429d      	cmp	r5, r3
 800c478:	bf28      	it	cs
 800c47a:	461d      	movcs	r5, r3
 800c47c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800c47e:	9a05      	ldr	r2, [sp, #20]
 800c480:	4293      	cmp	r3, r2
 800c482:	db02      	blt.n	800c48a <_svfprintf_r+0xf92>
 800c484:	f01b 0f01 	tst.w	fp, #1
 800c488:	d00e      	beq.n	800c4a8 <_svfprintf_r+0xfb0>
 800c48a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c48c:	6023      	str	r3, [r4, #0]
 800c48e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c490:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c492:	6063      	str	r3, [r4, #4]
 800c494:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c496:	4413      	add	r3, r2
 800c498:	9324      	str	r3, [sp, #144]	; 0x90
 800c49a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c49c:	3301      	adds	r3, #1
 800c49e:	2b07      	cmp	r3, #7
 800c4a0:	9323      	str	r3, [sp, #140]	; 0x8c
 800c4a2:	f300 80dd 	bgt.w	800c660 <_svfprintf_r+0x1168>
 800c4a6:	3408      	adds	r4, #8
 800c4a8:	9b05      	ldr	r3, [sp, #20]
 800c4aa:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800c4ac:	eb09 0203 	add.w	r2, r9, r3
 800c4b0:	1b9e      	subs	r6, r3, r6
 800c4b2:	1b52      	subs	r2, r2, r5
 800c4b4:	4296      	cmp	r6, r2
 800c4b6:	bfa8      	it	ge
 800c4b8:	4616      	movge	r6, r2
 800c4ba:	2e00      	cmp	r6, #0
 800c4bc:	dd0b      	ble.n	800c4d6 <_svfprintf_r+0xfde>
 800c4be:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c4c0:	4433      	add	r3, r6
 800c4c2:	9324      	str	r3, [sp, #144]	; 0x90
 800c4c4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c4c6:	3301      	adds	r3, #1
 800c4c8:	2b07      	cmp	r3, #7
 800c4ca:	e9c4 5600 	strd	r5, r6, [r4]
 800c4ce:	9323      	str	r3, [sp, #140]	; 0x8c
 800c4d0:	f300 80d0 	bgt.w	800c674 <_svfprintf_r+0x117c>
 800c4d4:	3408      	adds	r4, #8
 800c4d6:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 800c4d8:	9b05      	ldr	r3, [sp, #20]
 800c4da:	2e00      	cmp	r6, #0
 800c4dc:	eba3 0505 	sub.w	r5, r3, r5
 800c4e0:	bfa8      	it	ge
 800c4e2:	1bad      	subge	r5, r5, r6
 800c4e4:	2d00      	cmp	r5, #0
 800c4e6:	f77f abed 	ble.w	800bcc4 <_svfprintf_r+0x7cc>
 800c4ea:	4e67      	ldr	r6, [pc, #412]	; (800c688 <_svfprintf_r+0x1190>)
 800c4ec:	2710      	movs	r7, #16
 800c4ee:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800c4f2:	2d10      	cmp	r5, #16
 800c4f4:	f103 0301 	add.w	r3, r3, #1
 800c4f8:	f104 0108 	add.w	r1, r4, #8
 800c4fc:	6026      	str	r6, [r4, #0]
 800c4fe:	f77f aecf 	ble.w	800c2a0 <_svfprintf_r+0xda8>
 800c502:	3210      	adds	r2, #16
 800c504:	2b07      	cmp	r3, #7
 800c506:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800c50a:	6067      	str	r7, [r4, #4]
 800c50c:	dd08      	ble.n	800c520 <_svfprintf_r+0x1028>
 800c50e:	aa22      	add	r2, sp, #136	; 0x88
 800c510:	4641      	mov	r1, r8
 800c512:	4650      	mov	r0, sl
 800c514:	f001 fd22 	bl	800df5c <__ssprint_r>
 800c518:	2800      	cmp	r0, #0
 800c51a:	f040 816f 	bne.w	800c7fc <_svfprintf_r+0x1304>
 800c51e:	a925      	add	r1, sp, #148	; 0x94
 800c520:	3d10      	subs	r5, #16
 800c522:	460c      	mov	r4, r1
 800c524:	e7e3      	b.n	800c4ee <_svfprintf_r+0xff6>
 800c526:	aa22      	add	r2, sp, #136	; 0x88
 800c528:	4641      	mov	r1, r8
 800c52a:	4650      	mov	r0, sl
 800c52c:	f001 fd16 	bl	800df5c <__ssprint_r>
 800c530:	2800      	cmp	r0, #0
 800c532:	f040 8163 	bne.w	800c7fc <_svfprintf_r+0x1304>
 800c536:	ac25      	add	r4, sp, #148	; 0x94
 800c538:	e771      	b.n	800c41e <_svfprintf_r+0xf26>
 800c53a:	2010      	movs	r0, #16
 800c53c:	4402      	add	r2, r0
 800c53e:	2b07      	cmp	r3, #7
 800c540:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800c544:	6060      	str	r0, [r4, #4]
 800c546:	dd08      	ble.n	800c55a <_svfprintf_r+0x1062>
 800c548:	aa22      	add	r2, sp, #136	; 0x88
 800c54a:	4641      	mov	r1, r8
 800c54c:	4650      	mov	r0, sl
 800c54e:	f001 fd05 	bl	800df5c <__ssprint_r>
 800c552:	2800      	cmp	r0, #0
 800c554:	f040 8152 	bne.w	800c7fc <_svfprintf_r+0x1304>
 800c558:	a925      	add	r1, sp, #148	; 0x94
 800c55a:	3e10      	subs	r6, #16
 800c55c:	460c      	mov	r4, r1
 800c55e:	e765      	b.n	800c42c <_svfprintf_r+0xf34>
 800c560:	460c      	mov	r4, r1
 800c562:	e77c      	b.n	800c45e <_svfprintf_r+0xf66>
 800c564:	9b08      	ldr	r3, [sp, #32]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d04a      	beq.n	800c600 <_svfprintf_r+0x1108>
 800c56a:	9b08      	ldr	r3, [sp, #32]
 800c56c:	3b01      	subs	r3, #1
 800c56e:	9308      	str	r3, [sp, #32]
 800c570:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c572:	6023      	str	r3, [r4, #0]
 800c574:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c576:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c578:	6063      	str	r3, [r4, #4]
 800c57a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c57c:	4413      	add	r3, r2
 800c57e:	9324      	str	r3, [sp, #144]	; 0x90
 800c580:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c582:	3301      	adds	r3, #1
 800c584:	2b07      	cmp	r3, #7
 800c586:	9323      	str	r3, [sp, #140]	; 0x8c
 800c588:	dc41      	bgt.n	800c60e <_svfprintf_r+0x1116>
 800c58a:	3408      	adds	r4, #8
 800c58c:	9b05      	ldr	r3, [sp, #20]
 800c58e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c590:	eb09 0703 	add.w	r7, r9, r3
 800c594:	1b7b      	subs	r3, r7, r5
 800c596:	7817      	ldrb	r7, [r2, #0]
 800c598:	429f      	cmp	r7, r3
 800c59a:	bfa8      	it	ge
 800c59c:	461f      	movge	r7, r3
 800c59e:	2f00      	cmp	r7, #0
 800c5a0:	dd0a      	ble.n	800c5b8 <_svfprintf_r+0x10c0>
 800c5a2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c5a4:	443b      	add	r3, r7
 800c5a6:	9324      	str	r3, [sp, #144]	; 0x90
 800c5a8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c5aa:	3301      	adds	r3, #1
 800c5ac:	2b07      	cmp	r3, #7
 800c5ae:	e9c4 5700 	strd	r5, r7, [r4]
 800c5b2:	9323      	str	r3, [sp, #140]	; 0x8c
 800c5b4:	dc35      	bgt.n	800c622 <_svfprintf_r+0x112a>
 800c5b6:	3408      	adds	r4, #8
 800c5b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c5ba:	781e      	ldrb	r6, [r3, #0]
 800c5bc:	2f00      	cmp	r7, #0
 800c5be:	bfa8      	it	ge
 800c5c0:	1bf6      	subge	r6, r6, r7
 800c5c2:	2e00      	cmp	r6, #0
 800c5c4:	dd18      	ble.n	800c5f8 <_svfprintf_r+0x1100>
 800c5c6:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800c5ca:	482f      	ldr	r0, [pc, #188]	; (800c688 <_svfprintf_r+0x1190>)
 800c5cc:	6020      	str	r0, [r4, #0]
 800c5ce:	2e10      	cmp	r6, #16
 800c5d0:	f103 0301 	add.w	r3, r3, #1
 800c5d4:	f104 0108 	add.w	r1, r4, #8
 800c5d8:	dc2d      	bgt.n	800c636 <_svfprintf_r+0x113e>
 800c5da:	4432      	add	r2, r6
 800c5dc:	2b07      	cmp	r3, #7
 800c5de:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800c5e2:	6066      	str	r6, [r4, #4]
 800c5e4:	dd3a      	ble.n	800c65c <_svfprintf_r+0x1164>
 800c5e6:	aa22      	add	r2, sp, #136	; 0x88
 800c5e8:	4641      	mov	r1, r8
 800c5ea:	4650      	mov	r0, sl
 800c5ec:	f001 fcb6 	bl	800df5c <__ssprint_r>
 800c5f0:	2800      	cmp	r0, #0
 800c5f2:	f040 8103 	bne.w	800c7fc <_svfprintf_r+0x1304>
 800c5f6:	ac25      	add	r4, sp, #148	; 0x94
 800c5f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c5fa:	781b      	ldrb	r3, [r3, #0]
 800c5fc:	441d      	add	r5, r3
 800c5fe:	e732      	b.n	800c466 <_svfprintf_r+0xf6e>
 800c600:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c602:	3b01      	subs	r3, #1
 800c604:	930a      	str	r3, [sp, #40]	; 0x28
 800c606:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c608:	3b01      	subs	r3, #1
 800c60a:	9309      	str	r3, [sp, #36]	; 0x24
 800c60c:	e7b0      	b.n	800c570 <_svfprintf_r+0x1078>
 800c60e:	aa22      	add	r2, sp, #136	; 0x88
 800c610:	4641      	mov	r1, r8
 800c612:	4650      	mov	r0, sl
 800c614:	f001 fca2 	bl	800df5c <__ssprint_r>
 800c618:	2800      	cmp	r0, #0
 800c61a:	f040 80ef 	bne.w	800c7fc <_svfprintf_r+0x1304>
 800c61e:	ac25      	add	r4, sp, #148	; 0x94
 800c620:	e7b4      	b.n	800c58c <_svfprintf_r+0x1094>
 800c622:	aa22      	add	r2, sp, #136	; 0x88
 800c624:	4641      	mov	r1, r8
 800c626:	4650      	mov	r0, sl
 800c628:	f001 fc98 	bl	800df5c <__ssprint_r>
 800c62c:	2800      	cmp	r0, #0
 800c62e:	f040 80e5 	bne.w	800c7fc <_svfprintf_r+0x1304>
 800c632:	ac25      	add	r4, sp, #148	; 0x94
 800c634:	e7c0      	b.n	800c5b8 <_svfprintf_r+0x10c0>
 800c636:	2010      	movs	r0, #16
 800c638:	4402      	add	r2, r0
 800c63a:	2b07      	cmp	r3, #7
 800c63c:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800c640:	6060      	str	r0, [r4, #4]
 800c642:	dd08      	ble.n	800c656 <_svfprintf_r+0x115e>
 800c644:	aa22      	add	r2, sp, #136	; 0x88
 800c646:	4641      	mov	r1, r8
 800c648:	4650      	mov	r0, sl
 800c64a:	f001 fc87 	bl	800df5c <__ssprint_r>
 800c64e:	2800      	cmp	r0, #0
 800c650:	f040 80d4 	bne.w	800c7fc <_svfprintf_r+0x1304>
 800c654:	a925      	add	r1, sp, #148	; 0x94
 800c656:	3e10      	subs	r6, #16
 800c658:	460c      	mov	r4, r1
 800c65a:	e7b4      	b.n	800c5c6 <_svfprintf_r+0x10ce>
 800c65c:	460c      	mov	r4, r1
 800c65e:	e7cb      	b.n	800c5f8 <_svfprintf_r+0x1100>
 800c660:	aa22      	add	r2, sp, #136	; 0x88
 800c662:	4641      	mov	r1, r8
 800c664:	4650      	mov	r0, sl
 800c666:	f001 fc79 	bl	800df5c <__ssprint_r>
 800c66a:	2800      	cmp	r0, #0
 800c66c:	f040 80c6 	bne.w	800c7fc <_svfprintf_r+0x1304>
 800c670:	ac25      	add	r4, sp, #148	; 0x94
 800c672:	e719      	b.n	800c4a8 <_svfprintf_r+0xfb0>
 800c674:	aa22      	add	r2, sp, #136	; 0x88
 800c676:	4641      	mov	r1, r8
 800c678:	4650      	mov	r0, sl
 800c67a:	f001 fc6f 	bl	800df5c <__ssprint_r>
 800c67e:	2800      	cmp	r0, #0
 800c680:	f040 80bc 	bne.w	800c7fc <_svfprintf_r+0x1304>
 800c684:	ac25      	add	r4, sp, #148	; 0x94
 800c686:	e726      	b.n	800c4d6 <_svfprintf_r+0xfde>
 800c688:	0800e27a 	.word	0x0800e27a
 800c68c:	9a05      	ldr	r2, [sp, #20]
 800c68e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c690:	2a01      	cmp	r2, #1
 800c692:	f106 0601 	add.w	r6, r6, #1
 800c696:	f103 0301 	add.w	r3, r3, #1
 800c69a:	f104 0508 	add.w	r5, r4, #8
 800c69e:	dc02      	bgt.n	800c6a6 <_svfprintf_r+0x11ae>
 800c6a0:	f01b 0f01 	tst.w	fp, #1
 800c6a4:	d07e      	beq.n	800c7a4 <_svfprintf_r+0x12ac>
 800c6a6:	2201      	movs	r2, #1
 800c6a8:	2b07      	cmp	r3, #7
 800c6aa:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 800c6ae:	f8c4 9000 	str.w	r9, [r4]
 800c6b2:	6062      	str	r2, [r4, #4]
 800c6b4:	dd08      	ble.n	800c6c8 <_svfprintf_r+0x11d0>
 800c6b6:	aa22      	add	r2, sp, #136	; 0x88
 800c6b8:	4641      	mov	r1, r8
 800c6ba:	4650      	mov	r0, sl
 800c6bc:	f001 fc4e 	bl	800df5c <__ssprint_r>
 800c6c0:	2800      	cmp	r0, #0
 800c6c2:	f040 809b 	bne.w	800c7fc <_svfprintf_r+0x1304>
 800c6c6:	ad25      	add	r5, sp, #148	; 0x94
 800c6c8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c6ca:	602b      	str	r3, [r5, #0]
 800c6cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c6ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c6d0:	606b      	str	r3, [r5, #4]
 800c6d2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c6d4:	4413      	add	r3, r2
 800c6d6:	9324      	str	r3, [sp, #144]	; 0x90
 800c6d8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c6da:	3301      	adds	r3, #1
 800c6dc:	2b07      	cmp	r3, #7
 800c6de:	9323      	str	r3, [sp, #140]	; 0x8c
 800c6e0:	dc32      	bgt.n	800c748 <_svfprintf_r+0x1250>
 800c6e2:	3508      	adds	r5, #8
 800c6e4:	9b05      	ldr	r3, [sp, #20]
 800c6e6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c6ea:	1e5c      	subs	r4, r3, #1
 800c6ec:	2200      	movs	r2, #0
 800c6ee:	2300      	movs	r3, #0
 800c6f0:	f7f4 f9f2 	bl	8000ad8 <__aeabi_dcmpeq>
 800c6f4:	2800      	cmp	r0, #0
 800c6f6:	d130      	bne.n	800c75a <_svfprintf_r+0x1262>
 800c6f8:	9923      	ldr	r1, [sp, #140]	; 0x8c
 800c6fa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c6fc:	9a05      	ldr	r2, [sp, #20]
 800c6fe:	3101      	adds	r1, #1
 800c700:	3b01      	subs	r3, #1
 800c702:	f109 0001 	add.w	r0, r9, #1
 800c706:	4413      	add	r3, r2
 800c708:	2907      	cmp	r1, #7
 800c70a:	e9c5 0400 	strd	r0, r4, [r5]
 800c70e:	e9cd 1323 	strd	r1, r3, [sp, #140]	; 0x8c
 800c712:	dd50      	ble.n	800c7b6 <_svfprintf_r+0x12be>
 800c714:	aa22      	add	r2, sp, #136	; 0x88
 800c716:	4641      	mov	r1, r8
 800c718:	4650      	mov	r0, sl
 800c71a:	f001 fc1f 	bl	800df5c <__ssprint_r>
 800c71e:	2800      	cmp	r0, #0
 800c720:	d16c      	bne.n	800c7fc <_svfprintf_r+0x1304>
 800c722:	ad25      	add	r5, sp, #148	; 0x94
 800c724:	ab1e      	add	r3, sp, #120	; 0x78
 800c726:	602b      	str	r3, [r5, #0]
 800c728:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c72a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c72c:	606b      	str	r3, [r5, #4]
 800c72e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c730:	4413      	add	r3, r2
 800c732:	9324      	str	r3, [sp, #144]	; 0x90
 800c734:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c736:	3301      	adds	r3, #1
 800c738:	2b07      	cmp	r3, #7
 800c73a:	9323      	str	r3, [sp, #140]	; 0x8c
 800c73c:	f73f adb7 	bgt.w	800c2ae <_svfprintf_r+0xdb6>
 800c740:	f105 0408 	add.w	r4, r5, #8
 800c744:	f7ff babe 	b.w	800bcc4 <_svfprintf_r+0x7cc>
 800c748:	aa22      	add	r2, sp, #136	; 0x88
 800c74a:	4641      	mov	r1, r8
 800c74c:	4650      	mov	r0, sl
 800c74e:	f001 fc05 	bl	800df5c <__ssprint_r>
 800c752:	2800      	cmp	r0, #0
 800c754:	d152      	bne.n	800c7fc <_svfprintf_r+0x1304>
 800c756:	ad25      	add	r5, sp, #148	; 0x94
 800c758:	e7c4      	b.n	800c6e4 <_svfprintf_r+0x11ec>
 800c75a:	2c00      	cmp	r4, #0
 800c75c:	dde2      	ble.n	800c724 <_svfprintf_r+0x122c>
 800c75e:	4e56      	ldr	r6, [pc, #344]	; (800c8b8 <_svfprintf_r+0x13c0>)
 800c760:	2710      	movs	r7, #16
 800c762:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800c766:	2c10      	cmp	r4, #16
 800c768:	f103 0301 	add.w	r3, r3, #1
 800c76c:	f105 0108 	add.w	r1, r5, #8
 800c770:	602e      	str	r6, [r5, #0]
 800c772:	dc07      	bgt.n	800c784 <_svfprintf_r+0x128c>
 800c774:	606c      	str	r4, [r5, #4]
 800c776:	2b07      	cmp	r3, #7
 800c778:	4414      	add	r4, r2
 800c77a:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
 800c77e:	dcc9      	bgt.n	800c714 <_svfprintf_r+0x121c>
 800c780:	460d      	mov	r5, r1
 800c782:	e7cf      	b.n	800c724 <_svfprintf_r+0x122c>
 800c784:	3210      	adds	r2, #16
 800c786:	2b07      	cmp	r3, #7
 800c788:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800c78c:	606f      	str	r7, [r5, #4]
 800c78e:	dd06      	ble.n	800c79e <_svfprintf_r+0x12a6>
 800c790:	aa22      	add	r2, sp, #136	; 0x88
 800c792:	4641      	mov	r1, r8
 800c794:	4650      	mov	r0, sl
 800c796:	f001 fbe1 	bl	800df5c <__ssprint_r>
 800c79a:	bb78      	cbnz	r0, 800c7fc <_svfprintf_r+0x1304>
 800c79c:	a925      	add	r1, sp, #148	; 0x94
 800c79e:	3c10      	subs	r4, #16
 800c7a0:	460d      	mov	r5, r1
 800c7a2:	e7de      	b.n	800c762 <_svfprintf_r+0x126a>
 800c7a4:	2201      	movs	r2, #1
 800c7a6:	2b07      	cmp	r3, #7
 800c7a8:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 800c7ac:	f8c4 9000 	str.w	r9, [r4]
 800c7b0:	6062      	str	r2, [r4, #4]
 800c7b2:	ddb7      	ble.n	800c724 <_svfprintf_r+0x122c>
 800c7b4:	e7ae      	b.n	800c714 <_svfprintf_r+0x121c>
 800c7b6:	3508      	adds	r5, #8
 800c7b8:	e7b4      	b.n	800c724 <_svfprintf_r+0x122c>
 800c7ba:	460c      	mov	r4, r1
 800c7bc:	f7ff ba82 	b.w	800bcc4 <_svfprintf_r+0x7cc>
 800c7c0:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 800c7c4:	1a9d      	subs	r5, r3, r2
 800c7c6:	2d00      	cmp	r5, #0
 800c7c8:	f77f aa80 	ble.w	800bccc <_svfprintf_r+0x7d4>
 800c7cc:	4e3b      	ldr	r6, [pc, #236]	; (800c8bc <_svfprintf_r+0x13c4>)
 800c7ce:	2710      	movs	r7, #16
 800c7d0:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800c7d4:	2d10      	cmp	r5, #16
 800c7d6:	f103 0301 	add.w	r3, r3, #1
 800c7da:	6026      	str	r6, [r4, #0]
 800c7dc:	dc18      	bgt.n	800c810 <_svfprintf_r+0x1318>
 800c7de:	6065      	str	r5, [r4, #4]
 800c7e0:	2b07      	cmp	r3, #7
 800c7e2:	4415      	add	r5, r2
 800c7e4:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 800c7e8:	f77f aa70 	ble.w	800bccc <_svfprintf_r+0x7d4>
 800c7ec:	aa22      	add	r2, sp, #136	; 0x88
 800c7ee:	4641      	mov	r1, r8
 800c7f0:	4650      	mov	r0, sl
 800c7f2:	f001 fbb3 	bl	800df5c <__ssprint_r>
 800c7f6:	2800      	cmp	r0, #0
 800c7f8:	f43f aa68 	beq.w	800bccc <_svfprintf_r+0x7d4>
 800c7fc:	9b03      	ldr	r3, [sp, #12]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	f43f a887 	beq.w	800b912 <_svfprintf_r+0x41a>
 800c804:	4619      	mov	r1, r3
 800c806:	4650      	mov	r0, sl
 800c808:	f7fd ff0c 	bl	800a624 <_free_r>
 800c80c:	f7ff b881 	b.w	800b912 <_svfprintf_r+0x41a>
 800c810:	3210      	adds	r2, #16
 800c812:	2b07      	cmp	r3, #7
 800c814:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800c818:	6067      	str	r7, [r4, #4]
 800c81a:	dc02      	bgt.n	800c822 <_svfprintf_r+0x132a>
 800c81c:	3408      	adds	r4, #8
 800c81e:	3d10      	subs	r5, #16
 800c820:	e7d6      	b.n	800c7d0 <_svfprintf_r+0x12d8>
 800c822:	aa22      	add	r2, sp, #136	; 0x88
 800c824:	4641      	mov	r1, r8
 800c826:	4650      	mov	r0, sl
 800c828:	f001 fb98 	bl	800df5c <__ssprint_r>
 800c82c:	2800      	cmp	r0, #0
 800c82e:	d1e5      	bne.n	800c7fc <_svfprintf_r+0x1304>
 800c830:	ac25      	add	r4, sp, #148	; 0x94
 800c832:	e7f4      	b.n	800c81e <_svfprintf_r+0x1326>
 800c834:	9903      	ldr	r1, [sp, #12]
 800c836:	4650      	mov	r0, sl
 800c838:	f7fd fef4 	bl	800a624 <_free_r>
 800c83c:	f7ff ba5e 	b.w	800bcfc <_svfprintf_r+0x804>
 800c840:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c842:	2b00      	cmp	r3, #0
 800c844:	f43f a865 	beq.w	800b912 <_svfprintf_r+0x41a>
 800c848:	aa22      	add	r2, sp, #136	; 0x88
 800c84a:	4641      	mov	r1, r8
 800c84c:	4650      	mov	r0, sl
 800c84e:	f001 fb85 	bl	800df5c <__ssprint_r>
 800c852:	f7ff b85e 	b.w	800b912 <_svfprintf_r+0x41a>
 800c856:	ea56 0205 	orrs.w	r2, r6, r5
 800c85a:	465f      	mov	r7, fp
 800c85c:	f43f ab78 	beq.w	800bf50 <_svfprintf_r+0xa58>
 800c860:	2b01      	cmp	r3, #1
 800c862:	f43f ac15 	beq.w	800c090 <_svfprintf_r+0xb98>
 800c866:	2b02      	cmp	r3, #2
 800c868:	f50d 799c 	add.w	r9, sp, #312	; 0x138
 800c86c:	f43f ac5b 	beq.w	800c126 <_svfprintf_r+0xc2e>
 800c870:	f006 0307 	and.w	r3, r6, #7
 800c874:	08f6      	lsrs	r6, r6, #3
 800c876:	ea46 7645 	orr.w	r6, r6, r5, lsl #29
 800c87a:	08ed      	lsrs	r5, r5, #3
 800c87c:	3330      	adds	r3, #48	; 0x30
 800c87e:	ea56 0105 	orrs.w	r1, r6, r5
 800c882:	464a      	mov	r2, r9
 800c884:	f809 3d01 	strb.w	r3, [r9, #-1]!
 800c888:	d1f2      	bne.n	800c870 <_svfprintf_r+0x1378>
 800c88a:	07f9      	lsls	r1, r7, #31
 800c88c:	d506      	bpl.n	800c89c <_svfprintf_r+0x13a4>
 800c88e:	2b30      	cmp	r3, #48	; 0x30
 800c890:	d004      	beq.n	800c89c <_svfprintf_r+0x13a4>
 800c892:	2330      	movs	r3, #48	; 0x30
 800c894:	f809 3c01 	strb.w	r3, [r9, #-1]
 800c898:	f1a2 0902 	sub.w	r9, r2, #2
 800c89c:	ab4e      	add	r3, sp, #312	; 0x138
 800c89e:	eba3 0309 	sub.w	r3, r3, r9
 800c8a2:	9e04      	ldr	r6, [sp, #16]
 800c8a4:	9304      	str	r3, [sp, #16]
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	46bb      	mov	fp, r7
 800c8aa:	9303      	str	r3, [sp, #12]
 800c8ac:	e9cd 3308 	strd	r3, r3, [sp, #32]
 800c8b0:	461d      	mov	r5, r3
 800c8b2:	f7ff b94d 	b.w	800bb50 <_svfprintf_r+0x658>
 800c8b6:	bf00      	nop
 800c8b8:	0800e27a 	.word	0x0800e27a
 800c8bc:	0800e26a 	.word	0x0800e26a

0800c8c0 <sysconf>:
 800c8c0:	2808      	cmp	r0, #8
 800c8c2:	b508      	push	{r3, lr}
 800c8c4:	d006      	beq.n	800c8d4 <sysconf+0x14>
 800c8c6:	f7fc feb3 	bl	8009630 <__errno>
 800c8ca:	2316      	movs	r3, #22
 800c8cc:	6003      	str	r3, [r0, #0]
 800c8ce:	f04f 30ff 	mov.w	r0, #4294967295
 800c8d2:	bd08      	pop	{r3, pc}
 800c8d4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800c8d8:	e7fb      	b.n	800c8d2 <sysconf+0x12>

0800c8da <__swbuf_r>:
 800c8da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8dc:	460e      	mov	r6, r1
 800c8de:	4614      	mov	r4, r2
 800c8e0:	4605      	mov	r5, r0
 800c8e2:	b118      	cbz	r0, 800c8ec <__swbuf_r+0x12>
 800c8e4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800c8e6:	b90b      	cbnz	r3, 800c8ec <__swbuf_r+0x12>
 800c8e8:	f7fd fda0 	bl	800a42c <__sinit>
 800c8ec:	69a3      	ldr	r3, [r4, #24]
 800c8ee:	60a3      	str	r3, [r4, #8]
 800c8f0:	89a3      	ldrh	r3, [r4, #12]
 800c8f2:	0719      	lsls	r1, r3, #28
 800c8f4:	d529      	bpl.n	800c94a <__swbuf_r+0x70>
 800c8f6:	6923      	ldr	r3, [r4, #16]
 800c8f8:	b33b      	cbz	r3, 800c94a <__swbuf_r+0x70>
 800c8fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c8fe:	b2f6      	uxtb	r6, r6
 800c900:	049a      	lsls	r2, r3, #18
 800c902:	4637      	mov	r7, r6
 800c904:	d52a      	bpl.n	800c95c <__swbuf_r+0x82>
 800c906:	6823      	ldr	r3, [r4, #0]
 800c908:	6920      	ldr	r0, [r4, #16]
 800c90a:	1a18      	subs	r0, r3, r0
 800c90c:	6963      	ldr	r3, [r4, #20]
 800c90e:	4283      	cmp	r3, r0
 800c910:	dc04      	bgt.n	800c91c <__swbuf_r+0x42>
 800c912:	4621      	mov	r1, r4
 800c914:	4628      	mov	r0, r5
 800c916:	f7fd fd1d 	bl	800a354 <_fflush_r>
 800c91a:	b9e0      	cbnz	r0, 800c956 <__swbuf_r+0x7c>
 800c91c:	68a3      	ldr	r3, [r4, #8]
 800c91e:	3b01      	subs	r3, #1
 800c920:	60a3      	str	r3, [r4, #8]
 800c922:	6823      	ldr	r3, [r4, #0]
 800c924:	1c5a      	adds	r2, r3, #1
 800c926:	6022      	str	r2, [r4, #0]
 800c928:	701e      	strb	r6, [r3, #0]
 800c92a:	6962      	ldr	r2, [r4, #20]
 800c92c:	1c43      	adds	r3, r0, #1
 800c92e:	429a      	cmp	r2, r3
 800c930:	d004      	beq.n	800c93c <__swbuf_r+0x62>
 800c932:	89a3      	ldrh	r3, [r4, #12]
 800c934:	07db      	lsls	r3, r3, #31
 800c936:	d506      	bpl.n	800c946 <__swbuf_r+0x6c>
 800c938:	2e0a      	cmp	r6, #10
 800c93a:	d104      	bne.n	800c946 <__swbuf_r+0x6c>
 800c93c:	4621      	mov	r1, r4
 800c93e:	4628      	mov	r0, r5
 800c940:	f7fd fd08 	bl	800a354 <_fflush_r>
 800c944:	b938      	cbnz	r0, 800c956 <__swbuf_r+0x7c>
 800c946:	4638      	mov	r0, r7
 800c948:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c94a:	4621      	mov	r1, r4
 800c94c:	4628      	mov	r0, r5
 800c94e:	f7fd fc03 	bl	800a158 <__swsetup_r>
 800c952:	2800      	cmp	r0, #0
 800c954:	d0d1      	beq.n	800c8fa <__swbuf_r+0x20>
 800c956:	f04f 37ff 	mov.w	r7, #4294967295
 800c95a:	e7f4      	b.n	800c946 <__swbuf_r+0x6c>
 800c95c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800c960:	81a3      	strh	r3, [r4, #12]
 800c962:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c964:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c968:	6663      	str	r3, [r4, #100]	; 0x64
 800c96a:	e7cc      	b.n	800c906 <__swbuf_r+0x2c>

0800c96c <_wcrtomb_r>:
 800c96c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c96e:	4c09      	ldr	r4, [pc, #36]	; (800c994 <_wcrtomb_r+0x28>)
 800c970:	b085      	sub	sp, #20
 800c972:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
 800c976:	4605      	mov	r5, r0
 800c978:	461e      	mov	r6, r3
 800c97a:	b909      	cbnz	r1, 800c980 <_wcrtomb_r+0x14>
 800c97c:	460a      	mov	r2, r1
 800c97e:	a901      	add	r1, sp, #4
 800c980:	47b8      	blx	r7
 800c982:	1c43      	adds	r3, r0, #1
 800c984:	bf01      	itttt	eq
 800c986:	2300      	moveq	r3, #0
 800c988:	6033      	streq	r3, [r6, #0]
 800c98a:	238a      	moveq	r3, #138	; 0x8a
 800c98c:	602b      	streq	r3, [r5, #0]
 800c98e:	b005      	add	sp, #20
 800c990:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c992:	bf00      	nop
 800c994:	2000053c 	.word	0x2000053c

0800c998 <__ascii_wctomb>:
 800c998:	b149      	cbz	r1, 800c9ae <__ascii_wctomb+0x16>
 800c99a:	2aff      	cmp	r2, #255	; 0xff
 800c99c:	bf85      	ittet	hi
 800c99e:	238a      	movhi	r3, #138	; 0x8a
 800c9a0:	6003      	strhi	r3, [r0, #0]
 800c9a2:	700a      	strbls	r2, [r1, #0]
 800c9a4:	f04f 30ff 	movhi.w	r0, #4294967295
 800c9a8:	bf98      	it	ls
 800c9aa:	2001      	movls	r0, #1
 800c9ac:	4770      	bx	lr
 800c9ae:	4608      	mov	r0, r1
 800c9b0:	4770      	bx	lr
	...

0800c9b4 <_write_r>:
 800c9b4:	b538      	push	{r3, r4, r5, lr}
 800c9b6:	4d07      	ldr	r5, [pc, #28]	; (800c9d4 <_write_r+0x20>)
 800c9b8:	4604      	mov	r4, r0
 800c9ba:	4608      	mov	r0, r1
 800c9bc:	4611      	mov	r1, r2
 800c9be:	2200      	movs	r2, #0
 800c9c0:	602a      	str	r2, [r5, #0]
 800c9c2:	461a      	mov	r2, r3
 800c9c4:	f7f4 fd47 	bl	8001456 <_write>
 800c9c8:	1c43      	adds	r3, r0, #1
 800c9ca:	d102      	bne.n	800c9d2 <_write_r+0x1e>
 800c9cc:	682b      	ldr	r3, [r5, #0]
 800c9ce:	b103      	cbz	r3, 800c9d2 <_write_r+0x1e>
 800c9d0:	6023      	str	r3, [r4, #0]
 800c9d2:	bd38      	pop	{r3, r4, r5, pc}
 800c9d4:	2000203c 	.word	0x2000203c

0800c9d8 <__register_exitproc>:
 800c9d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9dc:	f8df a078 	ldr.w	sl, [pc, #120]	; 800ca58 <__register_exitproc+0x80>
 800c9e0:	4606      	mov	r6, r0
 800c9e2:	f8da 0000 	ldr.w	r0, [sl]
 800c9e6:	4698      	mov	r8, r3
 800c9e8:	460f      	mov	r7, r1
 800c9ea:	4691      	mov	r9, r2
 800c9ec:	f7fe f850 	bl	800aa90 <__retarget_lock_acquire_recursive>
 800c9f0:	4b18      	ldr	r3, [pc, #96]	; (800ca54 <__register_exitproc+0x7c>)
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 800c9f8:	b91c      	cbnz	r4, 800ca02 <__register_exitproc+0x2a>
 800c9fa:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 800c9fe:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 800ca02:	6865      	ldr	r5, [r4, #4]
 800ca04:	f8da 0000 	ldr.w	r0, [sl]
 800ca08:	2d1f      	cmp	r5, #31
 800ca0a:	dd05      	ble.n	800ca18 <__register_exitproc+0x40>
 800ca0c:	f7fe f841 	bl	800aa92 <__retarget_lock_release_recursive>
 800ca10:	f04f 30ff 	mov.w	r0, #4294967295
 800ca14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca18:	b19e      	cbz	r6, 800ca42 <__register_exitproc+0x6a>
 800ca1a:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 800ca1e:	2201      	movs	r2, #1
 800ca20:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 800ca24:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 800ca28:	40aa      	lsls	r2, r5
 800ca2a:	4313      	orrs	r3, r2
 800ca2c:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 800ca30:	2e02      	cmp	r6, #2
 800ca32:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 800ca36:	bf02      	ittt	eq
 800ca38:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 800ca3c:	4313      	orreq	r3, r2
 800ca3e:	f8c4 318c 	streq.w	r3, [r4, #396]	; 0x18c
 800ca42:	1c6b      	adds	r3, r5, #1
 800ca44:	3502      	adds	r5, #2
 800ca46:	6063      	str	r3, [r4, #4]
 800ca48:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 800ca4c:	f7fe f821 	bl	800aa92 <__retarget_lock_release_recursive>
 800ca50:	2000      	movs	r0, #0
 800ca52:	e7df      	b.n	800ca14 <__register_exitproc+0x3c>
 800ca54:	0800e208 	.word	0x0800e208
 800ca58:	20000538 	.word	0x20000538

0800ca5c <_close_r>:
 800ca5c:	b538      	push	{r3, r4, r5, lr}
 800ca5e:	4d06      	ldr	r5, [pc, #24]	; (800ca78 <_close_r+0x1c>)
 800ca60:	2300      	movs	r3, #0
 800ca62:	4604      	mov	r4, r0
 800ca64:	4608      	mov	r0, r1
 800ca66:	602b      	str	r3, [r5, #0]
 800ca68:	f7f4 fd11 	bl	800148e <_close>
 800ca6c:	1c43      	adds	r3, r0, #1
 800ca6e:	d102      	bne.n	800ca76 <_close_r+0x1a>
 800ca70:	682b      	ldr	r3, [r5, #0]
 800ca72:	b103      	cbz	r3, 800ca76 <_close_r+0x1a>
 800ca74:	6023      	str	r3, [r4, #0]
 800ca76:	bd38      	pop	{r3, r4, r5, pc}
 800ca78:	2000203c 	.word	0x2000203c

0800ca7c <quorem>:
 800ca7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca80:	6903      	ldr	r3, [r0, #16]
 800ca82:	690c      	ldr	r4, [r1, #16]
 800ca84:	42a3      	cmp	r3, r4
 800ca86:	4607      	mov	r7, r0
 800ca88:	f2c0 8081 	blt.w	800cb8e <quorem+0x112>
 800ca8c:	3c01      	subs	r4, #1
 800ca8e:	f101 0814 	add.w	r8, r1, #20
 800ca92:	f100 0514 	add.w	r5, r0, #20
 800ca96:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ca9a:	9301      	str	r3, [sp, #4]
 800ca9c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800caa0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800caa4:	3301      	adds	r3, #1
 800caa6:	429a      	cmp	r2, r3
 800caa8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800caac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cab0:	fbb2 f6f3 	udiv	r6, r2, r3
 800cab4:	d331      	bcc.n	800cb1a <quorem+0x9e>
 800cab6:	f04f 0e00 	mov.w	lr, #0
 800caba:	4640      	mov	r0, r8
 800cabc:	46ac      	mov	ip, r5
 800cabe:	46f2      	mov	sl, lr
 800cac0:	f850 2b04 	ldr.w	r2, [r0], #4
 800cac4:	b293      	uxth	r3, r2
 800cac6:	fb06 e303 	mla	r3, r6, r3, lr
 800caca:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800cace:	b29b      	uxth	r3, r3
 800cad0:	ebaa 0303 	sub.w	r3, sl, r3
 800cad4:	f8dc a000 	ldr.w	sl, [ip]
 800cad8:	0c12      	lsrs	r2, r2, #16
 800cada:	fa13 f38a 	uxtah	r3, r3, sl
 800cade:	fb06 e202 	mla	r2, r6, r2, lr
 800cae2:	9300      	str	r3, [sp, #0]
 800cae4:	9b00      	ldr	r3, [sp, #0]
 800cae6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800caea:	b292      	uxth	r2, r2
 800caec:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800caf0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800caf4:	f8bd 3000 	ldrh.w	r3, [sp]
 800caf8:	4581      	cmp	r9, r0
 800cafa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cafe:	f84c 3b04 	str.w	r3, [ip], #4
 800cb02:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800cb06:	d2db      	bcs.n	800cac0 <quorem+0x44>
 800cb08:	f855 300b 	ldr.w	r3, [r5, fp]
 800cb0c:	b92b      	cbnz	r3, 800cb1a <quorem+0x9e>
 800cb0e:	9b01      	ldr	r3, [sp, #4]
 800cb10:	3b04      	subs	r3, #4
 800cb12:	429d      	cmp	r5, r3
 800cb14:	461a      	mov	r2, r3
 800cb16:	d32e      	bcc.n	800cb76 <quorem+0xfa>
 800cb18:	613c      	str	r4, [r7, #16]
 800cb1a:	4638      	mov	r0, r7
 800cb1c:	f001 f8d2 	bl	800dcc4 <__mcmp>
 800cb20:	2800      	cmp	r0, #0
 800cb22:	db24      	blt.n	800cb6e <quorem+0xf2>
 800cb24:	3601      	adds	r6, #1
 800cb26:	4628      	mov	r0, r5
 800cb28:	f04f 0c00 	mov.w	ip, #0
 800cb2c:	f858 2b04 	ldr.w	r2, [r8], #4
 800cb30:	f8d0 e000 	ldr.w	lr, [r0]
 800cb34:	b293      	uxth	r3, r2
 800cb36:	ebac 0303 	sub.w	r3, ip, r3
 800cb3a:	0c12      	lsrs	r2, r2, #16
 800cb3c:	fa13 f38e 	uxtah	r3, r3, lr
 800cb40:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800cb44:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cb48:	b29b      	uxth	r3, r3
 800cb4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cb4e:	45c1      	cmp	r9, r8
 800cb50:	f840 3b04 	str.w	r3, [r0], #4
 800cb54:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800cb58:	d2e8      	bcs.n	800cb2c <quorem+0xb0>
 800cb5a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cb5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cb62:	b922      	cbnz	r2, 800cb6e <quorem+0xf2>
 800cb64:	3b04      	subs	r3, #4
 800cb66:	429d      	cmp	r5, r3
 800cb68:	461a      	mov	r2, r3
 800cb6a:	d30a      	bcc.n	800cb82 <quorem+0x106>
 800cb6c:	613c      	str	r4, [r7, #16]
 800cb6e:	4630      	mov	r0, r6
 800cb70:	b003      	add	sp, #12
 800cb72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb76:	6812      	ldr	r2, [r2, #0]
 800cb78:	3b04      	subs	r3, #4
 800cb7a:	2a00      	cmp	r2, #0
 800cb7c:	d1cc      	bne.n	800cb18 <quorem+0x9c>
 800cb7e:	3c01      	subs	r4, #1
 800cb80:	e7c7      	b.n	800cb12 <quorem+0x96>
 800cb82:	6812      	ldr	r2, [r2, #0]
 800cb84:	3b04      	subs	r3, #4
 800cb86:	2a00      	cmp	r2, #0
 800cb88:	d1f0      	bne.n	800cb6c <quorem+0xf0>
 800cb8a:	3c01      	subs	r4, #1
 800cb8c:	e7eb      	b.n	800cb66 <quorem+0xea>
 800cb8e:	2000      	movs	r0, #0
 800cb90:	e7ee      	b.n	800cb70 <quorem+0xf4>
 800cb92:	0000      	movs	r0, r0
 800cb94:	0000      	movs	r0, r0
	...

0800cb98 <_dtoa_r>:
 800cb98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb9c:	ed2d 8b04 	vpush	{d8-d9}
 800cba0:	b093      	sub	sp, #76	; 0x4c
 800cba2:	ec57 6b10 	vmov	r6, r7, d0
 800cba6:	9106      	str	r1, [sp, #24]
 800cba8:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800cbaa:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800cbac:	9209      	str	r2, [sp, #36]	; 0x24
 800cbae:	ee10 aa10 	vmov	sl, s0
 800cbb2:	4604      	mov	r4, r0
 800cbb4:	930c      	str	r3, [sp, #48]	; 0x30
 800cbb6:	46bb      	mov	fp, r7
 800cbb8:	b141      	cbz	r1, 800cbcc <_dtoa_r+0x34>
 800cbba:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cbbc:	604a      	str	r2, [r1, #4]
 800cbbe:	2301      	movs	r3, #1
 800cbc0:	4093      	lsls	r3, r2
 800cbc2:	608b      	str	r3, [r1, #8]
 800cbc4:	f000 fe6f 	bl	800d8a6 <_Bfree>
 800cbc8:	2300      	movs	r3, #0
 800cbca:	6423      	str	r3, [r4, #64]	; 0x40
 800cbcc:	1e3b      	subs	r3, r7, #0
 800cbce:	bfaa      	itet	ge
 800cbd0:	2300      	movge	r3, #0
 800cbd2:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800cbd6:	602b      	strge	r3, [r5, #0]
 800cbd8:	4ba3      	ldr	r3, [pc, #652]	; (800ce68 <_dtoa_r+0x2d0>)
 800cbda:	bfbc      	itt	lt
 800cbdc:	2201      	movlt	r2, #1
 800cbde:	602a      	strlt	r2, [r5, #0]
 800cbe0:	ea33 030b 	bics.w	r3, r3, fp
 800cbe4:	d11b      	bne.n	800cc1e <_dtoa_r+0x86>
 800cbe6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cbe8:	f242 730f 	movw	r3, #9999	; 0x270f
 800cbec:	6013      	str	r3, [r2, #0]
 800cbee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cbf2:	4333      	orrs	r3, r6
 800cbf4:	f000 8590 	beq.w	800d718 <_dtoa_r+0xb80>
 800cbf8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cbfa:	b90b      	cbnz	r3, 800cc00 <_dtoa_r+0x68>
 800cbfc:	4b9b      	ldr	r3, [pc, #620]	; (800ce6c <_dtoa_r+0x2d4>)
 800cbfe:	e022      	b.n	800cc46 <_dtoa_r+0xae>
 800cc00:	4b9a      	ldr	r3, [pc, #616]	; (800ce6c <_dtoa_r+0x2d4>)
 800cc02:	9301      	str	r3, [sp, #4]
 800cc04:	3303      	adds	r3, #3
 800cc06:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800cc08:	6013      	str	r3, [r2, #0]
 800cc0a:	9801      	ldr	r0, [sp, #4]
 800cc0c:	b013      	add	sp, #76	; 0x4c
 800cc0e:	ecbd 8b04 	vpop	{d8-d9}
 800cc12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc16:	4b96      	ldr	r3, [pc, #600]	; (800ce70 <_dtoa_r+0x2d8>)
 800cc18:	9301      	str	r3, [sp, #4]
 800cc1a:	3308      	adds	r3, #8
 800cc1c:	e7f3      	b.n	800cc06 <_dtoa_r+0x6e>
 800cc1e:	2200      	movs	r2, #0
 800cc20:	2300      	movs	r3, #0
 800cc22:	4650      	mov	r0, sl
 800cc24:	4659      	mov	r1, fp
 800cc26:	f7f3 ff57 	bl	8000ad8 <__aeabi_dcmpeq>
 800cc2a:	ec4b ab19 	vmov	d9, sl, fp
 800cc2e:	4680      	mov	r8, r0
 800cc30:	b158      	cbz	r0, 800cc4a <_dtoa_r+0xb2>
 800cc32:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cc34:	2301      	movs	r3, #1
 800cc36:	6013      	str	r3, [r2, #0]
 800cc38:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	f000 8569 	beq.w	800d712 <_dtoa_r+0xb7a>
 800cc40:	488c      	ldr	r0, [pc, #560]	; (800ce74 <_dtoa_r+0x2dc>)
 800cc42:	6018      	str	r0, [r3, #0]
 800cc44:	1e43      	subs	r3, r0, #1
 800cc46:	9301      	str	r3, [sp, #4]
 800cc48:	e7df      	b.n	800cc0a <_dtoa_r+0x72>
 800cc4a:	ec4b ab10 	vmov	d0, sl, fp
 800cc4e:	aa10      	add	r2, sp, #64	; 0x40
 800cc50:	a911      	add	r1, sp, #68	; 0x44
 800cc52:	4620      	mov	r0, r4
 800cc54:	f001 f8dc 	bl	800de10 <__d2b>
 800cc58:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800cc5c:	ee08 0a10 	vmov	s16, r0
 800cc60:	2d00      	cmp	r5, #0
 800cc62:	f000 8082 	beq.w	800cd6a <_dtoa_r+0x1d2>
 800cc66:	ee19 3a90 	vmov	r3, s19
 800cc6a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cc6e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800cc72:	4656      	mov	r6, sl
 800cc74:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800cc78:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800cc7c:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800cc80:	4b7d      	ldr	r3, [pc, #500]	; (800ce78 <_dtoa_r+0x2e0>)
 800cc82:	2200      	movs	r2, #0
 800cc84:	4630      	mov	r0, r6
 800cc86:	4639      	mov	r1, r7
 800cc88:	f7f3 fb06 	bl	8000298 <__aeabi_dsub>
 800cc8c:	a370      	add	r3, pc, #448	; (adr r3, 800ce50 <_dtoa_r+0x2b8>)
 800cc8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc92:	f7f3 fcb9 	bl	8000608 <__aeabi_dmul>
 800cc96:	a370      	add	r3, pc, #448	; (adr r3, 800ce58 <_dtoa_r+0x2c0>)
 800cc98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc9c:	f7f3 fafe 	bl	800029c <__adddf3>
 800cca0:	4606      	mov	r6, r0
 800cca2:	4628      	mov	r0, r5
 800cca4:	460f      	mov	r7, r1
 800cca6:	f7f3 fc45 	bl	8000534 <__aeabi_i2d>
 800ccaa:	a36d      	add	r3, pc, #436	; (adr r3, 800ce60 <_dtoa_r+0x2c8>)
 800ccac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccb0:	f7f3 fcaa 	bl	8000608 <__aeabi_dmul>
 800ccb4:	4602      	mov	r2, r0
 800ccb6:	460b      	mov	r3, r1
 800ccb8:	4630      	mov	r0, r6
 800ccba:	4639      	mov	r1, r7
 800ccbc:	f7f3 faee 	bl	800029c <__adddf3>
 800ccc0:	4606      	mov	r6, r0
 800ccc2:	460f      	mov	r7, r1
 800ccc4:	f7f3 ff50 	bl	8000b68 <__aeabi_d2iz>
 800ccc8:	2200      	movs	r2, #0
 800ccca:	9000      	str	r0, [sp, #0]
 800cccc:	2300      	movs	r3, #0
 800ccce:	4630      	mov	r0, r6
 800ccd0:	4639      	mov	r1, r7
 800ccd2:	f7f3 ff0b 	bl	8000aec <__aeabi_dcmplt>
 800ccd6:	b150      	cbz	r0, 800ccee <_dtoa_r+0x156>
 800ccd8:	9800      	ldr	r0, [sp, #0]
 800ccda:	f7f3 fc2b 	bl	8000534 <__aeabi_i2d>
 800ccde:	4632      	mov	r2, r6
 800cce0:	463b      	mov	r3, r7
 800cce2:	f7f3 fef9 	bl	8000ad8 <__aeabi_dcmpeq>
 800cce6:	b910      	cbnz	r0, 800ccee <_dtoa_r+0x156>
 800cce8:	9b00      	ldr	r3, [sp, #0]
 800ccea:	3b01      	subs	r3, #1
 800ccec:	9300      	str	r3, [sp, #0]
 800ccee:	9b00      	ldr	r3, [sp, #0]
 800ccf0:	2b16      	cmp	r3, #22
 800ccf2:	d858      	bhi.n	800cda6 <_dtoa_r+0x20e>
 800ccf4:	9a00      	ldr	r2, [sp, #0]
 800ccf6:	4b61      	ldr	r3, [pc, #388]	; (800ce7c <_dtoa_r+0x2e4>)
 800ccf8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ccfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd00:	ec51 0b19 	vmov	r0, r1, d9
 800cd04:	f7f3 fef2 	bl	8000aec <__aeabi_dcmplt>
 800cd08:	2800      	cmp	r0, #0
 800cd0a:	d04e      	beq.n	800cdaa <_dtoa_r+0x212>
 800cd0c:	9b00      	ldr	r3, [sp, #0]
 800cd0e:	3b01      	subs	r3, #1
 800cd10:	9300      	str	r3, [sp, #0]
 800cd12:	2300      	movs	r3, #0
 800cd14:	930b      	str	r3, [sp, #44]	; 0x2c
 800cd16:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cd18:	1b5d      	subs	r5, r3, r5
 800cd1a:	1e6b      	subs	r3, r5, #1
 800cd1c:	9305      	str	r3, [sp, #20]
 800cd1e:	bf45      	ittet	mi
 800cd20:	f1c5 0301 	rsbmi	r3, r5, #1
 800cd24:	9304      	strmi	r3, [sp, #16]
 800cd26:	2300      	movpl	r3, #0
 800cd28:	2300      	movmi	r3, #0
 800cd2a:	bf4c      	ite	mi
 800cd2c:	9305      	strmi	r3, [sp, #20]
 800cd2e:	9304      	strpl	r3, [sp, #16]
 800cd30:	9b00      	ldr	r3, [sp, #0]
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	db3b      	blt.n	800cdae <_dtoa_r+0x216>
 800cd36:	9b05      	ldr	r3, [sp, #20]
 800cd38:	9a00      	ldr	r2, [sp, #0]
 800cd3a:	920a      	str	r2, [sp, #40]	; 0x28
 800cd3c:	4413      	add	r3, r2
 800cd3e:	9305      	str	r3, [sp, #20]
 800cd40:	2300      	movs	r3, #0
 800cd42:	9307      	str	r3, [sp, #28]
 800cd44:	9b06      	ldr	r3, [sp, #24]
 800cd46:	2b09      	cmp	r3, #9
 800cd48:	d869      	bhi.n	800ce1e <_dtoa_r+0x286>
 800cd4a:	2b05      	cmp	r3, #5
 800cd4c:	bfc4      	itt	gt
 800cd4e:	3b04      	subgt	r3, #4
 800cd50:	9306      	strgt	r3, [sp, #24]
 800cd52:	9b06      	ldr	r3, [sp, #24]
 800cd54:	f1a3 0302 	sub.w	r3, r3, #2
 800cd58:	bfcc      	ite	gt
 800cd5a:	2500      	movgt	r5, #0
 800cd5c:	2501      	movle	r5, #1
 800cd5e:	2b03      	cmp	r3, #3
 800cd60:	d868      	bhi.n	800ce34 <_dtoa_r+0x29c>
 800cd62:	e8df f003 	tbb	[pc, r3]
 800cd66:	3a2d      	.short	0x3a2d
 800cd68:	5a38      	.short	0x5a38
 800cd6a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800cd6e:	441d      	add	r5, r3
 800cd70:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800cd74:	2b20      	cmp	r3, #32
 800cd76:	bfc1      	itttt	gt
 800cd78:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800cd7c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800cd80:	fa0b f303 	lslgt.w	r3, fp, r3
 800cd84:	fa26 f000 	lsrgt.w	r0, r6, r0
 800cd88:	bfda      	itte	le
 800cd8a:	f1c3 0320 	rsble	r3, r3, #32
 800cd8e:	fa06 f003 	lslle.w	r0, r6, r3
 800cd92:	4318      	orrgt	r0, r3
 800cd94:	f7f3 fbbe 	bl	8000514 <__aeabi_ui2d>
 800cd98:	2301      	movs	r3, #1
 800cd9a:	4606      	mov	r6, r0
 800cd9c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800cda0:	3d01      	subs	r5, #1
 800cda2:	930e      	str	r3, [sp, #56]	; 0x38
 800cda4:	e76c      	b.n	800cc80 <_dtoa_r+0xe8>
 800cda6:	2301      	movs	r3, #1
 800cda8:	e7b4      	b.n	800cd14 <_dtoa_r+0x17c>
 800cdaa:	900b      	str	r0, [sp, #44]	; 0x2c
 800cdac:	e7b3      	b.n	800cd16 <_dtoa_r+0x17e>
 800cdae:	9b04      	ldr	r3, [sp, #16]
 800cdb0:	9a00      	ldr	r2, [sp, #0]
 800cdb2:	1a9b      	subs	r3, r3, r2
 800cdb4:	9304      	str	r3, [sp, #16]
 800cdb6:	4253      	negs	r3, r2
 800cdb8:	9307      	str	r3, [sp, #28]
 800cdba:	2300      	movs	r3, #0
 800cdbc:	930a      	str	r3, [sp, #40]	; 0x28
 800cdbe:	e7c1      	b.n	800cd44 <_dtoa_r+0x1ac>
 800cdc0:	2300      	movs	r3, #0
 800cdc2:	9308      	str	r3, [sp, #32]
 800cdc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	dc37      	bgt.n	800ce3a <_dtoa_r+0x2a2>
 800cdca:	2301      	movs	r3, #1
 800cdcc:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800cdd0:	461a      	mov	r2, r3
 800cdd2:	9209      	str	r2, [sp, #36]	; 0x24
 800cdd4:	e00c      	b.n	800cdf0 <_dtoa_r+0x258>
 800cdd6:	2301      	movs	r3, #1
 800cdd8:	e7f3      	b.n	800cdc2 <_dtoa_r+0x22a>
 800cdda:	2300      	movs	r3, #0
 800cddc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cdde:	9308      	str	r3, [sp, #32]
 800cde0:	9b00      	ldr	r3, [sp, #0]
 800cde2:	4413      	add	r3, r2
 800cde4:	9302      	str	r3, [sp, #8]
 800cde6:	3301      	adds	r3, #1
 800cde8:	2b01      	cmp	r3, #1
 800cdea:	9303      	str	r3, [sp, #12]
 800cdec:	bfb8      	it	lt
 800cdee:	2301      	movlt	r3, #1
 800cdf0:	2200      	movs	r2, #0
 800cdf2:	6462      	str	r2, [r4, #68]	; 0x44
 800cdf4:	2204      	movs	r2, #4
 800cdf6:	f102 0014 	add.w	r0, r2, #20
 800cdfa:	4298      	cmp	r0, r3
 800cdfc:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800cdfe:	d920      	bls.n	800ce42 <_dtoa_r+0x2aa>
 800ce00:	4620      	mov	r0, r4
 800ce02:	f000 fd2b 	bl	800d85c <_Balloc>
 800ce06:	9001      	str	r0, [sp, #4]
 800ce08:	2800      	cmp	r0, #0
 800ce0a:	d13d      	bne.n	800ce88 <_dtoa_r+0x2f0>
 800ce0c:	4b1c      	ldr	r3, [pc, #112]	; (800ce80 <_dtoa_r+0x2e8>)
 800ce0e:	4602      	mov	r2, r0
 800ce10:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ce14:	481b      	ldr	r0, [pc, #108]	; (800ce84 <_dtoa_r+0x2ec>)
 800ce16:	f7fc fbed 	bl	80095f4 <__assert_func>
 800ce1a:	2301      	movs	r3, #1
 800ce1c:	e7de      	b.n	800cddc <_dtoa_r+0x244>
 800ce1e:	2501      	movs	r5, #1
 800ce20:	2300      	movs	r3, #0
 800ce22:	9306      	str	r3, [sp, #24]
 800ce24:	9508      	str	r5, [sp, #32]
 800ce26:	f04f 33ff 	mov.w	r3, #4294967295
 800ce2a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ce2e:	2200      	movs	r2, #0
 800ce30:	2312      	movs	r3, #18
 800ce32:	e7ce      	b.n	800cdd2 <_dtoa_r+0x23a>
 800ce34:	2301      	movs	r3, #1
 800ce36:	9308      	str	r3, [sp, #32]
 800ce38:	e7f5      	b.n	800ce26 <_dtoa_r+0x28e>
 800ce3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce3c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ce40:	e7d6      	b.n	800cdf0 <_dtoa_r+0x258>
 800ce42:	3101      	adds	r1, #1
 800ce44:	6461      	str	r1, [r4, #68]	; 0x44
 800ce46:	0052      	lsls	r2, r2, #1
 800ce48:	e7d5      	b.n	800cdf6 <_dtoa_r+0x25e>
 800ce4a:	bf00      	nop
 800ce4c:	f3af 8000 	nop.w
 800ce50:	636f4361 	.word	0x636f4361
 800ce54:	3fd287a7 	.word	0x3fd287a7
 800ce58:	8b60c8b3 	.word	0x8b60c8b3
 800ce5c:	3fc68a28 	.word	0x3fc68a28
 800ce60:	509f79fb 	.word	0x509f79fb
 800ce64:	3fd34413 	.word	0x3fd34413
 800ce68:	7ff00000 	.word	0x7ff00000
 800ce6c:	0800e38b 	.word	0x0800e38b
 800ce70:	0800e38f 	.word	0x0800e38f
 800ce74:	0800e269 	.word	0x0800e269
 800ce78:	3ff80000 	.word	0x3ff80000
 800ce7c:	0800e488 	.word	0x0800e488
 800ce80:	0800e398 	.word	0x0800e398
 800ce84:	0800e3a9 	.word	0x0800e3a9
 800ce88:	9b01      	ldr	r3, [sp, #4]
 800ce8a:	6423      	str	r3, [r4, #64]	; 0x40
 800ce8c:	9b03      	ldr	r3, [sp, #12]
 800ce8e:	2b0e      	cmp	r3, #14
 800ce90:	f200 809d 	bhi.w	800cfce <_dtoa_r+0x436>
 800ce94:	2d00      	cmp	r5, #0
 800ce96:	f000 809a 	beq.w	800cfce <_dtoa_r+0x436>
 800ce9a:	9b00      	ldr	r3, [sp, #0]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	dd32      	ble.n	800cf06 <_dtoa_r+0x36e>
 800cea0:	4ab7      	ldr	r2, [pc, #732]	; (800d180 <_dtoa_r+0x5e8>)
 800cea2:	f003 030f 	and.w	r3, r3, #15
 800cea6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ceaa:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ceae:	9b00      	ldr	r3, [sp, #0]
 800ceb0:	05d8      	lsls	r0, r3, #23
 800ceb2:	ea4f 1723 	mov.w	r7, r3, asr #4
 800ceb6:	d516      	bpl.n	800cee6 <_dtoa_r+0x34e>
 800ceb8:	4bb2      	ldr	r3, [pc, #712]	; (800d184 <_dtoa_r+0x5ec>)
 800ceba:	ec51 0b19 	vmov	r0, r1, d9
 800cebe:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cec2:	f7f3 fccb 	bl	800085c <__aeabi_ddiv>
 800cec6:	f007 070f 	and.w	r7, r7, #15
 800ceca:	4682      	mov	sl, r0
 800cecc:	468b      	mov	fp, r1
 800cece:	2503      	movs	r5, #3
 800ced0:	4eac      	ldr	r6, [pc, #688]	; (800d184 <_dtoa_r+0x5ec>)
 800ced2:	b957      	cbnz	r7, 800ceea <_dtoa_r+0x352>
 800ced4:	4642      	mov	r2, r8
 800ced6:	464b      	mov	r3, r9
 800ced8:	4650      	mov	r0, sl
 800ceda:	4659      	mov	r1, fp
 800cedc:	f7f3 fcbe 	bl	800085c <__aeabi_ddiv>
 800cee0:	4682      	mov	sl, r0
 800cee2:	468b      	mov	fp, r1
 800cee4:	e028      	b.n	800cf38 <_dtoa_r+0x3a0>
 800cee6:	2502      	movs	r5, #2
 800cee8:	e7f2      	b.n	800ced0 <_dtoa_r+0x338>
 800ceea:	07f9      	lsls	r1, r7, #31
 800ceec:	d508      	bpl.n	800cf00 <_dtoa_r+0x368>
 800ceee:	4640      	mov	r0, r8
 800cef0:	4649      	mov	r1, r9
 800cef2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cef6:	f7f3 fb87 	bl	8000608 <__aeabi_dmul>
 800cefa:	3501      	adds	r5, #1
 800cefc:	4680      	mov	r8, r0
 800cefe:	4689      	mov	r9, r1
 800cf00:	107f      	asrs	r7, r7, #1
 800cf02:	3608      	adds	r6, #8
 800cf04:	e7e5      	b.n	800ced2 <_dtoa_r+0x33a>
 800cf06:	f000 809b 	beq.w	800d040 <_dtoa_r+0x4a8>
 800cf0a:	9b00      	ldr	r3, [sp, #0]
 800cf0c:	4f9d      	ldr	r7, [pc, #628]	; (800d184 <_dtoa_r+0x5ec>)
 800cf0e:	425e      	negs	r6, r3
 800cf10:	4b9b      	ldr	r3, [pc, #620]	; (800d180 <_dtoa_r+0x5e8>)
 800cf12:	f006 020f 	and.w	r2, r6, #15
 800cf16:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cf1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf1e:	ec51 0b19 	vmov	r0, r1, d9
 800cf22:	f7f3 fb71 	bl	8000608 <__aeabi_dmul>
 800cf26:	1136      	asrs	r6, r6, #4
 800cf28:	4682      	mov	sl, r0
 800cf2a:	468b      	mov	fp, r1
 800cf2c:	2300      	movs	r3, #0
 800cf2e:	2502      	movs	r5, #2
 800cf30:	2e00      	cmp	r6, #0
 800cf32:	d17a      	bne.n	800d02a <_dtoa_r+0x492>
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d1d3      	bne.n	800cee0 <_dtoa_r+0x348>
 800cf38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	f000 8082 	beq.w	800d044 <_dtoa_r+0x4ac>
 800cf40:	4b91      	ldr	r3, [pc, #580]	; (800d188 <_dtoa_r+0x5f0>)
 800cf42:	2200      	movs	r2, #0
 800cf44:	4650      	mov	r0, sl
 800cf46:	4659      	mov	r1, fp
 800cf48:	f7f3 fdd0 	bl	8000aec <__aeabi_dcmplt>
 800cf4c:	2800      	cmp	r0, #0
 800cf4e:	d079      	beq.n	800d044 <_dtoa_r+0x4ac>
 800cf50:	9b03      	ldr	r3, [sp, #12]
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d076      	beq.n	800d044 <_dtoa_r+0x4ac>
 800cf56:	9b02      	ldr	r3, [sp, #8]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	dd36      	ble.n	800cfca <_dtoa_r+0x432>
 800cf5c:	9b00      	ldr	r3, [sp, #0]
 800cf5e:	4650      	mov	r0, sl
 800cf60:	4659      	mov	r1, fp
 800cf62:	1e5f      	subs	r7, r3, #1
 800cf64:	2200      	movs	r2, #0
 800cf66:	4b89      	ldr	r3, [pc, #548]	; (800d18c <_dtoa_r+0x5f4>)
 800cf68:	f7f3 fb4e 	bl	8000608 <__aeabi_dmul>
 800cf6c:	9e02      	ldr	r6, [sp, #8]
 800cf6e:	4682      	mov	sl, r0
 800cf70:	468b      	mov	fp, r1
 800cf72:	3501      	adds	r5, #1
 800cf74:	4628      	mov	r0, r5
 800cf76:	f7f3 fadd 	bl	8000534 <__aeabi_i2d>
 800cf7a:	4652      	mov	r2, sl
 800cf7c:	465b      	mov	r3, fp
 800cf7e:	f7f3 fb43 	bl	8000608 <__aeabi_dmul>
 800cf82:	4b83      	ldr	r3, [pc, #524]	; (800d190 <_dtoa_r+0x5f8>)
 800cf84:	2200      	movs	r2, #0
 800cf86:	f7f3 f989 	bl	800029c <__adddf3>
 800cf8a:	46d0      	mov	r8, sl
 800cf8c:	46d9      	mov	r9, fp
 800cf8e:	4682      	mov	sl, r0
 800cf90:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800cf94:	2e00      	cmp	r6, #0
 800cf96:	d158      	bne.n	800d04a <_dtoa_r+0x4b2>
 800cf98:	4b7e      	ldr	r3, [pc, #504]	; (800d194 <_dtoa_r+0x5fc>)
 800cf9a:	2200      	movs	r2, #0
 800cf9c:	4640      	mov	r0, r8
 800cf9e:	4649      	mov	r1, r9
 800cfa0:	f7f3 f97a 	bl	8000298 <__aeabi_dsub>
 800cfa4:	4652      	mov	r2, sl
 800cfa6:	465b      	mov	r3, fp
 800cfa8:	4680      	mov	r8, r0
 800cfaa:	4689      	mov	r9, r1
 800cfac:	f7f3 fdbc 	bl	8000b28 <__aeabi_dcmpgt>
 800cfb0:	2800      	cmp	r0, #0
 800cfb2:	f040 8296 	bne.w	800d4e2 <_dtoa_r+0x94a>
 800cfb6:	4652      	mov	r2, sl
 800cfb8:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800cfbc:	4640      	mov	r0, r8
 800cfbe:	4649      	mov	r1, r9
 800cfc0:	f7f3 fd94 	bl	8000aec <__aeabi_dcmplt>
 800cfc4:	2800      	cmp	r0, #0
 800cfc6:	f040 828a 	bne.w	800d4de <_dtoa_r+0x946>
 800cfca:	ec5b ab19 	vmov	sl, fp, d9
 800cfce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	f2c0 8149 	blt.w	800d268 <_dtoa_r+0x6d0>
 800cfd6:	9a00      	ldr	r2, [sp, #0]
 800cfd8:	2a0e      	cmp	r2, #14
 800cfda:	f300 8145 	bgt.w	800d268 <_dtoa_r+0x6d0>
 800cfde:	4b68      	ldr	r3, [pc, #416]	; (800d180 <_dtoa_r+0x5e8>)
 800cfe0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cfe4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cfe8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	f280 80d6 	bge.w	800d19c <_dtoa_r+0x604>
 800cff0:	9b03      	ldr	r3, [sp, #12]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	f300 80d2 	bgt.w	800d19c <_dtoa_r+0x604>
 800cff8:	f040 8270 	bne.w	800d4dc <_dtoa_r+0x944>
 800cffc:	4b65      	ldr	r3, [pc, #404]	; (800d194 <_dtoa_r+0x5fc>)
 800cffe:	2200      	movs	r2, #0
 800d000:	4640      	mov	r0, r8
 800d002:	4649      	mov	r1, r9
 800d004:	f7f3 fb00 	bl	8000608 <__aeabi_dmul>
 800d008:	4652      	mov	r2, sl
 800d00a:	465b      	mov	r3, fp
 800d00c:	f7f3 fd82 	bl	8000b14 <__aeabi_dcmpge>
 800d010:	9e03      	ldr	r6, [sp, #12]
 800d012:	4637      	mov	r7, r6
 800d014:	2800      	cmp	r0, #0
 800d016:	f040 8246 	bne.w	800d4a6 <_dtoa_r+0x90e>
 800d01a:	9d01      	ldr	r5, [sp, #4]
 800d01c:	2331      	movs	r3, #49	; 0x31
 800d01e:	f805 3b01 	strb.w	r3, [r5], #1
 800d022:	9b00      	ldr	r3, [sp, #0]
 800d024:	3301      	adds	r3, #1
 800d026:	9300      	str	r3, [sp, #0]
 800d028:	e241      	b.n	800d4ae <_dtoa_r+0x916>
 800d02a:	07f2      	lsls	r2, r6, #31
 800d02c:	d505      	bpl.n	800d03a <_dtoa_r+0x4a2>
 800d02e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d032:	f7f3 fae9 	bl	8000608 <__aeabi_dmul>
 800d036:	3501      	adds	r5, #1
 800d038:	2301      	movs	r3, #1
 800d03a:	1076      	asrs	r6, r6, #1
 800d03c:	3708      	adds	r7, #8
 800d03e:	e777      	b.n	800cf30 <_dtoa_r+0x398>
 800d040:	2502      	movs	r5, #2
 800d042:	e779      	b.n	800cf38 <_dtoa_r+0x3a0>
 800d044:	9f00      	ldr	r7, [sp, #0]
 800d046:	9e03      	ldr	r6, [sp, #12]
 800d048:	e794      	b.n	800cf74 <_dtoa_r+0x3dc>
 800d04a:	9901      	ldr	r1, [sp, #4]
 800d04c:	4b4c      	ldr	r3, [pc, #304]	; (800d180 <_dtoa_r+0x5e8>)
 800d04e:	4431      	add	r1, r6
 800d050:	910d      	str	r1, [sp, #52]	; 0x34
 800d052:	9908      	ldr	r1, [sp, #32]
 800d054:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d058:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d05c:	2900      	cmp	r1, #0
 800d05e:	d043      	beq.n	800d0e8 <_dtoa_r+0x550>
 800d060:	494d      	ldr	r1, [pc, #308]	; (800d198 <_dtoa_r+0x600>)
 800d062:	2000      	movs	r0, #0
 800d064:	f7f3 fbfa 	bl	800085c <__aeabi_ddiv>
 800d068:	4652      	mov	r2, sl
 800d06a:	465b      	mov	r3, fp
 800d06c:	f7f3 f914 	bl	8000298 <__aeabi_dsub>
 800d070:	9d01      	ldr	r5, [sp, #4]
 800d072:	4682      	mov	sl, r0
 800d074:	468b      	mov	fp, r1
 800d076:	4649      	mov	r1, r9
 800d078:	4640      	mov	r0, r8
 800d07a:	f7f3 fd75 	bl	8000b68 <__aeabi_d2iz>
 800d07e:	4606      	mov	r6, r0
 800d080:	f7f3 fa58 	bl	8000534 <__aeabi_i2d>
 800d084:	4602      	mov	r2, r0
 800d086:	460b      	mov	r3, r1
 800d088:	4640      	mov	r0, r8
 800d08a:	4649      	mov	r1, r9
 800d08c:	f7f3 f904 	bl	8000298 <__aeabi_dsub>
 800d090:	3630      	adds	r6, #48	; 0x30
 800d092:	f805 6b01 	strb.w	r6, [r5], #1
 800d096:	4652      	mov	r2, sl
 800d098:	465b      	mov	r3, fp
 800d09a:	4680      	mov	r8, r0
 800d09c:	4689      	mov	r9, r1
 800d09e:	f7f3 fd25 	bl	8000aec <__aeabi_dcmplt>
 800d0a2:	2800      	cmp	r0, #0
 800d0a4:	d163      	bne.n	800d16e <_dtoa_r+0x5d6>
 800d0a6:	4642      	mov	r2, r8
 800d0a8:	464b      	mov	r3, r9
 800d0aa:	4937      	ldr	r1, [pc, #220]	; (800d188 <_dtoa_r+0x5f0>)
 800d0ac:	2000      	movs	r0, #0
 800d0ae:	f7f3 f8f3 	bl	8000298 <__aeabi_dsub>
 800d0b2:	4652      	mov	r2, sl
 800d0b4:	465b      	mov	r3, fp
 800d0b6:	f7f3 fd19 	bl	8000aec <__aeabi_dcmplt>
 800d0ba:	2800      	cmp	r0, #0
 800d0bc:	f040 80b6 	bne.w	800d22c <_dtoa_r+0x694>
 800d0c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d0c2:	429d      	cmp	r5, r3
 800d0c4:	d081      	beq.n	800cfca <_dtoa_r+0x432>
 800d0c6:	4b31      	ldr	r3, [pc, #196]	; (800d18c <_dtoa_r+0x5f4>)
 800d0c8:	2200      	movs	r2, #0
 800d0ca:	4650      	mov	r0, sl
 800d0cc:	4659      	mov	r1, fp
 800d0ce:	f7f3 fa9b 	bl	8000608 <__aeabi_dmul>
 800d0d2:	4b2e      	ldr	r3, [pc, #184]	; (800d18c <_dtoa_r+0x5f4>)
 800d0d4:	4682      	mov	sl, r0
 800d0d6:	468b      	mov	fp, r1
 800d0d8:	4640      	mov	r0, r8
 800d0da:	4649      	mov	r1, r9
 800d0dc:	2200      	movs	r2, #0
 800d0de:	f7f3 fa93 	bl	8000608 <__aeabi_dmul>
 800d0e2:	4680      	mov	r8, r0
 800d0e4:	4689      	mov	r9, r1
 800d0e6:	e7c6      	b.n	800d076 <_dtoa_r+0x4de>
 800d0e8:	4650      	mov	r0, sl
 800d0ea:	4659      	mov	r1, fp
 800d0ec:	f7f3 fa8c 	bl	8000608 <__aeabi_dmul>
 800d0f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d0f2:	9d01      	ldr	r5, [sp, #4]
 800d0f4:	930f      	str	r3, [sp, #60]	; 0x3c
 800d0f6:	4682      	mov	sl, r0
 800d0f8:	468b      	mov	fp, r1
 800d0fa:	4649      	mov	r1, r9
 800d0fc:	4640      	mov	r0, r8
 800d0fe:	f7f3 fd33 	bl	8000b68 <__aeabi_d2iz>
 800d102:	4606      	mov	r6, r0
 800d104:	f7f3 fa16 	bl	8000534 <__aeabi_i2d>
 800d108:	3630      	adds	r6, #48	; 0x30
 800d10a:	4602      	mov	r2, r0
 800d10c:	460b      	mov	r3, r1
 800d10e:	4640      	mov	r0, r8
 800d110:	4649      	mov	r1, r9
 800d112:	f7f3 f8c1 	bl	8000298 <__aeabi_dsub>
 800d116:	f805 6b01 	strb.w	r6, [r5], #1
 800d11a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d11c:	429d      	cmp	r5, r3
 800d11e:	4680      	mov	r8, r0
 800d120:	4689      	mov	r9, r1
 800d122:	f04f 0200 	mov.w	r2, #0
 800d126:	d124      	bne.n	800d172 <_dtoa_r+0x5da>
 800d128:	4b1b      	ldr	r3, [pc, #108]	; (800d198 <_dtoa_r+0x600>)
 800d12a:	4650      	mov	r0, sl
 800d12c:	4659      	mov	r1, fp
 800d12e:	f7f3 f8b5 	bl	800029c <__adddf3>
 800d132:	4602      	mov	r2, r0
 800d134:	460b      	mov	r3, r1
 800d136:	4640      	mov	r0, r8
 800d138:	4649      	mov	r1, r9
 800d13a:	f7f3 fcf5 	bl	8000b28 <__aeabi_dcmpgt>
 800d13e:	2800      	cmp	r0, #0
 800d140:	d174      	bne.n	800d22c <_dtoa_r+0x694>
 800d142:	4652      	mov	r2, sl
 800d144:	465b      	mov	r3, fp
 800d146:	4914      	ldr	r1, [pc, #80]	; (800d198 <_dtoa_r+0x600>)
 800d148:	2000      	movs	r0, #0
 800d14a:	f7f3 f8a5 	bl	8000298 <__aeabi_dsub>
 800d14e:	4602      	mov	r2, r0
 800d150:	460b      	mov	r3, r1
 800d152:	4640      	mov	r0, r8
 800d154:	4649      	mov	r1, r9
 800d156:	f7f3 fcc9 	bl	8000aec <__aeabi_dcmplt>
 800d15a:	2800      	cmp	r0, #0
 800d15c:	f43f af35 	beq.w	800cfca <_dtoa_r+0x432>
 800d160:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d162:	1e6b      	subs	r3, r5, #1
 800d164:	930f      	str	r3, [sp, #60]	; 0x3c
 800d166:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d16a:	2b30      	cmp	r3, #48	; 0x30
 800d16c:	d0f8      	beq.n	800d160 <_dtoa_r+0x5c8>
 800d16e:	9700      	str	r7, [sp, #0]
 800d170:	e04a      	b.n	800d208 <_dtoa_r+0x670>
 800d172:	4b06      	ldr	r3, [pc, #24]	; (800d18c <_dtoa_r+0x5f4>)
 800d174:	f7f3 fa48 	bl	8000608 <__aeabi_dmul>
 800d178:	4680      	mov	r8, r0
 800d17a:	4689      	mov	r9, r1
 800d17c:	e7bd      	b.n	800d0fa <_dtoa_r+0x562>
 800d17e:	bf00      	nop
 800d180:	0800e488 	.word	0x0800e488
 800d184:	0800e460 	.word	0x0800e460
 800d188:	3ff00000 	.word	0x3ff00000
 800d18c:	40240000 	.word	0x40240000
 800d190:	401c0000 	.word	0x401c0000
 800d194:	40140000 	.word	0x40140000
 800d198:	3fe00000 	.word	0x3fe00000
 800d19c:	9d01      	ldr	r5, [sp, #4]
 800d19e:	4656      	mov	r6, sl
 800d1a0:	465f      	mov	r7, fp
 800d1a2:	4642      	mov	r2, r8
 800d1a4:	464b      	mov	r3, r9
 800d1a6:	4630      	mov	r0, r6
 800d1a8:	4639      	mov	r1, r7
 800d1aa:	f7f3 fb57 	bl	800085c <__aeabi_ddiv>
 800d1ae:	f7f3 fcdb 	bl	8000b68 <__aeabi_d2iz>
 800d1b2:	4682      	mov	sl, r0
 800d1b4:	f7f3 f9be 	bl	8000534 <__aeabi_i2d>
 800d1b8:	4642      	mov	r2, r8
 800d1ba:	464b      	mov	r3, r9
 800d1bc:	f7f3 fa24 	bl	8000608 <__aeabi_dmul>
 800d1c0:	4602      	mov	r2, r0
 800d1c2:	460b      	mov	r3, r1
 800d1c4:	4630      	mov	r0, r6
 800d1c6:	4639      	mov	r1, r7
 800d1c8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800d1cc:	f7f3 f864 	bl	8000298 <__aeabi_dsub>
 800d1d0:	f805 6b01 	strb.w	r6, [r5], #1
 800d1d4:	9e01      	ldr	r6, [sp, #4]
 800d1d6:	9f03      	ldr	r7, [sp, #12]
 800d1d8:	1bae      	subs	r6, r5, r6
 800d1da:	42b7      	cmp	r7, r6
 800d1dc:	4602      	mov	r2, r0
 800d1de:	460b      	mov	r3, r1
 800d1e0:	d135      	bne.n	800d24e <_dtoa_r+0x6b6>
 800d1e2:	f7f3 f85b 	bl	800029c <__adddf3>
 800d1e6:	4642      	mov	r2, r8
 800d1e8:	464b      	mov	r3, r9
 800d1ea:	4606      	mov	r6, r0
 800d1ec:	460f      	mov	r7, r1
 800d1ee:	f7f3 fc9b 	bl	8000b28 <__aeabi_dcmpgt>
 800d1f2:	b9d0      	cbnz	r0, 800d22a <_dtoa_r+0x692>
 800d1f4:	4642      	mov	r2, r8
 800d1f6:	464b      	mov	r3, r9
 800d1f8:	4630      	mov	r0, r6
 800d1fa:	4639      	mov	r1, r7
 800d1fc:	f7f3 fc6c 	bl	8000ad8 <__aeabi_dcmpeq>
 800d200:	b110      	cbz	r0, 800d208 <_dtoa_r+0x670>
 800d202:	f01a 0f01 	tst.w	sl, #1
 800d206:	d110      	bne.n	800d22a <_dtoa_r+0x692>
 800d208:	4620      	mov	r0, r4
 800d20a:	ee18 1a10 	vmov	r1, s16
 800d20e:	f000 fb4a 	bl	800d8a6 <_Bfree>
 800d212:	2300      	movs	r3, #0
 800d214:	9800      	ldr	r0, [sp, #0]
 800d216:	702b      	strb	r3, [r5, #0]
 800d218:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d21a:	3001      	adds	r0, #1
 800d21c:	6018      	str	r0, [r3, #0]
 800d21e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d220:	2b00      	cmp	r3, #0
 800d222:	f43f acf2 	beq.w	800cc0a <_dtoa_r+0x72>
 800d226:	601d      	str	r5, [r3, #0]
 800d228:	e4ef      	b.n	800cc0a <_dtoa_r+0x72>
 800d22a:	9f00      	ldr	r7, [sp, #0]
 800d22c:	462b      	mov	r3, r5
 800d22e:	461d      	mov	r5, r3
 800d230:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d234:	2a39      	cmp	r2, #57	; 0x39
 800d236:	d106      	bne.n	800d246 <_dtoa_r+0x6ae>
 800d238:	9a01      	ldr	r2, [sp, #4]
 800d23a:	429a      	cmp	r2, r3
 800d23c:	d1f7      	bne.n	800d22e <_dtoa_r+0x696>
 800d23e:	9901      	ldr	r1, [sp, #4]
 800d240:	2230      	movs	r2, #48	; 0x30
 800d242:	3701      	adds	r7, #1
 800d244:	700a      	strb	r2, [r1, #0]
 800d246:	781a      	ldrb	r2, [r3, #0]
 800d248:	3201      	adds	r2, #1
 800d24a:	701a      	strb	r2, [r3, #0]
 800d24c:	e78f      	b.n	800d16e <_dtoa_r+0x5d6>
 800d24e:	4ba6      	ldr	r3, [pc, #664]	; (800d4e8 <_dtoa_r+0x950>)
 800d250:	2200      	movs	r2, #0
 800d252:	f7f3 f9d9 	bl	8000608 <__aeabi_dmul>
 800d256:	2200      	movs	r2, #0
 800d258:	2300      	movs	r3, #0
 800d25a:	4606      	mov	r6, r0
 800d25c:	460f      	mov	r7, r1
 800d25e:	f7f3 fc3b 	bl	8000ad8 <__aeabi_dcmpeq>
 800d262:	2800      	cmp	r0, #0
 800d264:	d09d      	beq.n	800d1a2 <_dtoa_r+0x60a>
 800d266:	e7cf      	b.n	800d208 <_dtoa_r+0x670>
 800d268:	9a08      	ldr	r2, [sp, #32]
 800d26a:	2a00      	cmp	r2, #0
 800d26c:	f000 80d7 	beq.w	800d41e <_dtoa_r+0x886>
 800d270:	9a06      	ldr	r2, [sp, #24]
 800d272:	2a01      	cmp	r2, #1
 800d274:	f300 80ba 	bgt.w	800d3ec <_dtoa_r+0x854>
 800d278:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d27a:	2a00      	cmp	r2, #0
 800d27c:	f000 80b2 	beq.w	800d3e4 <_dtoa_r+0x84c>
 800d280:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d284:	9e07      	ldr	r6, [sp, #28]
 800d286:	9d04      	ldr	r5, [sp, #16]
 800d288:	9a04      	ldr	r2, [sp, #16]
 800d28a:	441a      	add	r2, r3
 800d28c:	9204      	str	r2, [sp, #16]
 800d28e:	9a05      	ldr	r2, [sp, #20]
 800d290:	2101      	movs	r1, #1
 800d292:	441a      	add	r2, r3
 800d294:	4620      	mov	r0, r4
 800d296:	9205      	str	r2, [sp, #20]
 800d298:	f000 fba4 	bl	800d9e4 <__i2b>
 800d29c:	4607      	mov	r7, r0
 800d29e:	2d00      	cmp	r5, #0
 800d2a0:	dd0c      	ble.n	800d2bc <_dtoa_r+0x724>
 800d2a2:	9b05      	ldr	r3, [sp, #20]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	dd09      	ble.n	800d2bc <_dtoa_r+0x724>
 800d2a8:	42ab      	cmp	r3, r5
 800d2aa:	9a04      	ldr	r2, [sp, #16]
 800d2ac:	bfa8      	it	ge
 800d2ae:	462b      	movge	r3, r5
 800d2b0:	1ad2      	subs	r2, r2, r3
 800d2b2:	9204      	str	r2, [sp, #16]
 800d2b4:	9a05      	ldr	r2, [sp, #20]
 800d2b6:	1aed      	subs	r5, r5, r3
 800d2b8:	1ad3      	subs	r3, r2, r3
 800d2ba:	9305      	str	r3, [sp, #20]
 800d2bc:	9b07      	ldr	r3, [sp, #28]
 800d2be:	b31b      	cbz	r3, 800d308 <_dtoa_r+0x770>
 800d2c0:	9b08      	ldr	r3, [sp, #32]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	f000 80af 	beq.w	800d426 <_dtoa_r+0x88e>
 800d2c8:	2e00      	cmp	r6, #0
 800d2ca:	dd13      	ble.n	800d2f4 <_dtoa_r+0x75c>
 800d2cc:	4639      	mov	r1, r7
 800d2ce:	4632      	mov	r2, r6
 800d2d0:	4620      	mov	r0, r4
 800d2d2:	f000 fc47 	bl	800db64 <__pow5mult>
 800d2d6:	ee18 2a10 	vmov	r2, s16
 800d2da:	4601      	mov	r1, r0
 800d2dc:	4607      	mov	r7, r0
 800d2de:	4620      	mov	r0, r4
 800d2e0:	f000 fb96 	bl	800da10 <__multiply>
 800d2e4:	ee18 1a10 	vmov	r1, s16
 800d2e8:	4680      	mov	r8, r0
 800d2ea:	4620      	mov	r0, r4
 800d2ec:	f000 fadb 	bl	800d8a6 <_Bfree>
 800d2f0:	ee08 8a10 	vmov	s16, r8
 800d2f4:	9b07      	ldr	r3, [sp, #28]
 800d2f6:	1b9a      	subs	r2, r3, r6
 800d2f8:	d006      	beq.n	800d308 <_dtoa_r+0x770>
 800d2fa:	ee18 1a10 	vmov	r1, s16
 800d2fe:	4620      	mov	r0, r4
 800d300:	f000 fc30 	bl	800db64 <__pow5mult>
 800d304:	ee08 0a10 	vmov	s16, r0
 800d308:	2101      	movs	r1, #1
 800d30a:	4620      	mov	r0, r4
 800d30c:	f000 fb6a 	bl	800d9e4 <__i2b>
 800d310:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d312:	2b00      	cmp	r3, #0
 800d314:	4606      	mov	r6, r0
 800d316:	f340 8088 	ble.w	800d42a <_dtoa_r+0x892>
 800d31a:	461a      	mov	r2, r3
 800d31c:	4601      	mov	r1, r0
 800d31e:	4620      	mov	r0, r4
 800d320:	f000 fc20 	bl	800db64 <__pow5mult>
 800d324:	9b06      	ldr	r3, [sp, #24]
 800d326:	2b01      	cmp	r3, #1
 800d328:	4606      	mov	r6, r0
 800d32a:	f340 8081 	ble.w	800d430 <_dtoa_r+0x898>
 800d32e:	f04f 0800 	mov.w	r8, #0
 800d332:	6933      	ldr	r3, [r6, #16]
 800d334:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d338:	6918      	ldr	r0, [r3, #16]
 800d33a:	f000 fb03 	bl	800d944 <__hi0bits>
 800d33e:	f1c0 0020 	rsb	r0, r0, #32
 800d342:	9b05      	ldr	r3, [sp, #20]
 800d344:	4418      	add	r0, r3
 800d346:	f010 001f 	ands.w	r0, r0, #31
 800d34a:	f000 8092 	beq.w	800d472 <_dtoa_r+0x8da>
 800d34e:	f1c0 0320 	rsb	r3, r0, #32
 800d352:	2b04      	cmp	r3, #4
 800d354:	f340 808a 	ble.w	800d46c <_dtoa_r+0x8d4>
 800d358:	f1c0 001c 	rsb	r0, r0, #28
 800d35c:	9b04      	ldr	r3, [sp, #16]
 800d35e:	4403      	add	r3, r0
 800d360:	9304      	str	r3, [sp, #16]
 800d362:	9b05      	ldr	r3, [sp, #20]
 800d364:	4403      	add	r3, r0
 800d366:	4405      	add	r5, r0
 800d368:	9305      	str	r3, [sp, #20]
 800d36a:	9b04      	ldr	r3, [sp, #16]
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	dd07      	ble.n	800d380 <_dtoa_r+0x7e8>
 800d370:	ee18 1a10 	vmov	r1, s16
 800d374:	461a      	mov	r2, r3
 800d376:	4620      	mov	r0, r4
 800d378:	f000 fc34 	bl	800dbe4 <__lshift>
 800d37c:	ee08 0a10 	vmov	s16, r0
 800d380:	9b05      	ldr	r3, [sp, #20]
 800d382:	2b00      	cmp	r3, #0
 800d384:	dd05      	ble.n	800d392 <_dtoa_r+0x7fa>
 800d386:	4631      	mov	r1, r6
 800d388:	461a      	mov	r2, r3
 800d38a:	4620      	mov	r0, r4
 800d38c:	f000 fc2a 	bl	800dbe4 <__lshift>
 800d390:	4606      	mov	r6, r0
 800d392:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d394:	2b00      	cmp	r3, #0
 800d396:	d06e      	beq.n	800d476 <_dtoa_r+0x8de>
 800d398:	ee18 0a10 	vmov	r0, s16
 800d39c:	4631      	mov	r1, r6
 800d39e:	f000 fc91 	bl	800dcc4 <__mcmp>
 800d3a2:	2800      	cmp	r0, #0
 800d3a4:	da67      	bge.n	800d476 <_dtoa_r+0x8de>
 800d3a6:	9b00      	ldr	r3, [sp, #0]
 800d3a8:	3b01      	subs	r3, #1
 800d3aa:	ee18 1a10 	vmov	r1, s16
 800d3ae:	9300      	str	r3, [sp, #0]
 800d3b0:	220a      	movs	r2, #10
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	4620      	mov	r0, r4
 800d3b6:	f000 fa7f 	bl	800d8b8 <__multadd>
 800d3ba:	9b08      	ldr	r3, [sp, #32]
 800d3bc:	ee08 0a10 	vmov	s16, r0
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	f000 81b0 	beq.w	800d726 <_dtoa_r+0xb8e>
 800d3c6:	2300      	movs	r3, #0
 800d3c8:	4639      	mov	r1, r7
 800d3ca:	220a      	movs	r2, #10
 800d3cc:	4620      	mov	r0, r4
 800d3ce:	f000 fa73 	bl	800d8b8 <__multadd>
 800d3d2:	9b02      	ldr	r3, [sp, #8]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	4607      	mov	r7, r0
 800d3d8:	f300 808e 	bgt.w	800d4f8 <_dtoa_r+0x960>
 800d3dc:	9b06      	ldr	r3, [sp, #24]
 800d3de:	2b02      	cmp	r3, #2
 800d3e0:	dc51      	bgt.n	800d486 <_dtoa_r+0x8ee>
 800d3e2:	e089      	b.n	800d4f8 <_dtoa_r+0x960>
 800d3e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d3e6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d3ea:	e74b      	b.n	800d284 <_dtoa_r+0x6ec>
 800d3ec:	9b03      	ldr	r3, [sp, #12]
 800d3ee:	1e5e      	subs	r6, r3, #1
 800d3f0:	9b07      	ldr	r3, [sp, #28]
 800d3f2:	42b3      	cmp	r3, r6
 800d3f4:	bfbf      	itttt	lt
 800d3f6:	9b07      	ldrlt	r3, [sp, #28]
 800d3f8:	9607      	strlt	r6, [sp, #28]
 800d3fa:	1af2      	sublt	r2, r6, r3
 800d3fc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800d3fe:	bfb6      	itet	lt
 800d400:	189b      	addlt	r3, r3, r2
 800d402:	1b9e      	subge	r6, r3, r6
 800d404:	930a      	strlt	r3, [sp, #40]	; 0x28
 800d406:	9b03      	ldr	r3, [sp, #12]
 800d408:	bfb8      	it	lt
 800d40a:	2600      	movlt	r6, #0
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	bfb7      	itett	lt
 800d410:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800d414:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800d418:	1a9d      	sublt	r5, r3, r2
 800d41a:	2300      	movlt	r3, #0
 800d41c:	e734      	b.n	800d288 <_dtoa_r+0x6f0>
 800d41e:	9e07      	ldr	r6, [sp, #28]
 800d420:	9d04      	ldr	r5, [sp, #16]
 800d422:	9f08      	ldr	r7, [sp, #32]
 800d424:	e73b      	b.n	800d29e <_dtoa_r+0x706>
 800d426:	9a07      	ldr	r2, [sp, #28]
 800d428:	e767      	b.n	800d2fa <_dtoa_r+0x762>
 800d42a:	9b06      	ldr	r3, [sp, #24]
 800d42c:	2b01      	cmp	r3, #1
 800d42e:	dc18      	bgt.n	800d462 <_dtoa_r+0x8ca>
 800d430:	f1ba 0f00 	cmp.w	sl, #0
 800d434:	d115      	bne.n	800d462 <_dtoa_r+0x8ca>
 800d436:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d43a:	b993      	cbnz	r3, 800d462 <_dtoa_r+0x8ca>
 800d43c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d440:	0d1b      	lsrs	r3, r3, #20
 800d442:	051b      	lsls	r3, r3, #20
 800d444:	b183      	cbz	r3, 800d468 <_dtoa_r+0x8d0>
 800d446:	9b04      	ldr	r3, [sp, #16]
 800d448:	3301      	adds	r3, #1
 800d44a:	9304      	str	r3, [sp, #16]
 800d44c:	9b05      	ldr	r3, [sp, #20]
 800d44e:	3301      	adds	r3, #1
 800d450:	9305      	str	r3, [sp, #20]
 800d452:	f04f 0801 	mov.w	r8, #1
 800d456:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d458:	2b00      	cmp	r3, #0
 800d45a:	f47f af6a 	bne.w	800d332 <_dtoa_r+0x79a>
 800d45e:	2001      	movs	r0, #1
 800d460:	e76f      	b.n	800d342 <_dtoa_r+0x7aa>
 800d462:	f04f 0800 	mov.w	r8, #0
 800d466:	e7f6      	b.n	800d456 <_dtoa_r+0x8be>
 800d468:	4698      	mov	r8, r3
 800d46a:	e7f4      	b.n	800d456 <_dtoa_r+0x8be>
 800d46c:	f43f af7d 	beq.w	800d36a <_dtoa_r+0x7d2>
 800d470:	4618      	mov	r0, r3
 800d472:	301c      	adds	r0, #28
 800d474:	e772      	b.n	800d35c <_dtoa_r+0x7c4>
 800d476:	9b03      	ldr	r3, [sp, #12]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	dc37      	bgt.n	800d4ec <_dtoa_r+0x954>
 800d47c:	9b06      	ldr	r3, [sp, #24]
 800d47e:	2b02      	cmp	r3, #2
 800d480:	dd34      	ble.n	800d4ec <_dtoa_r+0x954>
 800d482:	9b03      	ldr	r3, [sp, #12]
 800d484:	9302      	str	r3, [sp, #8]
 800d486:	9b02      	ldr	r3, [sp, #8]
 800d488:	b96b      	cbnz	r3, 800d4a6 <_dtoa_r+0x90e>
 800d48a:	4631      	mov	r1, r6
 800d48c:	2205      	movs	r2, #5
 800d48e:	4620      	mov	r0, r4
 800d490:	f000 fa12 	bl	800d8b8 <__multadd>
 800d494:	4601      	mov	r1, r0
 800d496:	4606      	mov	r6, r0
 800d498:	ee18 0a10 	vmov	r0, s16
 800d49c:	f000 fc12 	bl	800dcc4 <__mcmp>
 800d4a0:	2800      	cmp	r0, #0
 800d4a2:	f73f adba 	bgt.w	800d01a <_dtoa_r+0x482>
 800d4a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4a8:	9d01      	ldr	r5, [sp, #4]
 800d4aa:	43db      	mvns	r3, r3
 800d4ac:	9300      	str	r3, [sp, #0]
 800d4ae:	f04f 0800 	mov.w	r8, #0
 800d4b2:	4631      	mov	r1, r6
 800d4b4:	4620      	mov	r0, r4
 800d4b6:	f000 f9f6 	bl	800d8a6 <_Bfree>
 800d4ba:	2f00      	cmp	r7, #0
 800d4bc:	f43f aea4 	beq.w	800d208 <_dtoa_r+0x670>
 800d4c0:	f1b8 0f00 	cmp.w	r8, #0
 800d4c4:	d005      	beq.n	800d4d2 <_dtoa_r+0x93a>
 800d4c6:	45b8      	cmp	r8, r7
 800d4c8:	d003      	beq.n	800d4d2 <_dtoa_r+0x93a>
 800d4ca:	4641      	mov	r1, r8
 800d4cc:	4620      	mov	r0, r4
 800d4ce:	f000 f9ea 	bl	800d8a6 <_Bfree>
 800d4d2:	4639      	mov	r1, r7
 800d4d4:	4620      	mov	r0, r4
 800d4d6:	f000 f9e6 	bl	800d8a6 <_Bfree>
 800d4da:	e695      	b.n	800d208 <_dtoa_r+0x670>
 800d4dc:	2600      	movs	r6, #0
 800d4de:	4637      	mov	r7, r6
 800d4e0:	e7e1      	b.n	800d4a6 <_dtoa_r+0x90e>
 800d4e2:	9700      	str	r7, [sp, #0]
 800d4e4:	4637      	mov	r7, r6
 800d4e6:	e598      	b.n	800d01a <_dtoa_r+0x482>
 800d4e8:	40240000 	.word	0x40240000
 800d4ec:	9b08      	ldr	r3, [sp, #32]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	f000 80c9 	beq.w	800d686 <_dtoa_r+0xaee>
 800d4f4:	9b03      	ldr	r3, [sp, #12]
 800d4f6:	9302      	str	r3, [sp, #8]
 800d4f8:	2d00      	cmp	r5, #0
 800d4fa:	dd05      	ble.n	800d508 <_dtoa_r+0x970>
 800d4fc:	4639      	mov	r1, r7
 800d4fe:	462a      	mov	r2, r5
 800d500:	4620      	mov	r0, r4
 800d502:	f000 fb6f 	bl	800dbe4 <__lshift>
 800d506:	4607      	mov	r7, r0
 800d508:	f1b8 0f00 	cmp.w	r8, #0
 800d50c:	d05a      	beq.n	800d5c4 <_dtoa_r+0xa2c>
 800d50e:	6879      	ldr	r1, [r7, #4]
 800d510:	4620      	mov	r0, r4
 800d512:	f000 f9a3 	bl	800d85c <_Balloc>
 800d516:	4605      	mov	r5, r0
 800d518:	b920      	cbnz	r0, 800d524 <_dtoa_r+0x98c>
 800d51a:	4b87      	ldr	r3, [pc, #540]	; (800d738 <_dtoa_r+0xba0>)
 800d51c:	4602      	mov	r2, r0
 800d51e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d522:	e477      	b.n	800ce14 <_dtoa_r+0x27c>
 800d524:	693a      	ldr	r2, [r7, #16]
 800d526:	3202      	adds	r2, #2
 800d528:	0092      	lsls	r2, r2, #2
 800d52a:	f107 010c 	add.w	r1, r7, #12
 800d52e:	300c      	adds	r0, #12
 800d530:	f7fc f8ba 	bl	80096a8 <memcpy>
 800d534:	2201      	movs	r2, #1
 800d536:	4629      	mov	r1, r5
 800d538:	4620      	mov	r0, r4
 800d53a:	f000 fb53 	bl	800dbe4 <__lshift>
 800d53e:	9b01      	ldr	r3, [sp, #4]
 800d540:	f103 0901 	add.w	r9, r3, #1
 800d544:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800d548:	4413      	add	r3, r2
 800d54a:	9305      	str	r3, [sp, #20]
 800d54c:	f00a 0301 	and.w	r3, sl, #1
 800d550:	46b8      	mov	r8, r7
 800d552:	9304      	str	r3, [sp, #16]
 800d554:	4607      	mov	r7, r0
 800d556:	4631      	mov	r1, r6
 800d558:	ee18 0a10 	vmov	r0, s16
 800d55c:	f7ff fa8e 	bl	800ca7c <quorem>
 800d560:	4641      	mov	r1, r8
 800d562:	9002      	str	r0, [sp, #8]
 800d564:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d568:	ee18 0a10 	vmov	r0, s16
 800d56c:	f000 fbaa 	bl	800dcc4 <__mcmp>
 800d570:	463a      	mov	r2, r7
 800d572:	9003      	str	r0, [sp, #12]
 800d574:	4631      	mov	r1, r6
 800d576:	4620      	mov	r0, r4
 800d578:	f000 fbc0 	bl	800dcfc <__mdiff>
 800d57c:	68c2      	ldr	r2, [r0, #12]
 800d57e:	f109 3bff 	add.w	fp, r9, #4294967295
 800d582:	4605      	mov	r5, r0
 800d584:	bb02      	cbnz	r2, 800d5c8 <_dtoa_r+0xa30>
 800d586:	4601      	mov	r1, r0
 800d588:	ee18 0a10 	vmov	r0, s16
 800d58c:	f000 fb9a 	bl	800dcc4 <__mcmp>
 800d590:	4602      	mov	r2, r0
 800d592:	4629      	mov	r1, r5
 800d594:	4620      	mov	r0, r4
 800d596:	9207      	str	r2, [sp, #28]
 800d598:	f000 f985 	bl	800d8a6 <_Bfree>
 800d59c:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800d5a0:	ea43 0102 	orr.w	r1, r3, r2
 800d5a4:	9b04      	ldr	r3, [sp, #16]
 800d5a6:	430b      	orrs	r3, r1
 800d5a8:	464d      	mov	r5, r9
 800d5aa:	d10f      	bne.n	800d5cc <_dtoa_r+0xa34>
 800d5ac:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d5b0:	d02a      	beq.n	800d608 <_dtoa_r+0xa70>
 800d5b2:	9b03      	ldr	r3, [sp, #12]
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	dd02      	ble.n	800d5be <_dtoa_r+0xa26>
 800d5b8:	9b02      	ldr	r3, [sp, #8]
 800d5ba:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800d5be:	f88b a000 	strb.w	sl, [fp]
 800d5c2:	e776      	b.n	800d4b2 <_dtoa_r+0x91a>
 800d5c4:	4638      	mov	r0, r7
 800d5c6:	e7ba      	b.n	800d53e <_dtoa_r+0x9a6>
 800d5c8:	2201      	movs	r2, #1
 800d5ca:	e7e2      	b.n	800d592 <_dtoa_r+0x9fa>
 800d5cc:	9b03      	ldr	r3, [sp, #12]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	db04      	blt.n	800d5dc <_dtoa_r+0xa44>
 800d5d2:	9906      	ldr	r1, [sp, #24]
 800d5d4:	430b      	orrs	r3, r1
 800d5d6:	9904      	ldr	r1, [sp, #16]
 800d5d8:	430b      	orrs	r3, r1
 800d5da:	d122      	bne.n	800d622 <_dtoa_r+0xa8a>
 800d5dc:	2a00      	cmp	r2, #0
 800d5de:	ddee      	ble.n	800d5be <_dtoa_r+0xa26>
 800d5e0:	ee18 1a10 	vmov	r1, s16
 800d5e4:	2201      	movs	r2, #1
 800d5e6:	4620      	mov	r0, r4
 800d5e8:	f000 fafc 	bl	800dbe4 <__lshift>
 800d5ec:	4631      	mov	r1, r6
 800d5ee:	ee08 0a10 	vmov	s16, r0
 800d5f2:	f000 fb67 	bl	800dcc4 <__mcmp>
 800d5f6:	2800      	cmp	r0, #0
 800d5f8:	dc03      	bgt.n	800d602 <_dtoa_r+0xa6a>
 800d5fa:	d1e0      	bne.n	800d5be <_dtoa_r+0xa26>
 800d5fc:	f01a 0f01 	tst.w	sl, #1
 800d600:	d0dd      	beq.n	800d5be <_dtoa_r+0xa26>
 800d602:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d606:	d1d7      	bne.n	800d5b8 <_dtoa_r+0xa20>
 800d608:	2339      	movs	r3, #57	; 0x39
 800d60a:	f88b 3000 	strb.w	r3, [fp]
 800d60e:	462b      	mov	r3, r5
 800d610:	461d      	mov	r5, r3
 800d612:	3b01      	subs	r3, #1
 800d614:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d618:	2a39      	cmp	r2, #57	; 0x39
 800d61a:	d071      	beq.n	800d700 <_dtoa_r+0xb68>
 800d61c:	3201      	adds	r2, #1
 800d61e:	701a      	strb	r2, [r3, #0]
 800d620:	e747      	b.n	800d4b2 <_dtoa_r+0x91a>
 800d622:	2a00      	cmp	r2, #0
 800d624:	dd07      	ble.n	800d636 <_dtoa_r+0xa9e>
 800d626:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d62a:	d0ed      	beq.n	800d608 <_dtoa_r+0xa70>
 800d62c:	f10a 0301 	add.w	r3, sl, #1
 800d630:	f88b 3000 	strb.w	r3, [fp]
 800d634:	e73d      	b.n	800d4b2 <_dtoa_r+0x91a>
 800d636:	9b05      	ldr	r3, [sp, #20]
 800d638:	f809 ac01 	strb.w	sl, [r9, #-1]
 800d63c:	4599      	cmp	r9, r3
 800d63e:	d047      	beq.n	800d6d0 <_dtoa_r+0xb38>
 800d640:	ee18 1a10 	vmov	r1, s16
 800d644:	2300      	movs	r3, #0
 800d646:	220a      	movs	r2, #10
 800d648:	4620      	mov	r0, r4
 800d64a:	f000 f935 	bl	800d8b8 <__multadd>
 800d64e:	45b8      	cmp	r8, r7
 800d650:	ee08 0a10 	vmov	s16, r0
 800d654:	f04f 0300 	mov.w	r3, #0
 800d658:	f04f 020a 	mov.w	r2, #10
 800d65c:	4641      	mov	r1, r8
 800d65e:	4620      	mov	r0, r4
 800d660:	d106      	bne.n	800d670 <_dtoa_r+0xad8>
 800d662:	f000 f929 	bl	800d8b8 <__multadd>
 800d666:	4680      	mov	r8, r0
 800d668:	4607      	mov	r7, r0
 800d66a:	f109 0901 	add.w	r9, r9, #1
 800d66e:	e772      	b.n	800d556 <_dtoa_r+0x9be>
 800d670:	f000 f922 	bl	800d8b8 <__multadd>
 800d674:	4639      	mov	r1, r7
 800d676:	4680      	mov	r8, r0
 800d678:	2300      	movs	r3, #0
 800d67a:	220a      	movs	r2, #10
 800d67c:	4620      	mov	r0, r4
 800d67e:	f000 f91b 	bl	800d8b8 <__multadd>
 800d682:	4607      	mov	r7, r0
 800d684:	e7f1      	b.n	800d66a <_dtoa_r+0xad2>
 800d686:	9b03      	ldr	r3, [sp, #12]
 800d688:	9302      	str	r3, [sp, #8]
 800d68a:	9d01      	ldr	r5, [sp, #4]
 800d68c:	ee18 0a10 	vmov	r0, s16
 800d690:	4631      	mov	r1, r6
 800d692:	f7ff f9f3 	bl	800ca7c <quorem>
 800d696:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d69a:	9b01      	ldr	r3, [sp, #4]
 800d69c:	f805 ab01 	strb.w	sl, [r5], #1
 800d6a0:	1aea      	subs	r2, r5, r3
 800d6a2:	9b02      	ldr	r3, [sp, #8]
 800d6a4:	4293      	cmp	r3, r2
 800d6a6:	dd09      	ble.n	800d6bc <_dtoa_r+0xb24>
 800d6a8:	ee18 1a10 	vmov	r1, s16
 800d6ac:	2300      	movs	r3, #0
 800d6ae:	220a      	movs	r2, #10
 800d6b0:	4620      	mov	r0, r4
 800d6b2:	f000 f901 	bl	800d8b8 <__multadd>
 800d6b6:	ee08 0a10 	vmov	s16, r0
 800d6ba:	e7e7      	b.n	800d68c <_dtoa_r+0xaf4>
 800d6bc:	9b02      	ldr	r3, [sp, #8]
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	bfc8      	it	gt
 800d6c2:	461d      	movgt	r5, r3
 800d6c4:	9b01      	ldr	r3, [sp, #4]
 800d6c6:	bfd8      	it	le
 800d6c8:	2501      	movle	r5, #1
 800d6ca:	441d      	add	r5, r3
 800d6cc:	f04f 0800 	mov.w	r8, #0
 800d6d0:	ee18 1a10 	vmov	r1, s16
 800d6d4:	2201      	movs	r2, #1
 800d6d6:	4620      	mov	r0, r4
 800d6d8:	f000 fa84 	bl	800dbe4 <__lshift>
 800d6dc:	4631      	mov	r1, r6
 800d6de:	ee08 0a10 	vmov	s16, r0
 800d6e2:	f000 faef 	bl	800dcc4 <__mcmp>
 800d6e6:	2800      	cmp	r0, #0
 800d6e8:	dc91      	bgt.n	800d60e <_dtoa_r+0xa76>
 800d6ea:	d102      	bne.n	800d6f2 <_dtoa_r+0xb5a>
 800d6ec:	f01a 0f01 	tst.w	sl, #1
 800d6f0:	d18d      	bne.n	800d60e <_dtoa_r+0xa76>
 800d6f2:	462b      	mov	r3, r5
 800d6f4:	461d      	mov	r5, r3
 800d6f6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d6fa:	2a30      	cmp	r2, #48	; 0x30
 800d6fc:	d0fa      	beq.n	800d6f4 <_dtoa_r+0xb5c>
 800d6fe:	e6d8      	b.n	800d4b2 <_dtoa_r+0x91a>
 800d700:	9a01      	ldr	r2, [sp, #4]
 800d702:	429a      	cmp	r2, r3
 800d704:	d184      	bne.n	800d610 <_dtoa_r+0xa78>
 800d706:	9b00      	ldr	r3, [sp, #0]
 800d708:	3301      	adds	r3, #1
 800d70a:	9300      	str	r3, [sp, #0]
 800d70c:	2331      	movs	r3, #49	; 0x31
 800d70e:	7013      	strb	r3, [r2, #0]
 800d710:	e6cf      	b.n	800d4b2 <_dtoa_r+0x91a>
 800d712:	4b0a      	ldr	r3, [pc, #40]	; (800d73c <_dtoa_r+0xba4>)
 800d714:	f7ff ba97 	b.w	800cc46 <_dtoa_r+0xae>
 800d718:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	f47f aa7b 	bne.w	800cc16 <_dtoa_r+0x7e>
 800d720:	4b07      	ldr	r3, [pc, #28]	; (800d740 <_dtoa_r+0xba8>)
 800d722:	f7ff ba90 	b.w	800cc46 <_dtoa_r+0xae>
 800d726:	9b02      	ldr	r3, [sp, #8]
 800d728:	2b00      	cmp	r3, #0
 800d72a:	dcae      	bgt.n	800d68a <_dtoa_r+0xaf2>
 800d72c:	9b06      	ldr	r3, [sp, #24]
 800d72e:	2b02      	cmp	r3, #2
 800d730:	f73f aea9 	bgt.w	800d486 <_dtoa_r+0x8ee>
 800d734:	e7a9      	b.n	800d68a <_dtoa_r+0xaf2>
 800d736:	bf00      	nop
 800d738:	0800e398 	.word	0x0800e398
 800d73c:	0800e268 	.word	0x0800e268
 800d740:	0800e38f 	.word	0x0800e38f

0800d744 <_fclose_r>:
 800d744:	b570      	push	{r4, r5, r6, lr}
 800d746:	4606      	mov	r6, r0
 800d748:	460c      	mov	r4, r1
 800d74a:	b911      	cbnz	r1, 800d752 <_fclose_r+0xe>
 800d74c:	2500      	movs	r5, #0
 800d74e:	4628      	mov	r0, r5
 800d750:	bd70      	pop	{r4, r5, r6, pc}
 800d752:	b118      	cbz	r0, 800d75c <_fclose_r+0x18>
 800d754:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800d756:	b90b      	cbnz	r3, 800d75c <_fclose_r+0x18>
 800d758:	f7fc fe68 	bl	800a42c <__sinit>
 800d75c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d75e:	07d8      	lsls	r0, r3, #31
 800d760:	d405      	bmi.n	800d76e <_fclose_r+0x2a>
 800d762:	89a3      	ldrh	r3, [r4, #12]
 800d764:	0599      	lsls	r1, r3, #22
 800d766:	d402      	bmi.n	800d76e <_fclose_r+0x2a>
 800d768:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d76a:	f7fd f991 	bl	800aa90 <__retarget_lock_acquire_recursive>
 800d76e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d772:	b93b      	cbnz	r3, 800d784 <_fclose_r+0x40>
 800d774:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800d776:	f015 0501 	ands.w	r5, r5, #1
 800d77a:	d1e7      	bne.n	800d74c <_fclose_r+0x8>
 800d77c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d77e:	f7fd f988 	bl	800aa92 <__retarget_lock_release_recursive>
 800d782:	e7e4      	b.n	800d74e <_fclose_r+0xa>
 800d784:	4621      	mov	r1, r4
 800d786:	4630      	mov	r0, r6
 800d788:	f7fc fd56 	bl	800a238 <__sflush_r>
 800d78c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d78e:	4605      	mov	r5, r0
 800d790:	b133      	cbz	r3, 800d7a0 <_fclose_r+0x5c>
 800d792:	69e1      	ldr	r1, [r4, #28]
 800d794:	4630      	mov	r0, r6
 800d796:	4798      	blx	r3
 800d798:	2800      	cmp	r0, #0
 800d79a:	bfb8      	it	lt
 800d79c:	f04f 35ff 	movlt.w	r5, #4294967295
 800d7a0:	89a3      	ldrh	r3, [r4, #12]
 800d7a2:	061a      	lsls	r2, r3, #24
 800d7a4:	d503      	bpl.n	800d7ae <_fclose_r+0x6a>
 800d7a6:	6921      	ldr	r1, [r4, #16]
 800d7a8:	4630      	mov	r0, r6
 800d7aa:	f7fc ff3b 	bl	800a624 <_free_r>
 800d7ae:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800d7b0:	b141      	cbz	r1, 800d7c4 <_fclose_r+0x80>
 800d7b2:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800d7b6:	4299      	cmp	r1, r3
 800d7b8:	d002      	beq.n	800d7c0 <_fclose_r+0x7c>
 800d7ba:	4630      	mov	r0, r6
 800d7bc:	f7fc ff32 	bl	800a624 <_free_r>
 800d7c0:	2300      	movs	r3, #0
 800d7c2:	6323      	str	r3, [r4, #48]	; 0x30
 800d7c4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800d7c6:	b121      	cbz	r1, 800d7d2 <_fclose_r+0x8e>
 800d7c8:	4630      	mov	r0, r6
 800d7ca:	f7fc ff2b 	bl	800a624 <_free_r>
 800d7ce:	2300      	movs	r3, #0
 800d7d0:	6463      	str	r3, [r4, #68]	; 0x44
 800d7d2:	f7fc fe13 	bl	800a3fc <__sfp_lock_acquire>
 800d7d6:	2300      	movs	r3, #0
 800d7d8:	81a3      	strh	r3, [r4, #12]
 800d7da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d7dc:	07db      	lsls	r3, r3, #31
 800d7de:	d402      	bmi.n	800d7e6 <_fclose_r+0xa2>
 800d7e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d7e2:	f7fd f956 	bl	800aa92 <__retarget_lock_release_recursive>
 800d7e6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d7e8:	f7fd f951 	bl	800aa8e <__retarget_lock_close_recursive>
 800d7ec:	f7fc fe0c 	bl	800a408 <__sfp_lock_release>
 800d7f0:	e7ad      	b.n	800d74e <_fclose_r+0xa>
	...

0800d7f4 <_fstat_r>:
 800d7f4:	b538      	push	{r3, r4, r5, lr}
 800d7f6:	4d07      	ldr	r5, [pc, #28]	; (800d814 <_fstat_r+0x20>)
 800d7f8:	2300      	movs	r3, #0
 800d7fa:	4604      	mov	r4, r0
 800d7fc:	4608      	mov	r0, r1
 800d7fe:	4611      	mov	r1, r2
 800d800:	602b      	str	r3, [r5, #0]
 800d802:	f7f3 fe50 	bl	80014a6 <_fstat>
 800d806:	1c43      	adds	r3, r0, #1
 800d808:	d102      	bne.n	800d810 <_fstat_r+0x1c>
 800d80a:	682b      	ldr	r3, [r5, #0]
 800d80c:	b103      	cbz	r3, 800d810 <_fstat_r+0x1c>
 800d80e:	6023      	str	r3, [r4, #0]
 800d810:	bd38      	pop	{r3, r4, r5, pc}
 800d812:	bf00      	nop
 800d814:	2000203c 	.word	0x2000203c

0800d818 <_isatty_r>:
 800d818:	b538      	push	{r3, r4, r5, lr}
 800d81a:	4d06      	ldr	r5, [pc, #24]	; (800d834 <_isatty_r+0x1c>)
 800d81c:	2300      	movs	r3, #0
 800d81e:	4604      	mov	r4, r0
 800d820:	4608      	mov	r0, r1
 800d822:	602b      	str	r3, [r5, #0]
 800d824:	f7f3 fe4f 	bl	80014c6 <_isatty>
 800d828:	1c43      	adds	r3, r0, #1
 800d82a:	d102      	bne.n	800d832 <_isatty_r+0x1a>
 800d82c:	682b      	ldr	r3, [r5, #0]
 800d82e:	b103      	cbz	r3, 800d832 <_isatty_r+0x1a>
 800d830:	6023      	str	r3, [r4, #0]
 800d832:	bd38      	pop	{r3, r4, r5, pc}
 800d834:	2000203c 	.word	0x2000203c

0800d838 <_lseek_r>:
 800d838:	b538      	push	{r3, r4, r5, lr}
 800d83a:	4d07      	ldr	r5, [pc, #28]	; (800d858 <_lseek_r+0x20>)
 800d83c:	4604      	mov	r4, r0
 800d83e:	4608      	mov	r0, r1
 800d840:	4611      	mov	r1, r2
 800d842:	2200      	movs	r2, #0
 800d844:	602a      	str	r2, [r5, #0]
 800d846:	461a      	mov	r2, r3
 800d848:	f7f3 fe48 	bl	80014dc <_lseek>
 800d84c:	1c43      	adds	r3, r0, #1
 800d84e:	d102      	bne.n	800d856 <_lseek_r+0x1e>
 800d850:	682b      	ldr	r3, [r5, #0]
 800d852:	b103      	cbz	r3, 800d856 <_lseek_r+0x1e>
 800d854:	6023      	str	r3, [r4, #0]
 800d856:	bd38      	pop	{r3, r4, r5, pc}
 800d858:	2000203c 	.word	0x2000203c

0800d85c <_Balloc>:
 800d85c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800d85e:	b570      	push	{r4, r5, r6, lr}
 800d860:	4605      	mov	r5, r0
 800d862:	460c      	mov	r4, r1
 800d864:	b17b      	cbz	r3, 800d886 <_Balloc+0x2a>
 800d866:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800d868:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800d86c:	b9a0      	cbnz	r0, 800d898 <_Balloc+0x3c>
 800d86e:	2101      	movs	r1, #1
 800d870:	fa01 f604 	lsl.w	r6, r1, r4
 800d874:	1d72      	adds	r2, r6, #5
 800d876:	0092      	lsls	r2, r2, #2
 800d878:	4628      	mov	r0, r5
 800d87a:	f000 fbea 	bl	800e052 <_calloc_r>
 800d87e:	b148      	cbz	r0, 800d894 <_Balloc+0x38>
 800d880:	e9c0 4601 	strd	r4, r6, [r0, #4]
 800d884:	e00b      	b.n	800d89e <_Balloc+0x42>
 800d886:	2221      	movs	r2, #33	; 0x21
 800d888:	2104      	movs	r1, #4
 800d88a:	f000 fbe2 	bl	800e052 <_calloc_r>
 800d88e:	64e8      	str	r0, [r5, #76]	; 0x4c
 800d890:	2800      	cmp	r0, #0
 800d892:	d1e8      	bne.n	800d866 <_Balloc+0xa>
 800d894:	2000      	movs	r0, #0
 800d896:	bd70      	pop	{r4, r5, r6, pc}
 800d898:	6802      	ldr	r2, [r0, #0]
 800d89a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800d89e:	2300      	movs	r3, #0
 800d8a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d8a4:	e7f7      	b.n	800d896 <_Balloc+0x3a>

0800d8a6 <_Bfree>:
 800d8a6:	b131      	cbz	r1, 800d8b6 <_Bfree+0x10>
 800d8a8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800d8aa:	684a      	ldr	r2, [r1, #4]
 800d8ac:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800d8b0:	6008      	str	r0, [r1, #0]
 800d8b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800d8b6:	4770      	bx	lr

0800d8b8 <__multadd>:
 800d8b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8bc:	690d      	ldr	r5, [r1, #16]
 800d8be:	4607      	mov	r7, r0
 800d8c0:	460c      	mov	r4, r1
 800d8c2:	461e      	mov	r6, r3
 800d8c4:	f101 0c14 	add.w	ip, r1, #20
 800d8c8:	2000      	movs	r0, #0
 800d8ca:	f8dc 3000 	ldr.w	r3, [ip]
 800d8ce:	b299      	uxth	r1, r3
 800d8d0:	fb02 6101 	mla	r1, r2, r1, r6
 800d8d4:	0c1e      	lsrs	r6, r3, #16
 800d8d6:	0c0b      	lsrs	r3, r1, #16
 800d8d8:	fb02 3306 	mla	r3, r2, r6, r3
 800d8dc:	b289      	uxth	r1, r1
 800d8de:	3001      	adds	r0, #1
 800d8e0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d8e4:	4285      	cmp	r5, r0
 800d8e6:	f84c 1b04 	str.w	r1, [ip], #4
 800d8ea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d8ee:	dcec      	bgt.n	800d8ca <__multadd+0x12>
 800d8f0:	b30e      	cbz	r6, 800d936 <__multadd+0x7e>
 800d8f2:	68a3      	ldr	r3, [r4, #8]
 800d8f4:	42ab      	cmp	r3, r5
 800d8f6:	dc19      	bgt.n	800d92c <__multadd+0x74>
 800d8f8:	6861      	ldr	r1, [r4, #4]
 800d8fa:	4638      	mov	r0, r7
 800d8fc:	3101      	adds	r1, #1
 800d8fe:	f7ff ffad 	bl	800d85c <_Balloc>
 800d902:	4680      	mov	r8, r0
 800d904:	b928      	cbnz	r0, 800d912 <__multadd+0x5a>
 800d906:	4602      	mov	r2, r0
 800d908:	4b0c      	ldr	r3, [pc, #48]	; (800d93c <__multadd+0x84>)
 800d90a:	480d      	ldr	r0, [pc, #52]	; (800d940 <__multadd+0x88>)
 800d90c:	21b5      	movs	r1, #181	; 0xb5
 800d90e:	f7fb fe71 	bl	80095f4 <__assert_func>
 800d912:	6922      	ldr	r2, [r4, #16]
 800d914:	3202      	adds	r2, #2
 800d916:	f104 010c 	add.w	r1, r4, #12
 800d91a:	0092      	lsls	r2, r2, #2
 800d91c:	300c      	adds	r0, #12
 800d91e:	f7fb fec3 	bl	80096a8 <memcpy>
 800d922:	4621      	mov	r1, r4
 800d924:	4638      	mov	r0, r7
 800d926:	f7ff ffbe 	bl	800d8a6 <_Bfree>
 800d92a:	4644      	mov	r4, r8
 800d92c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d930:	3501      	adds	r5, #1
 800d932:	615e      	str	r6, [r3, #20]
 800d934:	6125      	str	r5, [r4, #16]
 800d936:	4620      	mov	r0, r4
 800d938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d93c:	0800e398 	.word	0x0800e398
 800d940:	0800e404 	.word	0x0800e404

0800d944 <__hi0bits>:
 800d944:	0c03      	lsrs	r3, r0, #16
 800d946:	041b      	lsls	r3, r3, #16
 800d948:	b9d3      	cbnz	r3, 800d980 <__hi0bits+0x3c>
 800d94a:	0400      	lsls	r0, r0, #16
 800d94c:	2310      	movs	r3, #16
 800d94e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d952:	bf04      	itt	eq
 800d954:	0200      	lsleq	r0, r0, #8
 800d956:	3308      	addeq	r3, #8
 800d958:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d95c:	bf04      	itt	eq
 800d95e:	0100      	lsleq	r0, r0, #4
 800d960:	3304      	addeq	r3, #4
 800d962:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d966:	bf04      	itt	eq
 800d968:	0080      	lsleq	r0, r0, #2
 800d96a:	3302      	addeq	r3, #2
 800d96c:	2800      	cmp	r0, #0
 800d96e:	db05      	blt.n	800d97c <__hi0bits+0x38>
 800d970:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d974:	f103 0301 	add.w	r3, r3, #1
 800d978:	bf08      	it	eq
 800d97a:	2320      	moveq	r3, #32
 800d97c:	4618      	mov	r0, r3
 800d97e:	4770      	bx	lr
 800d980:	2300      	movs	r3, #0
 800d982:	e7e4      	b.n	800d94e <__hi0bits+0xa>

0800d984 <__lo0bits>:
 800d984:	6803      	ldr	r3, [r0, #0]
 800d986:	f013 0207 	ands.w	r2, r3, #7
 800d98a:	4601      	mov	r1, r0
 800d98c:	d00b      	beq.n	800d9a6 <__lo0bits+0x22>
 800d98e:	07da      	lsls	r2, r3, #31
 800d990:	d423      	bmi.n	800d9da <__lo0bits+0x56>
 800d992:	0798      	lsls	r0, r3, #30
 800d994:	bf49      	itett	mi
 800d996:	085b      	lsrmi	r3, r3, #1
 800d998:	089b      	lsrpl	r3, r3, #2
 800d99a:	2001      	movmi	r0, #1
 800d99c:	600b      	strmi	r3, [r1, #0]
 800d99e:	bf5c      	itt	pl
 800d9a0:	600b      	strpl	r3, [r1, #0]
 800d9a2:	2002      	movpl	r0, #2
 800d9a4:	4770      	bx	lr
 800d9a6:	b298      	uxth	r0, r3
 800d9a8:	b9a8      	cbnz	r0, 800d9d6 <__lo0bits+0x52>
 800d9aa:	0c1b      	lsrs	r3, r3, #16
 800d9ac:	2010      	movs	r0, #16
 800d9ae:	b2da      	uxtb	r2, r3
 800d9b0:	b90a      	cbnz	r2, 800d9b6 <__lo0bits+0x32>
 800d9b2:	3008      	adds	r0, #8
 800d9b4:	0a1b      	lsrs	r3, r3, #8
 800d9b6:	071a      	lsls	r2, r3, #28
 800d9b8:	bf04      	itt	eq
 800d9ba:	091b      	lsreq	r3, r3, #4
 800d9bc:	3004      	addeq	r0, #4
 800d9be:	079a      	lsls	r2, r3, #30
 800d9c0:	bf04      	itt	eq
 800d9c2:	089b      	lsreq	r3, r3, #2
 800d9c4:	3002      	addeq	r0, #2
 800d9c6:	07da      	lsls	r2, r3, #31
 800d9c8:	d403      	bmi.n	800d9d2 <__lo0bits+0x4e>
 800d9ca:	085b      	lsrs	r3, r3, #1
 800d9cc:	f100 0001 	add.w	r0, r0, #1
 800d9d0:	d005      	beq.n	800d9de <__lo0bits+0x5a>
 800d9d2:	600b      	str	r3, [r1, #0]
 800d9d4:	4770      	bx	lr
 800d9d6:	4610      	mov	r0, r2
 800d9d8:	e7e9      	b.n	800d9ae <__lo0bits+0x2a>
 800d9da:	2000      	movs	r0, #0
 800d9dc:	4770      	bx	lr
 800d9de:	2020      	movs	r0, #32
 800d9e0:	4770      	bx	lr
	...

0800d9e4 <__i2b>:
 800d9e4:	b510      	push	{r4, lr}
 800d9e6:	460c      	mov	r4, r1
 800d9e8:	2101      	movs	r1, #1
 800d9ea:	f7ff ff37 	bl	800d85c <_Balloc>
 800d9ee:	4602      	mov	r2, r0
 800d9f0:	b928      	cbnz	r0, 800d9fe <__i2b+0x1a>
 800d9f2:	4b05      	ldr	r3, [pc, #20]	; (800da08 <__i2b+0x24>)
 800d9f4:	4805      	ldr	r0, [pc, #20]	; (800da0c <__i2b+0x28>)
 800d9f6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d9fa:	f7fb fdfb 	bl	80095f4 <__assert_func>
 800d9fe:	2301      	movs	r3, #1
 800da00:	6144      	str	r4, [r0, #20]
 800da02:	6103      	str	r3, [r0, #16]
 800da04:	bd10      	pop	{r4, pc}
 800da06:	bf00      	nop
 800da08:	0800e398 	.word	0x0800e398
 800da0c:	0800e404 	.word	0x0800e404

0800da10 <__multiply>:
 800da10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da14:	4691      	mov	r9, r2
 800da16:	690a      	ldr	r2, [r1, #16]
 800da18:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800da1c:	429a      	cmp	r2, r3
 800da1e:	bfb8      	it	lt
 800da20:	460b      	movlt	r3, r1
 800da22:	460c      	mov	r4, r1
 800da24:	bfbc      	itt	lt
 800da26:	464c      	movlt	r4, r9
 800da28:	4699      	movlt	r9, r3
 800da2a:	6927      	ldr	r7, [r4, #16]
 800da2c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800da30:	68a3      	ldr	r3, [r4, #8]
 800da32:	6861      	ldr	r1, [r4, #4]
 800da34:	eb07 060a 	add.w	r6, r7, sl
 800da38:	42b3      	cmp	r3, r6
 800da3a:	b085      	sub	sp, #20
 800da3c:	bfb8      	it	lt
 800da3e:	3101      	addlt	r1, #1
 800da40:	f7ff ff0c 	bl	800d85c <_Balloc>
 800da44:	b930      	cbnz	r0, 800da54 <__multiply+0x44>
 800da46:	4602      	mov	r2, r0
 800da48:	4b44      	ldr	r3, [pc, #272]	; (800db5c <__multiply+0x14c>)
 800da4a:	4845      	ldr	r0, [pc, #276]	; (800db60 <__multiply+0x150>)
 800da4c:	f240 115d 	movw	r1, #349	; 0x15d
 800da50:	f7fb fdd0 	bl	80095f4 <__assert_func>
 800da54:	f100 0514 	add.w	r5, r0, #20
 800da58:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800da5c:	462b      	mov	r3, r5
 800da5e:	2200      	movs	r2, #0
 800da60:	4543      	cmp	r3, r8
 800da62:	d321      	bcc.n	800daa8 <__multiply+0x98>
 800da64:	f104 0314 	add.w	r3, r4, #20
 800da68:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800da6c:	f109 0314 	add.w	r3, r9, #20
 800da70:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800da74:	9202      	str	r2, [sp, #8]
 800da76:	1b3a      	subs	r2, r7, r4
 800da78:	3a15      	subs	r2, #21
 800da7a:	f022 0203 	bic.w	r2, r2, #3
 800da7e:	3204      	adds	r2, #4
 800da80:	f104 0115 	add.w	r1, r4, #21
 800da84:	428f      	cmp	r7, r1
 800da86:	bf38      	it	cc
 800da88:	2204      	movcc	r2, #4
 800da8a:	9201      	str	r2, [sp, #4]
 800da8c:	9a02      	ldr	r2, [sp, #8]
 800da8e:	9303      	str	r3, [sp, #12]
 800da90:	429a      	cmp	r2, r3
 800da92:	d80c      	bhi.n	800daae <__multiply+0x9e>
 800da94:	2e00      	cmp	r6, #0
 800da96:	dd03      	ble.n	800daa0 <__multiply+0x90>
 800da98:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d05a      	beq.n	800db56 <__multiply+0x146>
 800daa0:	6106      	str	r6, [r0, #16]
 800daa2:	b005      	add	sp, #20
 800daa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800daa8:	f843 2b04 	str.w	r2, [r3], #4
 800daac:	e7d8      	b.n	800da60 <__multiply+0x50>
 800daae:	f8b3 a000 	ldrh.w	sl, [r3]
 800dab2:	f1ba 0f00 	cmp.w	sl, #0
 800dab6:	d024      	beq.n	800db02 <__multiply+0xf2>
 800dab8:	f104 0e14 	add.w	lr, r4, #20
 800dabc:	46a9      	mov	r9, r5
 800dabe:	f04f 0c00 	mov.w	ip, #0
 800dac2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800dac6:	f8d9 1000 	ldr.w	r1, [r9]
 800daca:	fa1f fb82 	uxth.w	fp, r2
 800dace:	b289      	uxth	r1, r1
 800dad0:	fb0a 110b 	mla	r1, sl, fp, r1
 800dad4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800dad8:	f8d9 2000 	ldr.w	r2, [r9]
 800dadc:	4461      	add	r1, ip
 800dade:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800dae2:	fb0a c20b 	mla	r2, sl, fp, ip
 800dae6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800daea:	b289      	uxth	r1, r1
 800daec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800daf0:	4577      	cmp	r7, lr
 800daf2:	f849 1b04 	str.w	r1, [r9], #4
 800daf6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800dafa:	d8e2      	bhi.n	800dac2 <__multiply+0xb2>
 800dafc:	9a01      	ldr	r2, [sp, #4]
 800dafe:	f845 c002 	str.w	ip, [r5, r2]
 800db02:	9a03      	ldr	r2, [sp, #12]
 800db04:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800db08:	3304      	adds	r3, #4
 800db0a:	f1b9 0f00 	cmp.w	r9, #0
 800db0e:	d020      	beq.n	800db52 <__multiply+0x142>
 800db10:	6829      	ldr	r1, [r5, #0]
 800db12:	f104 0c14 	add.w	ip, r4, #20
 800db16:	46ae      	mov	lr, r5
 800db18:	f04f 0a00 	mov.w	sl, #0
 800db1c:	f8bc b000 	ldrh.w	fp, [ip]
 800db20:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800db24:	fb09 220b 	mla	r2, r9, fp, r2
 800db28:	4492      	add	sl, r2
 800db2a:	b289      	uxth	r1, r1
 800db2c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800db30:	f84e 1b04 	str.w	r1, [lr], #4
 800db34:	f85c 2b04 	ldr.w	r2, [ip], #4
 800db38:	f8be 1000 	ldrh.w	r1, [lr]
 800db3c:	0c12      	lsrs	r2, r2, #16
 800db3e:	fb09 1102 	mla	r1, r9, r2, r1
 800db42:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800db46:	4567      	cmp	r7, ip
 800db48:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800db4c:	d8e6      	bhi.n	800db1c <__multiply+0x10c>
 800db4e:	9a01      	ldr	r2, [sp, #4]
 800db50:	50a9      	str	r1, [r5, r2]
 800db52:	3504      	adds	r5, #4
 800db54:	e79a      	b.n	800da8c <__multiply+0x7c>
 800db56:	3e01      	subs	r6, #1
 800db58:	e79c      	b.n	800da94 <__multiply+0x84>
 800db5a:	bf00      	nop
 800db5c:	0800e398 	.word	0x0800e398
 800db60:	0800e404 	.word	0x0800e404

0800db64 <__pow5mult>:
 800db64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db68:	4615      	mov	r5, r2
 800db6a:	f012 0203 	ands.w	r2, r2, #3
 800db6e:	4606      	mov	r6, r0
 800db70:	460f      	mov	r7, r1
 800db72:	d007      	beq.n	800db84 <__pow5mult+0x20>
 800db74:	4c1a      	ldr	r4, [pc, #104]	; (800dbe0 <__pow5mult+0x7c>)
 800db76:	3a01      	subs	r2, #1
 800db78:	2300      	movs	r3, #0
 800db7a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800db7e:	f7ff fe9b 	bl	800d8b8 <__multadd>
 800db82:	4607      	mov	r7, r0
 800db84:	10ad      	asrs	r5, r5, #2
 800db86:	d027      	beq.n	800dbd8 <__pow5mult+0x74>
 800db88:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 800db8a:	b944      	cbnz	r4, 800db9e <__pow5mult+0x3a>
 800db8c:	f240 2171 	movw	r1, #625	; 0x271
 800db90:	4630      	mov	r0, r6
 800db92:	f7ff ff27 	bl	800d9e4 <__i2b>
 800db96:	2300      	movs	r3, #0
 800db98:	64b0      	str	r0, [r6, #72]	; 0x48
 800db9a:	4604      	mov	r4, r0
 800db9c:	6003      	str	r3, [r0, #0]
 800db9e:	f04f 0900 	mov.w	r9, #0
 800dba2:	07eb      	lsls	r3, r5, #31
 800dba4:	d50a      	bpl.n	800dbbc <__pow5mult+0x58>
 800dba6:	4639      	mov	r1, r7
 800dba8:	4622      	mov	r2, r4
 800dbaa:	4630      	mov	r0, r6
 800dbac:	f7ff ff30 	bl	800da10 <__multiply>
 800dbb0:	4639      	mov	r1, r7
 800dbb2:	4680      	mov	r8, r0
 800dbb4:	4630      	mov	r0, r6
 800dbb6:	f7ff fe76 	bl	800d8a6 <_Bfree>
 800dbba:	4647      	mov	r7, r8
 800dbbc:	106d      	asrs	r5, r5, #1
 800dbbe:	d00b      	beq.n	800dbd8 <__pow5mult+0x74>
 800dbc0:	6820      	ldr	r0, [r4, #0]
 800dbc2:	b938      	cbnz	r0, 800dbd4 <__pow5mult+0x70>
 800dbc4:	4622      	mov	r2, r4
 800dbc6:	4621      	mov	r1, r4
 800dbc8:	4630      	mov	r0, r6
 800dbca:	f7ff ff21 	bl	800da10 <__multiply>
 800dbce:	6020      	str	r0, [r4, #0]
 800dbd0:	f8c0 9000 	str.w	r9, [r0]
 800dbd4:	4604      	mov	r4, r0
 800dbd6:	e7e4      	b.n	800dba2 <__pow5mult+0x3e>
 800dbd8:	4638      	mov	r0, r7
 800dbda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dbde:	bf00      	nop
 800dbe0:	0800e550 	.word	0x0800e550

0800dbe4 <__lshift>:
 800dbe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dbe8:	460c      	mov	r4, r1
 800dbea:	6849      	ldr	r1, [r1, #4]
 800dbec:	6923      	ldr	r3, [r4, #16]
 800dbee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800dbf2:	68a3      	ldr	r3, [r4, #8]
 800dbf4:	4607      	mov	r7, r0
 800dbf6:	4691      	mov	r9, r2
 800dbf8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800dbfc:	f108 0601 	add.w	r6, r8, #1
 800dc00:	42b3      	cmp	r3, r6
 800dc02:	db0b      	blt.n	800dc1c <__lshift+0x38>
 800dc04:	4638      	mov	r0, r7
 800dc06:	f7ff fe29 	bl	800d85c <_Balloc>
 800dc0a:	4605      	mov	r5, r0
 800dc0c:	b948      	cbnz	r0, 800dc22 <__lshift+0x3e>
 800dc0e:	4602      	mov	r2, r0
 800dc10:	4b2a      	ldr	r3, [pc, #168]	; (800dcbc <__lshift+0xd8>)
 800dc12:	482b      	ldr	r0, [pc, #172]	; (800dcc0 <__lshift+0xdc>)
 800dc14:	f240 11d9 	movw	r1, #473	; 0x1d9
 800dc18:	f7fb fcec 	bl	80095f4 <__assert_func>
 800dc1c:	3101      	adds	r1, #1
 800dc1e:	005b      	lsls	r3, r3, #1
 800dc20:	e7ee      	b.n	800dc00 <__lshift+0x1c>
 800dc22:	2300      	movs	r3, #0
 800dc24:	f100 0114 	add.w	r1, r0, #20
 800dc28:	f100 0210 	add.w	r2, r0, #16
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	4553      	cmp	r3, sl
 800dc30:	db37      	blt.n	800dca2 <__lshift+0xbe>
 800dc32:	6920      	ldr	r0, [r4, #16]
 800dc34:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dc38:	f104 0314 	add.w	r3, r4, #20
 800dc3c:	f019 091f 	ands.w	r9, r9, #31
 800dc40:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800dc44:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800dc48:	d02f      	beq.n	800dcaa <__lshift+0xc6>
 800dc4a:	f1c9 0e20 	rsb	lr, r9, #32
 800dc4e:	468a      	mov	sl, r1
 800dc50:	f04f 0c00 	mov.w	ip, #0
 800dc54:	681a      	ldr	r2, [r3, #0]
 800dc56:	fa02 f209 	lsl.w	r2, r2, r9
 800dc5a:	ea42 020c 	orr.w	r2, r2, ip
 800dc5e:	f84a 2b04 	str.w	r2, [sl], #4
 800dc62:	f853 2b04 	ldr.w	r2, [r3], #4
 800dc66:	4298      	cmp	r0, r3
 800dc68:	fa22 fc0e 	lsr.w	ip, r2, lr
 800dc6c:	d8f2      	bhi.n	800dc54 <__lshift+0x70>
 800dc6e:	1b03      	subs	r3, r0, r4
 800dc70:	3b15      	subs	r3, #21
 800dc72:	f023 0303 	bic.w	r3, r3, #3
 800dc76:	3304      	adds	r3, #4
 800dc78:	f104 0215 	add.w	r2, r4, #21
 800dc7c:	4290      	cmp	r0, r2
 800dc7e:	bf38      	it	cc
 800dc80:	2304      	movcc	r3, #4
 800dc82:	f841 c003 	str.w	ip, [r1, r3]
 800dc86:	f1bc 0f00 	cmp.w	ip, #0
 800dc8a:	d001      	beq.n	800dc90 <__lshift+0xac>
 800dc8c:	f108 0602 	add.w	r6, r8, #2
 800dc90:	3e01      	subs	r6, #1
 800dc92:	4638      	mov	r0, r7
 800dc94:	612e      	str	r6, [r5, #16]
 800dc96:	4621      	mov	r1, r4
 800dc98:	f7ff fe05 	bl	800d8a6 <_Bfree>
 800dc9c:	4628      	mov	r0, r5
 800dc9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dca2:	f842 0f04 	str.w	r0, [r2, #4]!
 800dca6:	3301      	adds	r3, #1
 800dca8:	e7c1      	b.n	800dc2e <__lshift+0x4a>
 800dcaa:	3904      	subs	r1, #4
 800dcac:	f853 2b04 	ldr.w	r2, [r3], #4
 800dcb0:	f841 2f04 	str.w	r2, [r1, #4]!
 800dcb4:	4298      	cmp	r0, r3
 800dcb6:	d8f9      	bhi.n	800dcac <__lshift+0xc8>
 800dcb8:	e7ea      	b.n	800dc90 <__lshift+0xac>
 800dcba:	bf00      	nop
 800dcbc:	0800e398 	.word	0x0800e398
 800dcc0:	0800e404 	.word	0x0800e404

0800dcc4 <__mcmp>:
 800dcc4:	b530      	push	{r4, r5, lr}
 800dcc6:	6902      	ldr	r2, [r0, #16]
 800dcc8:	690c      	ldr	r4, [r1, #16]
 800dcca:	1b12      	subs	r2, r2, r4
 800dccc:	d10e      	bne.n	800dcec <__mcmp+0x28>
 800dcce:	f100 0314 	add.w	r3, r0, #20
 800dcd2:	3114      	adds	r1, #20
 800dcd4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800dcd8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800dcdc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800dce0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800dce4:	42a5      	cmp	r5, r4
 800dce6:	d003      	beq.n	800dcf0 <__mcmp+0x2c>
 800dce8:	d305      	bcc.n	800dcf6 <__mcmp+0x32>
 800dcea:	2201      	movs	r2, #1
 800dcec:	4610      	mov	r0, r2
 800dcee:	bd30      	pop	{r4, r5, pc}
 800dcf0:	4283      	cmp	r3, r0
 800dcf2:	d3f3      	bcc.n	800dcdc <__mcmp+0x18>
 800dcf4:	e7fa      	b.n	800dcec <__mcmp+0x28>
 800dcf6:	f04f 32ff 	mov.w	r2, #4294967295
 800dcfa:	e7f7      	b.n	800dcec <__mcmp+0x28>

0800dcfc <__mdiff>:
 800dcfc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd00:	460c      	mov	r4, r1
 800dd02:	4606      	mov	r6, r0
 800dd04:	4611      	mov	r1, r2
 800dd06:	4620      	mov	r0, r4
 800dd08:	4690      	mov	r8, r2
 800dd0a:	f7ff ffdb 	bl	800dcc4 <__mcmp>
 800dd0e:	1e05      	subs	r5, r0, #0
 800dd10:	d110      	bne.n	800dd34 <__mdiff+0x38>
 800dd12:	4629      	mov	r1, r5
 800dd14:	4630      	mov	r0, r6
 800dd16:	f7ff fda1 	bl	800d85c <_Balloc>
 800dd1a:	b930      	cbnz	r0, 800dd2a <__mdiff+0x2e>
 800dd1c:	4b3a      	ldr	r3, [pc, #232]	; (800de08 <__mdiff+0x10c>)
 800dd1e:	4602      	mov	r2, r0
 800dd20:	f240 2132 	movw	r1, #562	; 0x232
 800dd24:	4839      	ldr	r0, [pc, #228]	; (800de0c <__mdiff+0x110>)
 800dd26:	f7fb fc65 	bl	80095f4 <__assert_func>
 800dd2a:	2301      	movs	r3, #1
 800dd2c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800dd30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd34:	bfa4      	itt	ge
 800dd36:	4643      	movge	r3, r8
 800dd38:	46a0      	movge	r8, r4
 800dd3a:	4630      	mov	r0, r6
 800dd3c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800dd40:	bfa6      	itte	ge
 800dd42:	461c      	movge	r4, r3
 800dd44:	2500      	movge	r5, #0
 800dd46:	2501      	movlt	r5, #1
 800dd48:	f7ff fd88 	bl	800d85c <_Balloc>
 800dd4c:	b920      	cbnz	r0, 800dd58 <__mdiff+0x5c>
 800dd4e:	4b2e      	ldr	r3, [pc, #184]	; (800de08 <__mdiff+0x10c>)
 800dd50:	4602      	mov	r2, r0
 800dd52:	f44f 7110 	mov.w	r1, #576	; 0x240
 800dd56:	e7e5      	b.n	800dd24 <__mdiff+0x28>
 800dd58:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800dd5c:	6926      	ldr	r6, [r4, #16]
 800dd5e:	60c5      	str	r5, [r0, #12]
 800dd60:	f104 0914 	add.w	r9, r4, #20
 800dd64:	f108 0514 	add.w	r5, r8, #20
 800dd68:	f100 0e14 	add.w	lr, r0, #20
 800dd6c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800dd70:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800dd74:	f108 0210 	add.w	r2, r8, #16
 800dd78:	46f2      	mov	sl, lr
 800dd7a:	2100      	movs	r1, #0
 800dd7c:	f859 3b04 	ldr.w	r3, [r9], #4
 800dd80:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800dd84:	fa1f f883 	uxth.w	r8, r3
 800dd88:	fa11 f18b 	uxtah	r1, r1, fp
 800dd8c:	0c1b      	lsrs	r3, r3, #16
 800dd8e:	eba1 0808 	sub.w	r8, r1, r8
 800dd92:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800dd96:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800dd9a:	fa1f f888 	uxth.w	r8, r8
 800dd9e:	1419      	asrs	r1, r3, #16
 800dda0:	454e      	cmp	r6, r9
 800dda2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800dda6:	f84a 3b04 	str.w	r3, [sl], #4
 800ddaa:	d8e7      	bhi.n	800dd7c <__mdiff+0x80>
 800ddac:	1b33      	subs	r3, r6, r4
 800ddae:	3b15      	subs	r3, #21
 800ddb0:	f023 0303 	bic.w	r3, r3, #3
 800ddb4:	3304      	adds	r3, #4
 800ddb6:	3415      	adds	r4, #21
 800ddb8:	42a6      	cmp	r6, r4
 800ddba:	bf38      	it	cc
 800ddbc:	2304      	movcc	r3, #4
 800ddbe:	441d      	add	r5, r3
 800ddc0:	4473      	add	r3, lr
 800ddc2:	469e      	mov	lr, r3
 800ddc4:	462e      	mov	r6, r5
 800ddc6:	4566      	cmp	r6, ip
 800ddc8:	d30e      	bcc.n	800dde8 <__mdiff+0xec>
 800ddca:	f10c 0203 	add.w	r2, ip, #3
 800ddce:	1b52      	subs	r2, r2, r5
 800ddd0:	f022 0203 	bic.w	r2, r2, #3
 800ddd4:	3d03      	subs	r5, #3
 800ddd6:	45ac      	cmp	ip, r5
 800ddd8:	bf38      	it	cc
 800ddda:	2200      	movcc	r2, #0
 800dddc:	441a      	add	r2, r3
 800ddde:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800dde2:	b17b      	cbz	r3, 800de04 <__mdiff+0x108>
 800dde4:	6107      	str	r7, [r0, #16]
 800dde6:	e7a3      	b.n	800dd30 <__mdiff+0x34>
 800dde8:	f856 8b04 	ldr.w	r8, [r6], #4
 800ddec:	fa11 f288 	uxtah	r2, r1, r8
 800ddf0:	1414      	asrs	r4, r2, #16
 800ddf2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ddf6:	b292      	uxth	r2, r2
 800ddf8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ddfc:	f84e 2b04 	str.w	r2, [lr], #4
 800de00:	1421      	asrs	r1, r4, #16
 800de02:	e7e0      	b.n	800ddc6 <__mdiff+0xca>
 800de04:	3f01      	subs	r7, #1
 800de06:	e7ea      	b.n	800ddde <__mdiff+0xe2>
 800de08:	0800e398 	.word	0x0800e398
 800de0c:	0800e404 	.word	0x0800e404

0800de10 <__d2b>:
 800de10:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800de14:	4689      	mov	r9, r1
 800de16:	2101      	movs	r1, #1
 800de18:	ec57 6b10 	vmov	r6, r7, d0
 800de1c:	4690      	mov	r8, r2
 800de1e:	f7ff fd1d 	bl	800d85c <_Balloc>
 800de22:	4604      	mov	r4, r0
 800de24:	b930      	cbnz	r0, 800de34 <__d2b+0x24>
 800de26:	4602      	mov	r2, r0
 800de28:	4b25      	ldr	r3, [pc, #148]	; (800dec0 <__d2b+0xb0>)
 800de2a:	4826      	ldr	r0, [pc, #152]	; (800dec4 <__d2b+0xb4>)
 800de2c:	f240 310a 	movw	r1, #778	; 0x30a
 800de30:	f7fb fbe0 	bl	80095f4 <__assert_func>
 800de34:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800de38:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800de3c:	bb35      	cbnz	r5, 800de8c <__d2b+0x7c>
 800de3e:	2e00      	cmp	r6, #0
 800de40:	9301      	str	r3, [sp, #4]
 800de42:	d028      	beq.n	800de96 <__d2b+0x86>
 800de44:	4668      	mov	r0, sp
 800de46:	9600      	str	r6, [sp, #0]
 800de48:	f7ff fd9c 	bl	800d984 <__lo0bits>
 800de4c:	9900      	ldr	r1, [sp, #0]
 800de4e:	b300      	cbz	r0, 800de92 <__d2b+0x82>
 800de50:	9a01      	ldr	r2, [sp, #4]
 800de52:	f1c0 0320 	rsb	r3, r0, #32
 800de56:	fa02 f303 	lsl.w	r3, r2, r3
 800de5a:	430b      	orrs	r3, r1
 800de5c:	40c2      	lsrs	r2, r0
 800de5e:	6163      	str	r3, [r4, #20]
 800de60:	9201      	str	r2, [sp, #4]
 800de62:	9b01      	ldr	r3, [sp, #4]
 800de64:	61a3      	str	r3, [r4, #24]
 800de66:	2b00      	cmp	r3, #0
 800de68:	bf14      	ite	ne
 800de6a:	2202      	movne	r2, #2
 800de6c:	2201      	moveq	r2, #1
 800de6e:	6122      	str	r2, [r4, #16]
 800de70:	b1d5      	cbz	r5, 800dea8 <__d2b+0x98>
 800de72:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800de76:	4405      	add	r5, r0
 800de78:	f8c9 5000 	str.w	r5, [r9]
 800de7c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800de80:	f8c8 0000 	str.w	r0, [r8]
 800de84:	4620      	mov	r0, r4
 800de86:	b003      	add	sp, #12
 800de88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800de8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800de90:	e7d5      	b.n	800de3e <__d2b+0x2e>
 800de92:	6161      	str	r1, [r4, #20]
 800de94:	e7e5      	b.n	800de62 <__d2b+0x52>
 800de96:	a801      	add	r0, sp, #4
 800de98:	f7ff fd74 	bl	800d984 <__lo0bits>
 800de9c:	9b01      	ldr	r3, [sp, #4]
 800de9e:	6163      	str	r3, [r4, #20]
 800dea0:	2201      	movs	r2, #1
 800dea2:	6122      	str	r2, [r4, #16]
 800dea4:	3020      	adds	r0, #32
 800dea6:	e7e3      	b.n	800de70 <__d2b+0x60>
 800dea8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800deac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800deb0:	f8c9 0000 	str.w	r0, [r9]
 800deb4:	6918      	ldr	r0, [r3, #16]
 800deb6:	f7ff fd45 	bl	800d944 <__hi0bits>
 800deba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800debe:	e7df      	b.n	800de80 <__d2b+0x70>
 800dec0:	0800e398 	.word	0x0800e398
 800dec4:	0800e404 	.word	0x0800e404

0800dec8 <_read_r>:
 800dec8:	b538      	push	{r3, r4, r5, lr}
 800deca:	4d07      	ldr	r5, [pc, #28]	; (800dee8 <_read_r+0x20>)
 800decc:	4604      	mov	r4, r0
 800dece:	4608      	mov	r0, r1
 800ded0:	4611      	mov	r1, r2
 800ded2:	2200      	movs	r2, #0
 800ded4:	602a      	str	r2, [r5, #0]
 800ded6:	461a      	mov	r2, r3
 800ded8:	f7f3 faa0 	bl	800141c <_read>
 800dedc:	1c43      	adds	r3, r0, #1
 800dede:	d102      	bne.n	800dee6 <_read_r+0x1e>
 800dee0:	682b      	ldr	r3, [r5, #0]
 800dee2:	b103      	cbz	r3, 800dee6 <_read_r+0x1e>
 800dee4:	6023      	str	r3, [r4, #0]
 800dee6:	bd38      	pop	{r3, r4, r5, pc}
 800dee8:	2000203c 	.word	0x2000203c

0800deec <frexp>:
 800deec:	b570      	push	{r4, r5, r6, lr}
 800deee:	2100      	movs	r1, #0
 800def0:	ec55 4b10 	vmov	r4, r5, d0
 800def4:	6001      	str	r1, [r0, #0]
 800def6:	4916      	ldr	r1, [pc, #88]	; (800df50 <frexp+0x64>)
 800def8:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 800defc:	428a      	cmp	r2, r1
 800defe:	4606      	mov	r6, r0
 800df00:	462b      	mov	r3, r5
 800df02:	dc22      	bgt.n	800df4a <frexp+0x5e>
 800df04:	ee10 1a10 	vmov	r1, s0
 800df08:	4311      	orrs	r1, r2
 800df0a:	d01e      	beq.n	800df4a <frexp+0x5e>
 800df0c:	4911      	ldr	r1, [pc, #68]	; (800df54 <frexp+0x68>)
 800df0e:	4029      	ands	r1, r5
 800df10:	b969      	cbnz	r1, 800df2e <frexp+0x42>
 800df12:	4b11      	ldr	r3, [pc, #68]	; (800df58 <frexp+0x6c>)
 800df14:	2200      	movs	r2, #0
 800df16:	ee10 0a10 	vmov	r0, s0
 800df1a:	4629      	mov	r1, r5
 800df1c:	f7f2 fb74 	bl	8000608 <__aeabi_dmul>
 800df20:	460b      	mov	r3, r1
 800df22:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800df26:	f06f 0135 	mvn.w	r1, #53	; 0x35
 800df2a:	4604      	mov	r4, r0
 800df2c:	6031      	str	r1, [r6, #0]
 800df2e:	6831      	ldr	r1, [r6, #0]
 800df30:	1512      	asrs	r2, r2, #20
 800df32:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800df36:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 800df3a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800df3e:	440a      	add	r2, r1
 800df40:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 800df44:	6032      	str	r2, [r6, #0]
 800df46:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 800df4a:	ec45 4b10 	vmov	d0, r4, r5
 800df4e:	bd70      	pop	{r4, r5, r6, pc}
 800df50:	7fefffff 	.word	0x7fefffff
 800df54:	7ff00000 	.word	0x7ff00000
 800df58:	43500000 	.word	0x43500000

0800df5c <__ssprint_r>:
 800df5c:	6893      	ldr	r3, [r2, #8]
 800df5e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df62:	4680      	mov	r8, r0
 800df64:	460c      	mov	r4, r1
 800df66:	4617      	mov	r7, r2
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d061      	beq.n	800e030 <__ssprint_r+0xd4>
 800df6c:	2300      	movs	r3, #0
 800df6e:	f8d2 a000 	ldr.w	sl, [r2]
 800df72:	9301      	str	r3, [sp, #4]
 800df74:	469b      	mov	fp, r3
 800df76:	f1bb 0f00 	cmp.w	fp, #0
 800df7a:	d02b      	beq.n	800dfd4 <__ssprint_r+0x78>
 800df7c:	68a6      	ldr	r6, [r4, #8]
 800df7e:	455e      	cmp	r6, fp
 800df80:	d844      	bhi.n	800e00c <__ssprint_r+0xb0>
 800df82:	89a2      	ldrh	r2, [r4, #12]
 800df84:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800df88:	d03e      	beq.n	800e008 <__ssprint_r+0xac>
 800df8a:	6820      	ldr	r0, [r4, #0]
 800df8c:	6921      	ldr	r1, [r4, #16]
 800df8e:	6965      	ldr	r5, [r4, #20]
 800df90:	eba0 0901 	sub.w	r9, r0, r1
 800df94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800df98:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800df9c:	f109 0001 	add.w	r0, r9, #1
 800dfa0:	106d      	asrs	r5, r5, #1
 800dfa2:	4458      	add	r0, fp
 800dfa4:	4285      	cmp	r5, r0
 800dfa6:	bf38      	it	cc
 800dfa8:	4605      	movcc	r5, r0
 800dfaa:	0553      	lsls	r3, r2, #21
 800dfac:	d545      	bpl.n	800e03a <__ssprint_r+0xde>
 800dfae:	4629      	mov	r1, r5
 800dfb0:	4640      	mov	r0, r8
 800dfb2:	f7fc fddb 	bl	800ab6c <_malloc_r>
 800dfb6:	4606      	mov	r6, r0
 800dfb8:	b9a0      	cbnz	r0, 800dfe4 <__ssprint_r+0x88>
 800dfba:	230c      	movs	r3, #12
 800dfbc:	f8c8 3000 	str.w	r3, [r8]
 800dfc0:	89a3      	ldrh	r3, [r4, #12]
 800dfc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dfc6:	81a3      	strh	r3, [r4, #12]
 800dfc8:	2300      	movs	r3, #0
 800dfca:	e9c7 3301 	strd	r3, r3, [r7, #4]
 800dfce:	f04f 30ff 	mov.w	r0, #4294967295
 800dfd2:	e02f      	b.n	800e034 <__ssprint_r+0xd8>
 800dfd4:	f8da 3000 	ldr.w	r3, [sl]
 800dfd8:	f8da b004 	ldr.w	fp, [sl, #4]
 800dfdc:	9301      	str	r3, [sp, #4]
 800dfde:	f10a 0a08 	add.w	sl, sl, #8
 800dfe2:	e7c8      	b.n	800df76 <__ssprint_r+0x1a>
 800dfe4:	464a      	mov	r2, r9
 800dfe6:	6921      	ldr	r1, [r4, #16]
 800dfe8:	f7fb fb5e 	bl	80096a8 <memcpy>
 800dfec:	89a2      	ldrh	r2, [r4, #12]
 800dfee:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800dff2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800dff6:	81a2      	strh	r2, [r4, #12]
 800dff8:	6126      	str	r6, [r4, #16]
 800dffa:	6165      	str	r5, [r4, #20]
 800dffc:	444e      	add	r6, r9
 800dffe:	eba5 0509 	sub.w	r5, r5, r9
 800e002:	6026      	str	r6, [r4, #0]
 800e004:	60a5      	str	r5, [r4, #8]
 800e006:	465e      	mov	r6, fp
 800e008:	455e      	cmp	r6, fp
 800e00a:	d900      	bls.n	800e00e <__ssprint_r+0xb2>
 800e00c:	465e      	mov	r6, fp
 800e00e:	4632      	mov	r2, r6
 800e010:	9901      	ldr	r1, [sp, #4]
 800e012:	6820      	ldr	r0, [r4, #0]
 800e014:	f7fc fff8 	bl	800b008 <memmove>
 800e018:	68a2      	ldr	r2, [r4, #8]
 800e01a:	1b92      	subs	r2, r2, r6
 800e01c:	60a2      	str	r2, [r4, #8]
 800e01e:	6822      	ldr	r2, [r4, #0]
 800e020:	4432      	add	r2, r6
 800e022:	6022      	str	r2, [r4, #0]
 800e024:	68ba      	ldr	r2, [r7, #8]
 800e026:	eba2 030b 	sub.w	r3, r2, fp
 800e02a:	60bb      	str	r3, [r7, #8]
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d1d1      	bne.n	800dfd4 <__ssprint_r+0x78>
 800e030:	2000      	movs	r0, #0
 800e032:	6078      	str	r0, [r7, #4]
 800e034:	b003      	add	sp, #12
 800e036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e03a:	462a      	mov	r2, r5
 800e03c:	4640      	mov	r0, r8
 800e03e:	f7fd f809 	bl	800b054 <_realloc_r>
 800e042:	4606      	mov	r6, r0
 800e044:	2800      	cmp	r0, #0
 800e046:	d1d7      	bne.n	800dff8 <__ssprint_r+0x9c>
 800e048:	6921      	ldr	r1, [r4, #16]
 800e04a:	4640      	mov	r0, r8
 800e04c:	f7fc faea 	bl	800a624 <_free_r>
 800e050:	e7b3      	b.n	800dfba <__ssprint_r+0x5e>

0800e052 <_calloc_r>:
 800e052:	b538      	push	{r3, r4, r5, lr}
 800e054:	fba1 1502 	umull	r1, r5, r1, r2
 800e058:	b92d      	cbnz	r5, 800e066 <_calloc_r+0x14>
 800e05a:	f7fc fd87 	bl	800ab6c <_malloc_r>
 800e05e:	4604      	mov	r4, r0
 800e060:	b938      	cbnz	r0, 800e072 <_calloc_r+0x20>
 800e062:	4620      	mov	r0, r4
 800e064:	bd38      	pop	{r3, r4, r5, pc}
 800e066:	f7fb fae3 	bl	8009630 <__errno>
 800e06a:	230c      	movs	r3, #12
 800e06c:	6003      	str	r3, [r0, #0]
 800e06e:	2400      	movs	r4, #0
 800e070:	e7f7      	b.n	800e062 <_calloc_r+0x10>
 800e072:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800e076:	f022 0203 	bic.w	r2, r2, #3
 800e07a:	3a04      	subs	r2, #4
 800e07c:	2a24      	cmp	r2, #36	; 0x24
 800e07e:	d819      	bhi.n	800e0b4 <_calloc_r+0x62>
 800e080:	2a13      	cmp	r2, #19
 800e082:	d915      	bls.n	800e0b0 <_calloc_r+0x5e>
 800e084:	2a1b      	cmp	r2, #27
 800e086:	e9c0 5500 	strd	r5, r5, [r0]
 800e08a:	d806      	bhi.n	800e09a <_calloc_r+0x48>
 800e08c:	f100 0308 	add.w	r3, r0, #8
 800e090:	2200      	movs	r2, #0
 800e092:	e9c3 2200 	strd	r2, r2, [r3]
 800e096:	609a      	str	r2, [r3, #8]
 800e098:	e7e3      	b.n	800e062 <_calloc_r+0x10>
 800e09a:	2a24      	cmp	r2, #36	; 0x24
 800e09c:	e9c0 5502 	strd	r5, r5, [r0, #8]
 800e0a0:	bf11      	iteee	ne
 800e0a2:	f100 0310 	addne.w	r3, r0, #16
 800e0a6:	6105      	streq	r5, [r0, #16]
 800e0a8:	f100 0318 	addeq.w	r3, r0, #24
 800e0ac:	6145      	streq	r5, [r0, #20]
 800e0ae:	e7ef      	b.n	800e090 <_calloc_r+0x3e>
 800e0b0:	4603      	mov	r3, r0
 800e0b2:	e7ed      	b.n	800e090 <_calloc_r+0x3e>
 800e0b4:	4629      	mov	r1, r5
 800e0b6:	f7fb fb05 	bl	80096c4 <memset>
 800e0ba:	e7d2      	b.n	800e062 <_calloc_r+0x10>

0800e0bc <_init>:
 800e0bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0be:	bf00      	nop
 800e0c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e0c2:	bc08      	pop	{r3}
 800e0c4:	469e      	mov	lr, r3
 800e0c6:	4770      	bx	lr

0800e0c8 <_fini>:
 800e0c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0ca:	bf00      	nop
 800e0cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e0ce:	bc08      	pop	{r3}
 800e0d0:	469e      	mov	lr, r3
 800e0d2:	4770      	bx	lr
